{"version":3,"sources":["../src/influx_helper.js"],"names":["writeLineForUpdate","status","data","line","writeTags","order_id","product_id","compl_qty","undefined","machine_state","getRid","scrap_qty","setpoint_rate","actual_start_datetime","actual_end_datetime","product_desc","order_date","planned_changeover_time","endTime","startTime","production_line","order_qty","planned_rate","writeLineForCreate","initState","product","split","orderId","date","productionLine","changeover","orderQty","plannedRate","writeLineForTimeUpdate","timeDiff","action","hasTurnedAround","roundedTimeDiff","roundTime","moment","subtract","valueOf","add","writeLineForUpdateWithRemovingTime","currentStatus","writeLineForUpdateWithChangingTime","writeLineForUpdateDragging","targLine","targeting_date","prod_id","timeText","getTimeText","duration","time","get","hour","mins","seconds","x","join","utils","cons","writeUrl","influxHost"],"mappings":"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","file":"influx_helper.js","sourcesContent":["import * as utils from './utils';\r\nimport * as cons from './constans';\r\nimport moment from 'moment';\r\n\r\nexport const writeUrl = utils.influxHost + 'write?db=smart_factory';\r\n\r\nlet hasTurnedAround = false;\r\n\r\n/**\r\n * Expect the status string (Normally are: 'Ready' or 'Deleted')\r\n * Then changed the status in the line with anything else unchanged\r\n * @param {*} status\r\n */\r\nexport function writeLineForUpdate(status, data) {\r\n  // For influxdb tag keys, must add a forward slash \\ before each space\r\n\r\n  let line = writeTags(data.order_id, data.product_id);\r\n\r\n  if (data.compl_qty !== null && data.compl_qty !== undefined) {\r\n    line += 'compl_qty=' + data.compl_qty + ',';\r\n  }\r\n  if (data.machine_state !== null && data.machine_state !== undefined) {\r\n    line += 'machine_state=\"' + getRid(data.machine_state) + '\"' + ',';\r\n  }\r\n  if (data.scrap_qty !== null && data.scrap_qty !== undefined) {\r\n    line += 'scrap_qty=' + data.scrap_qty + ',';\r\n  }\r\n  if (data.setpoint_rate !== null && data.setpoint_rate !== undefined) {\r\n    line += 'setpoint_rate=' + data.setpoint_rate + ',';\r\n  }\r\n  if (\r\n    data.actual_start_datetime !== null &&\r\n    data.actual_start_datetime !== undefined\r\n  ) {\r\n    line += 'actual_start_datetime=' + data.actual_start_datetime + ',';\r\n  }\r\n  if (\r\n    data.actual_end_datetime !== null &&\r\n    data.actual_end_datetime !== undefined\r\n  ) {\r\n    line += 'actual_end_datetime=' + data.actual_end_datetime + ',';\r\n  }\r\n\r\n  line += 'order_state=\"' + getRid(status) + '\"' + ',';\r\n  line += 'product_desc=\"' + getRid(data.product_desc) + '\"' + ',';\r\n  line += 'order_date=\"' + data.order_date + '\"' + ',';\r\n  line +=\r\n    'planned_changeover_time=\"' + data.planned_changeover_time + '\"' + ',';\r\n  line += 'scheduled_end_datetime=' + data.endTime + ',';\r\n  line += 'scheduled_start_datetime=' + data.startTime + ',';\r\n  line += 'production_line=\"' + getRid(data.production_line) + '\"' + ',';\r\n  line += 'order_qty=' + data.order_qty + ',';\r\n  line += 'planned_rate=' + data.planned_rate;\r\n\r\n  // console.log('writeLineForUpdate');\r\n  // console.log(line);\r\n  return line;\r\n}\r\n\r\nexport function writeLineForCreate(data, initState) {\r\n  const product_id = data.product.split(' | ')[0];\r\n  let product_desc = data.product.split(' | ')[1];\r\n\r\n  let line = writeTags(data.orderId, product_id);\r\n  line += 'order_state=\"' + getRid(initState) + '\"' + ',';\r\n  line += 'product_desc=\"' + getRid(product_desc) + '\"' + ',';\r\n  line += 'order_date=\"' + data.date + '\"' + ',';\r\n  line += 'production_line=\"' + getRid(data.productionLine) + '\"' + ',';\r\n  line += 'planned_changeover_time=\"' + data.changeover + '\"' + ',';\r\n  line += 'scheduled_end_datetime=' + data.endTime + ',';\r\n  line += 'scheduled_start_datetime=' + data.startTime + ',';\r\n  line += 'order_qty=' + data.orderQty + ',';\r\n  line += 'setpoint_rate=' + 0 + ',';\r\n  line += 'planned_rate=' + data.plannedRate;\r\n\r\n  // console.log(line);\r\n  return line;\r\n}\r\n\r\n/**\r\n * Prepare a line for influxdb request\r\n * @param {{}} data Expecting Object : The order data that is to be updated\r\n * @param {moment} timeDiff Expecting (Moment Duration Object): The time difference that this order is going to add / subtract\r\n * @param {string} action Expecting String : The action (add / subtract), example -> 'subtract'\r\n */\r\nexport function writeLineForTimeUpdate(data, timeDiff, action) {\r\n  hasTurnedAround = false;\r\n  const roundedTimeDiff = roundTime(timeDiff);\r\n\r\n  //if the roundedTimeDiff has been turned around from negative to positive\r\n  //set 'subtract' to add , or 'add' to subtract to also turn the operators around.\r\n  if (action === 'subtract') {\r\n    if (hasTurnedAround) {\r\n      action = 'add';\r\n    }\r\n  } else {\r\n    if (hasTurnedAround) {\r\n      action = 'subtract';\r\n    }\r\n  }\r\n\r\n  let endTime =\r\n    action === 'subtract'\r\n      ? (endTime = moment(data.endTime)\r\n          .subtract(roundedTimeDiff)\r\n          .valueOf())\r\n      : (endTime = moment(data.endTime)\r\n          .add(roundedTimeDiff)\r\n          .valueOf());\r\n\r\n  let startTime =\r\n    action === 'subtract'\r\n      ? (startTime = moment(data.startTime)\r\n          .subtract(roundedTimeDiff)\r\n          .valueOf())\r\n      : (startTime = moment(data.startTime)\r\n          .add(roundedTimeDiff)\r\n          .valueOf());\r\n\r\n  let line = writeTags(data.order_id, data.product_id);\r\n\r\n  if (data.compl_qty !== null && data.compl_qty !== undefined) {\r\n    line += 'compl_qty=' + data.compl_qty + ',';\r\n  }\r\n  if (data.machine_state !== null && data.machine_state !== undefined) {\r\n    line += 'machine_state=\"' + getRid(data.machine_state) + '\"' + ',';\r\n  }\r\n  if (data.scrap_qty !== null && data.scrap_qty !== undefined) {\r\n    line += 'scrap_qty=' + data.scrap_qty + ',';\r\n  }\r\n  if (data.setpoint_rate !== null && data.setpoint_rate !== undefined) {\r\n    line += 'setpoint_rate=' + data.setpoint_rate + ',';\r\n  }\r\n  if (\r\n    data.actual_start_datetime !== null &&\r\n    data.actual_start_datetime !== undefined\r\n  ) {\r\n    line += 'actual_start_datetime=' + data.actual_start_datetime + ',';\r\n  }\r\n  if (\r\n    data.actual_end_datetime !== null &&\r\n    data.actual_end_datetime !== undefined\r\n  ) {\r\n    line += 'actual_end_datetime=' + data.actual_end_datetime + ',';\r\n  }\r\n\r\n  line += 'order_state=\"' + getRid(data.status) + '\"' + ',';\r\n  line += 'product_desc=\"' + getRid(data.product_desc) + '\"' + ',';\r\n  line += 'order_date=\"' + data.order_date + '\"' + ',';\r\n  line +=\r\n    'planned_changeover_time=\"' + data.planned_changeover_time + '\"' + ',';\r\n  line += 'production_line=\"' + getRid(data.production_line) + '\"' + ',';\r\n  line += 'order_qty=' + data.order_qty + ',';\r\n  line += 'scheduled_end_datetime=' + endTime + ',';\r\n  line += 'scheduled_start_datetime=' + startTime + ',';\r\n  line += 'planned_rate=' + data.planned_rate;\r\n\r\n  // console.log('writeLineForTimeUpdate');\r\n  return line;\r\n}\r\n\r\nexport function writeLineForUpdateWithRemovingTime(data, currentStatus) {\r\n  const product_id = data.product.split(' | ')[0];\r\n  let product_desc = data.product.split(' | ')[1];\r\n\r\n  // For influxdb tag keys, must add a forward slash \\ before each space\r\n  // product_desc = product_desc.split(' ').join('\\\\ ')\r\n\r\n  let line = writeTags(data.orderId, product_id);\r\n  if (data.compl_qty !== null && data.compl_qty !== undefined) {\r\n    line += 'compl_qty=' + data.compl_qty + ',';\r\n  }\r\n  if (data.machine_state !== null && data.machine_state !== undefined) {\r\n    line += 'machine_state=\"' + getRid(data.machine_state) + '\"' + ',';\r\n  }\r\n  if (data.scrap_qty !== null && data.scrap_qty !== undefined) {\r\n    line += 'scrap_qty=' + data.scrap_qty + ',';\r\n  }\r\n  if (\r\n    data.actual_start_datetime !== null &&\r\n    data.actual_start_datetime !== undefined\r\n  ) {\r\n    line += 'actual_start_datetime=' + data.actual_start_datetime + ',';\r\n  }\r\n  if (\r\n    data.actual_end_datetime !== null &&\r\n    data.actual_end_datetime !== undefined\r\n  ) {\r\n    line += 'actual_end_datetime=' + data.actual_end_datetime + ',';\r\n  }\r\n  line += 'order_state=\"' + getRid(currentStatus) + '\"' + ',';\r\n  line += 'product_desc=\"' + getRid(product_desc) + '\"' + ',';\r\n  line += 'order_date=\"' + data.date + '\"' + ',';\r\n  line += 'production_line=\"' + getRid(data.productionLine) + '\"' + ',';\r\n  line += 'planned_changeover_time=\"' + data.changeover + '\"' + ',';\r\n  line += 'order_qty=' + data.orderQty + ',';\r\n  line += 'setpoint_rate=' + 0 + ',';\r\n  line += 'planned_rate=' + data.plannedRate;\r\n  // console.log('2');\r\n  // console.log('writeLineForUpdateWithRemovingTime');\r\n  // console.log(line);\r\n  return line;\r\n}\r\n\r\nexport function writeLineForUpdateWithChangingTime(\r\n  data,\r\n  currentStatus,\r\n  startTime,\r\n  endTime\r\n) {\r\n  const product_id = data.product.split(' | ')[0];\r\n  let product_desc = data.product.split(' | ')[1];\r\n\r\n  // For influxdb tag keys, must add a forward slash \\ before each space\r\n  // product_desc = product_desc.split(' ').join('\\\\ ')\r\n\r\n  let line = writeTags(data.orderId, product_id);\r\n  if (data.compl_qty !== null && data.compl_qty !== undefined) {\r\n    line += 'compl_qty=' + data.compl_qty + ',';\r\n  }\r\n  if (data.machine_state !== null && data.machine_state !== undefined) {\r\n    line += 'machine_state=\"' + getRid(data.machine_state) + '\"' + ',';\r\n  }\r\n  if (data.scrap_qty !== null && data.scrap_qty !== undefined) {\r\n    line += 'scrap_qty=' + data.scrap_qty + ',';\r\n  }\r\n  if (\r\n    data.actual_start_datetime !== null &&\r\n    data.actual_start_datetime !== undefined\r\n  ) {\r\n    line += 'actual_start_datetime=' + data.actual_start_datetime + ',';\r\n  }\r\n  if (\r\n    data.actual_end_datetime !== null &&\r\n    data.actual_end_datetime !== undefined\r\n  ) {\r\n    line += 'actual_end_datetime=' + data.actual_end_datetime + ',';\r\n  }\r\n  line += 'order_state=\"' + getRid(currentStatus) + '\"' + ',';\r\n  line += 'product_desc=\"' + getRid(product_desc) + '\"' + ',';\r\n  line += 'order_date=\"' + data.date + '\"' + ',';\r\n  line += 'production_line=\"' + getRid(data.productionLine) + '\"' + ',';\r\n  line += 'planned_changeover_time=\"' + data.changeover + '\"' + ',';\r\n  line += 'scheduled_end_datetime=' + endTime + ',';\r\n  line += 'scheduled_start_datetime=' + startTime + ',';\r\n  line += 'order_qty=' + data.orderQty + ',';\r\n  line += 'setpoint_rate=' + 0 + ',';\r\n  line += 'planned_rate=' + data.plannedRate;\r\n  // console.log('3');\r\n  // console.log('writeLineForUpdateWithChangingTime');\r\n  // console.log(line);\r\n  return line;\r\n}\r\n\r\nexport function writeLineForUpdateDragging(data, startTime, endTime, targLine) {\r\n  let line = writeTags(data.order_id, data.product_id);\r\n\r\n  if (data.compl_qty !== null && data.compl_qty !== undefined) {\r\n    line += 'compl_qty=' + data.compl_qty + ',';\r\n  }\r\n  if (data.machine_state !== null && data.machine_state !== undefined) {\r\n    line += 'machine_state=\"' + getRid(data.machine_state) + '\"' + ',';\r\n  }\r\n  if (data.scrap_qty !== null && data.scrap_qty !== undefined) {\r\n    line += 'scrap_qty=' + data.scrap_qty + ',';\r\n  }\r\n  if (\r\n    data.actual_start_datetime !== null &&\r\n    data.actual_start_datetime !== undefined\r\n  ) {\r\n    line += 'actual_start_datetime=' + data.actual_start_datetime + ',';\r\n  }\r\n  if (\r\n    data.actual_end_datetime !== null &&\r\n    data.actual_end_datetime !== undefined\r\n  ) {\r\n    line += 'actual_end_datetime=' + data.actual_end_datetime + ',';\r\n  }\r\n\r\n  line += 'order_state=\"' + getRid(data.status) + '\"' + ',';\r\n  line += 'product_desc=\"' + getRid(data.product_desc) + '\"' + ',';\r\n  line += 'order_date=\"' + data.targeting_date + '\"' + ',';\r\n  line +=\r\n    'planned_changeover_time=\"' + data.planned_changeover_time + '\"' + ',';\r\n  line += 'production_line=\"' + getRid(targLine) + '\"' + ',';\r\n  line += 'order_qty=' + data.order_qty + ',';\r\n  line += 'scheduled_end_datetime=' + endTime + ',';\r\n  line += 'scheduled_start_datetime=' + startTime + ',';\r\n  line += 'setpoint_rate=' + 0 + ',';\r\n  line += 'planned_rate=' + data.planned_rate;\r\n  // console.log('writeLineForUpdateDragging');\r\n  // console.log(line);\r\n  return line;\r\n}\r\n\r\nfunction writeTags(order_id, prod_id) {\r\n  return `OrderPerformance,order_id=${order_id},product_id=${prod_id} `;\r\n}\r\n\r\n/**\r\n * Take a moment duration obj, take this obj's hours mins and seconds to make a new moment duration\r\n * The purpose is to make a new duration with rounded milsec that is easier for calculation\r\n * Return the new duration with rounded milsec\r\n * @param {moment duration obj} timeDiff The moment duration obj\r\n */\r\nfunction roundTime(timeDiff) {\r\n  const timeText = getTimeText(timeDiff);\r\n  return moment.duration(timeText, 'H:mm:ss');\r\n}\r\n\r\n/**\r\n * Take a moment duration obj, return a string text of 'h:mm:ss' of the duration\r\n * If the duration is negative, turn all the negative to positive and set 'hasTurnedAround' to true\r\n * @param {moment duration obj} time The moment duration obj\r\n */\r\nfunction getTimeText(time) {\r\n  if (time.get('h') < 0 || time.get('minutes') < 0 || time.get('seconds') < 0) {\r\n    hasTurnedAround = true;\r\n  }\r\n\r\n  const hour = time.get('h') < 0 ? time.get('h') * -1 : time.get('h');\r\n  const mins =\r\n    time.get('minutes') < 0 ? time.get('minutes') * -1 : time.get('minutes');\r\n  const seconds =\r\n    time.get('seconds') < 0 ? time.get('seconds') * -1 : time.get('seconds');\r\n\r\n  return hour + ':' + mins + ':' + seconds;\r\n}\r\n\r\nfunction getRid(x) {\r\n  return x.split('\"').join('\\\\\"');\r\n}\r\n"]}