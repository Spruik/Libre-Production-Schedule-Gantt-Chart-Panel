{"version":3,"sources":["../src/influx_helper.js"],"names":["writeLineForUpdate","status","data","line","writeTags","order_id","product_id","compl_qty","undefined","machine_state","getRid","scrap_qty","setpoint_rate","actual_start_datetime","actual_end_datetime","product_desc","order_date","planned_changeover_time","endTime","startTime","production_line","order_qty","planned_rate","writeLineForCreate","initState","product","split","orderId","date","productionLine","changeover","orderQty","plannedRate","writeLineForTimeUpdate","timeDiff","action","hasTurnedAround","roundedTimeDiff","roundTime","moment","subtract","valueOf","add","writeLineForUpdateWithRemovingTime","currentStatus","writeLineForUpdateWithChangingTime","writeLineForUpdateDragging","targLine","targeting_date","prod_id","timeText","getTimeText","duration","time","get","hour","mins","seconds","x","join","utils","cons","writeUrl","influxHost"],"mappings":"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","file":"influx_helper.js","sourcesContent":["import * as utils from './utils';\nimport * as cons from './constans';\nimport moment from 'moment';\n\nexport const writeUrl = utils.influxHost + 'write?db=smart_factory';\n\nlet hasTurnedAround = false;\n\n/**\n * Expect the status string (Normally are: 'Ready' or 'Deleted')\n * Then changed the status in the line with anything else unchanged\n * @param {*} status\n */\nexport function writeLineForUpdate(status, data) {\n\t// For influxdb tag keys, must add a forward slash \\ before each space\n\n\tlet line = writeTags(data.order_id, data.product_id);\n\n\tif (data.compl_qty !== null && data.compl_qty !== undefined) {\n\t\tline += 'compl_qty=' + data.compl_qty + ',';\n\t}\n\tif (data.machine_state !== null && data.machine_state !== undefined) {\n\t\tline += 'machine_state=\"' + getRid(data.machine_state) + '\"' + ',';\n\t}\n\tif (data.scrap_qty !== null && data.scrap_qty !== undefined) {\n\t\tline += 'scrap_qty=' + data.scrap_qty + ',';\n\t}\n\tif (data.setpoint_rate !== null && data.setpoint_rate !== undefined) {\n\t\tline += 'setpoint_rate=' + data.setpoint_rate + ',';\n\t}\n\tif (data.actual_start_datetime !== null && data.actual_start_datetime !== undefined) {\n\t\tline += 'actual_start_datetime=' + data.actual_start_datetime + ',';\n\t}\n\tif (data.actual_end_datetime !== null && data.actual_end_datetime !== undefined) {\n\t\tline += 'actual_end_datetime=' + data.actual_end_datetime + ',';\n\t}\n\n\tline += 'order_state=\"' + getRid(status) + '\"' + ',';\n\tline += 'product_desc=\"' + getRid(data.product_desc) + '\"' + ',';\n\tline += 'order_date=\"' + data.order_date + '\"' + ',';\n\tline += 'planned_changeover_time=\"' + data.planned_changeover_time + '\"' + ',';\n\tline += 'scheduled_end_datetime=' + data.endTime + ',';\n\tline += 'scheduled_start_datetime=' + data.startTime + ',';\n\tline += 'production_line=\"' + getRid(data.production_line) + '\"' + ',';\n\tline += 'order_qty=' + data.order_qty + ',';\n\tline += 'planned_rate=' + data.planned_rate;\n\n\t// console.log('writeLineForUpdate');\n\t// console.log(line);\n\treturn line;\n}\n\nexport function writeLineForCreate(data, initState) {\n\tconst product_id = data.product.split(' | ')[0];\n\tlet product_desc = data.product.split(' | ')[1];\n\n\tlet line = writeTags(data.orderId, product_id);\n\tline += 'order_state=\"' + getRid(initState) + '\"' + ',';\n\tline += 'product_desc=\"' + getRid(product_desc) + '\"' + ',';\n\tline += 'order_date=\"' + data.date + '\"' + ',';\n\tline += 'production_line=\"' + getRid(data.productionLine) + '\"' + ',';\n\tline += 'planned_changeover_time=\"' + data.changeover + '\"' + ',';\n\tline += 'scheduled_end_datetime=' + data.endTime + ',';\n\tline += 'scheduled_start_datetime=' + data.startTime + ',';\n\tline += 'order_qty=' + data.orderQty + ',';\n\tline += 'setpoint_rate=' + 0 + ',';\n\tline += 'planned_rate=' + data.plannedRate;\n\n\t// console.log(line);\n\treturn line;\n}\n\n/**\n * Prepare a line for influxdb request\n * @param {{}} data Expecting Object : The order data that is to be updated\n * @param {moment} timeDiff Expecting (Moment Duration Object): The time difference that this order is going to add / subtract\n * @param {string} action Expecting String : The action (add / subtract), example -> 'subtract'\n */\nexport function writeLineForTimeUpdate(data, timeDiff, action) {\n\thasTurnedAround = false;\n\tconst roundedTimeDiff = roundTime(timeDiff);\n\n\t//if the roundedTimeDiff has been turned around from negative to positive\n\t//set 'subtract' to add , or 'add' to subtract to also turn the operators around.\n\tif (action === 'subtract') {\n\t\tif (hasTurnedAround) {\n\t\t\taction = 'add';\n\t\t}\n\t} else {\n\t\tif (hasTurnedAround) {\n\t\t\taction = 'subtract';\n\t\t}\n\t}\n\n\tlet endTime =\n\t\taction === 'subtract'\n\t\t\t? (endTime = moment(data.endTime).subtract(roundedTimeDiff).valueOf())\n\t\t\t: (endTime = moment(data.endTime).add(roundedTimeDiff).valueOf());\n\n\tlet startTime =\n\t\taction === 'subtract'\n\t\t\t? (startTime = moment(data.startTime).subtract(roundedTimeDiff).valueOf())\n\t\t\t: (startTime = moment(data.startTime).add(roundedTimeDiff).valueOf());\n\n\tlet line = writeTags(data.order_id, data.product_id);\n\n\tif (data.compl_qty !== null && data.compl_qty !== undefined) {\n\t\tline += 'compl_qty=' + data.compl_qty + ',';\n\t}\n\tif (data.machine_state !== null && data.machine_state !== undefined) {\n\t\tline += 'machine_state=\"' + getRid(data.machine_state) + '\"' + ',';\n\t}\n\tif (data.scrap_qty !== null && data.scrap_qty !== undefined) {\n\t\tline += 'scrap_qty=' + data.scrap_qty + ',';\n\t}\n\tif (data.setpoint_rate !== null && data.setpoint_rate !== undefined) {\n\t\tline += 'setpoint_rate=' + data.setpoint_rate + ',';\n\t}\n\tif (data.actual_start_datetime !== null && data.actual_start_datetime !== undefined) {\n\t\tline += 'actual_start_datetime=' + data.actual_start_datetime + ',';\n\t}\n\tif (data.actual_end_datetime !== null && data.actual_end_datetime !== undefined) {\n\t\tline += 'actual_end_datetime=' + data.actual_end_datetime + ',';\n\t}\n\n\tline += 'order_state=\"' + getRid(data.status) + '\"' + ',';\n\tline += 'product_desc=\"' + getRid(data.product_desc) + '\"' + ',';\n\tline += 'order_date=\"' + data.order_date + '\"' + ',';\n\tline += 'planned_changeover_time=\"' + data.planned_changeover_time + '\"' + ',';\n\tline += 'production_line=\"' + getRid(data.production_line) + '\"' + ',';\n\tline += 'order_qty=' + data.order_qty + ',';\n\tline += 'scheduled_end_datetime=' + endTime + ',';\n\tline += 'scheduled_start_datetime=' + startTime + ',';\n\tline += 'planned_rate=' + data.planned_rate;\n\n\t// console.log('writeLineForTimeUpdate');\n\treturn line;\n}\n\nexport function writeLineForUpdateWithRemovingTime(data, currentStatus) {\n\tconst product_id = data.product.split(' | ')[0];\n\tlet product_desc = data.product.split(' | ')[1];\n\n\t// For influxdb tag keys, must add a forward slash \\ before each space\n\t// product_desc = product_desc.split(' ').join('\\\\ ')\n\n\tlet line = writeTags(data.orderId, product_id);\n\tif (data.compl_qty !== null && data.compl_qty !== undefined) {\n\t\tline += 'compl_qty=' + data.compl_qty + ',';\n\t}\n\tif (data.machine_state !== null && data.machine_state !== undefined) {\n\t\tline += 'machine_state=\"' + getRid(data.machine_state) + '\"' + ',';\n\t}\n\tif (data.scrap_qty !== null && data.scrap_qty !== undefined) {\n\t\tline += 'scrap_qty=' + data.scrap_qty + ',';\n\t}\n\tif (data.actual_start_datetime !== null && data.actual_start_datetime !== undefined) {\n\t\tline += 'actual_start_datetime=' + data.actual_start_datetime + ',';\n\t}\n\tif (data.actual_end_datetime !== null && data.actual_end_datetime !== undefined) {\n\t\tline += 'actual_end_datetime=' + data.actual_end_datetime + ',';\n\t}\n\tline += 'order_state=\"' + getRid(currentStatus) + '\"' + ',';\n\tline += 'product_desc=\"' + getRid(product_desc) + '\"' + ',';\n\tline += 'order_date=\"' + data.date + '\"' + ',';\n\tline += 'production_line=\"' + getRid(data.productionLine) + '\"' + ',';\n\tline += 'planned_changeover_time=\"' + data.changeover + '\"' + ',';\n\tline += 'order_qty=' + data.orderQty + ',';\n\tline += 'setpoint_rate=' + 0 + ',';\n\tline += 'planned_rate=' + data.plannedRate;\n\t// console.log('2');\n\t// console.log('writeLineForUpdateWithRemovingTime');\n\t// console.log(line);\n\treturn line;\n}\n\nexport function writeLineForUpdateWithChangingTime(data, currentStatus, startTime, endTime) {\n\tconst product_id = data.product.split(' | ')[0];\n\tlet product_desc = data.product.split(' | ')[1];\n\n\t// For influxdb tag keys, must add a forward slash \\ before each space\n\t// product_desc = product_desc.split(' ').join('\\\\ ')\n\n\tlet line = writeTags(data.orderId, product_id);\n\tif (data.compl_qty !== null && data.compl_qty !== undefined) {\n\t\tline += 'compl_qty=' + data.compl_qty + ',';\n\t}\n\tif (data.machine_state !== null && data.machine_state !== undefined) {\n\t\tline += 'machine_state=\"' + getRid(data.machine_state) + '\"' + ',';\n\t}\n\tif (data.scrap_qty !== null && data.scrap_qty !== undefined) {\n\t\tline += 'scrap_qty=' + data.scrap_qty + ',';\n\t}\n\tif (data.actual_start_datetime !== null && data.actual_start_datetime !== undefined) {\n\t\tline += 'actual_start_datetime=' + data.actual_start_datetime + ',';\n\t}\n\tif (data.actual_end_datetime !== null && data.actual_end_datetime !== undefined) {\n\t\tline += 'actual_end_datetime=' + data.actual_end_datetime + ',';\n\t}\n\tline += 'order_state=\"' + getRid(currentStatus) + '\"' + ',';\n\tline += 'product_desc=\"' + getRid(product_desc) + '\"' + ',';\n\tline += 'order_date=\"' + data.date + '\"' + ',';\n\tline += 'production_line=\"' + getRid(data.productionLine) + '\"' + ',';\n\tline += 'planned_changeover_time=\"' + data.changeover + '\"' + ',';\n\tline += 'scheduled_end_datetime=' + endTime + ',';\n\tline += 'scheduled_start_datetime=' + startTime + ',';\n\tline += 'order_qty=' + data.orderQty + ',';\n\tline += 'setpoint_rate=' + 0 + ',';\n\tline += 'planned_rate=' + data.plannedRate;\n\t// console.log('3');\n\t// console.log('writeLineForUpdateWithChangingTime');\n\t// console.log(line);\n\treturn line;\n}\n\nexport function writeLineForUpdateDragging(data, startTime, endTime, targLine) {\n\tlet line = writeTags(data.order_id, data.product_id);\n\n\tif (data.compl_qty !== null && data.compl_qty !== undefined) {\n\t\tline += 'compl_qty=' + data.compl_qty + ',';\n\t}\n\tif (data.machine_state !== null && data.machine_state !== undefined) {\n\t\tline += 'machine_state=\"' + getRid(data.machine_state) + '\"' + ',';\n\t}\n\tif (data.scrap_qty !== null && data.scrap_qty !== undefined) {\n\t\tline += 'scrap_qty=' + data.scrap_qty + ',';\n\t}\n\tif (data.actual_start_datetime !== null && data.actual_start_datetime !== undefined) {\n\t\tline += 'actual_start_datetime=' + data.actual_start_datetime + ',';\n\t}\n\tif (data.actual_end_datetime !== null && data.actual_end_datetime !== undefined) {\n\t\tline += 'actual_end_datetime=' + data.actual_end_datetime + ',';\n\t}\n\n\tline += 'order_state=\"' + getRid(data.status) + '\"' + ',';\n\tline += 'product_desc=\"' + getRid(data.product_desc) + '\"' + ',';\n\tline += 'order_date=\"' + data.targeting_date + '\"' + ',';\n\tline += 'planned_changeover_time=\"' + data.planned_changeover_time + '\"' + ',';\n\tline += 'production_line=\"' + getRid(targLine) + '\"' + ',';\n\tline += 'order_qty=' + data.order_qty + ',';\n\tline += 'scheduled_end_datetime=' + endTime + ',';\n\tline += 'scheduled_start_datetime=' + startTime + ',';\n\tline += 'setpoint_rate=' + 0 + ',';\n\tline += 'planned_rate=' + data.planned_rate;\n\t// console.log('writeLineForUpdateDragging');\n\t// console.log(line);\n\treturn line;\n}\n\nfunction writeTags(order_id, prod_id) {\n\treturn `OrderPerformance,order_id=${order_id},product_id=${prod_id} `;\n}\n\n/**\n * Take a moment duration obj, take this obj's hours mins and seconds to make a new moment duration\n * The purpose is to make a new duration with rounded milsec that is easier for calculation\n * Return the new duration with rounded milsec\n * @param {moment duration obj} timeDiff The moment duration obj\n */\nfunction roundTime(timeDiff) {\n\tconst timeText = getTimeText(timeDiff);\n\treturn moment.duration(timeText, 'H:mm:ss');\n}\n\n/**\n * Take a moment duration obj, return a string text of 'h:mm:ss' of the duration\n * If the duration is negative, turn all the negative to positive and set 'hasTurnedAround' to true\n * @param {moment duration obj} time The moment duration obj\n */\nfunction getTimeText(time) {\n\tif (time.get('h') < 0 || time.get('minutes') < 0 || time.get('seconds') < 0) {\n\t\thasTurnedAround = true;\n\t}\n\n\tconst hour = time.get('h') < 0 ? time.get('h') * -1 : time.get('h');\n\tconst mins = time.get('minutes') < 0 ? time.get('minutes') * -1 : time.get('minutes');\n\tconst seconds = time.get('seconds') < 0 ? time.get('seconds') * -1 : time.get('seconds');\n\n\treturn hour + ':' + mins + ':' + seconds;\n}\n\nfunction getRid(x) {\n\treturn x.split('\"').join('\\\\\"');\n}\n"]}