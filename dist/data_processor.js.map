{"version":3,"sources":["../src/data_processor.js"],"names":["restructuredData","rowCols","rows","data","cols","reduce","arr","c","col","text","toLowerCase","push","i","length","row","serise","k","tailorData","influxUrl","utils","influxHost","sort","a","b","production_line","order_data","takeOfKeys","order_dimensions","lines","d","findDistinct","line_data","line","l","split","item","line_dimensions","positioning_dimensions","concat","index","matchIndex","positioning_data","categorisedOrders","categoriseByLineAndDate","promises","lineGroup","dateGroup","_startTime","STkey","dateGroupWithTime","filter","order","findIndex","undefined","dateGroupWithoutTime","wt","startTime","endtime","moment","isBefore","changeover_duration","duration","changeover_startTime","subtract","changeover","copyObject","valueOf","cons","STATE_CHANGEOVER","o","lineDefaultStartTime","getLineStartTime","currentStartTime","_endTime","add","writeLine","mergeKeyVal","post","Promise","all","then","res","chartCtrl","refreshDashb","catch","e","alert","_order_data","_order_dimensions","forEach","product_id_api","dimensions","key","map","Object","values","obj","result","elem","objdata","dates","order_date","Array","from","Set","dateIndex","array","indexOf","order_id","product_id","compl_qty","machine_state","getRid","status","product_desc","planned_changeover_time","order_qty","endTime","planned_rate","x","join","getColor","color","STATE_PLAN","STATE_READY","STATE_FLAG","STATE_PAUSE","STATE_COMPLETE","STATE_CLOSE","STATE_START","getData","mergeKeyArrayVal"],"mappings":"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","file":"data_processor.js","sourcesContent":["import * as utils from './utils';\r\nimport * as cons from './constans';\r\nimport moment from 'moment';\r\nimport * as chartCtrl from './chart_ctrl';\r\n\r\nlet _order_data;\r\nlet _order_dimensions;\r\n\r\n/**\r\n * Expecting columns names, and rows values\r\n * Return {col-1 : value-1, col-2 : value-2 .....}\r\n * @param {*} rowCols \r\n * @param {*} rows \r\n */\r\nexport function restructuredData(rowCols, rows) {\r\n\tlet data = [];\r\n\tlet cols = rowCols.reduce((arr, c) => {\r\n\t\tconst col = c.text.toLowerCase();\r\n\t\tarr.push(col);\r\n\t\treturn arr;\r\n\t}, []);\r\n\tfor (let i = 0; i < rows.length; i++) {\r\n\t\tconst row = rows[i];\r\n\t\tlet serise = {};\r\n\t\tfor (let k = 0; k < cols.length; k++) {\r\n\t\t\tconst col = cols[k];\r\n\t\t\tserise[col] = row[k];\r\n\t\t}\r\n\t\tdata.push(serise);\r\n\t}\r\n\r\n\tif (data.length === 0) {\r\n\t\treturn [];\r\n\t}\r\n\r\n\treturn tailorData(data, rowCols);\r\n}\r\n\r\nfunction tailorData(data, rowCols) {\r\n\t//url for writing influxdb data\r\n\tconst influxUrl = utils.influxHost + 'write?db=smart_factory';\r\n\r\n\t//sort\r\n\tif (data.length > 1) {\r\n\t\tdata = data.sort(\r\n\t\t\t(a, b) => (a.production_line > b.production_line ? -1 : a.production_line < b.production_line ? 1 : 0)\r\n\t\t);\r\n\t}\r\n\r\n\t//make order_data and its dimensions\r\n\tlet order_data = takeOfKeys(data);\r\n\r\n\tlet order_dimensions = rowCols.reduce((arr, col) => {\r\n\t\tarr.push(col.text.toLowerCase());\r\n\t\treturn arr;\r\n\t}, []);\r\n\r\n\t//find distinct lines\r\n\tlet lines = data.reduce((arr, d) => {\r\n\t\tarr.push(d.production_line);\r\n\t\treturn arr;\r\n\t}, []);\r\n\tlines = utils.findDistinct(lines);\r\n\r\n\t//make line_data to match the dimension, which is expected by the chart option data\r\n\tlet line_data = [];\r\n\tfor (let i = 0; i < lines.length; i++) {\r\n\t\tconst line = lines[i];\r\n\t\tconst l = line.split(' | ');\r\n\t\tconst item = [ l[0] + ' | ' + l[1], l[2], i, line ];\r\n\t\tline_data.push(item);\r\n\t}\r\n\r\n\tlet line_dimensions = [ 'SiteArea', 'Line', 'Index', 'ProductionLine' ];\r\n\r\n\t//add elems to the dimension, which are expected by the option\r\n\tconst positioning_dimensions = [ 'index', 'startTime', 'endTime' ];\r\n\torder_dimensions = positioning_dimensions.concat(order_dimensions);\r\n\r\n\t//add elems to the order_data to match the dimension\r\n\tfor (let i = 0; i < order_data.length; i++) {\r\n\t\tconst d = data[i];\r\n\t\tconst index = matchIndex(d.production_line, line_data);\r\n\t\tdata[i]['index'] = index;\r\n\t\tconst positioning_data = [ index, 0, 0 ];\r\n\t\torder_data[i] = positioning_data.concat(order_data[i]);\r\n\t}\r\n\r\n\t//categorise the order_data, group by line, and in each lineGroup, group by date\r\n\tconst categorisedOrders = categoriseByLineAndDate(order_data, 'array', data);\r\n\t//console.log(categorisedOrders)\r\n\tlet promises = [];\r\n\tfor (let i = 0; i < categorisedOrders.length; i++) {\r\n\t\tconst lineGroup = categorisedOrders[i];\r\n\t\tfor (let c = 0; c < lineGroup.length; c++) {\r\n\t\t\tconst dateGroup = lineGroup[c];\r\n\t\t\tlet _startTime = 0;\r\n\r\n\t\t\t//filter out two groups, one is with startTime initalised, one is not.\r\n\t\t\tconst STkey = 'scheduled_start_datetime';\r\n\t\t\tconst dateGroupWithTime = dateGroup.filter(\r\n\t\t\t\t(order) =>\r\n\t\t\t\t\torder[findIndex(STkey, order_dimensions)] !== null &&\r\n\t\t\t\t\torder[findIndex(STkey, order_dimensions)] !== undefined\r\n\t\t\t);\r\n\t\t\tconst dateGroupWithoutTime = dateGroup.filter(\r\n\t\t\t\t(order) =>\r\n\t\t\t\t\torder[findIndex(STkey, order_dimensions)] === null ||\r\n\t\t\t\t\torder[findIndex(STkey, order_dimensions)] === undefined\r\n\t\t\t);\r\n\r\n\t\t\t//loop thro the date group containing orders that are with time\r\n\t\t\tfor (let wt = 0; wt < dateGroupWithTime.length; wt++) {\r\n\t\t\t\tconst order = dateGroupWithTime[wt];\r\n\t\t\t\tconst startTime = order[findIndex(STkey, order_dimensions)];\r\n\t\t\t\tconst endtime = order[findIndex('scheduled_end_datetime', order_dimensions)];\r\n\r\n\t\t\t\tif (_startTime === 0) {\r\n\t\t\t\t\t_startTime = moment(endtime);\r\n\t\t\t\t} else {\r\n\t\t\t\t\t//start time has been initialised, check if the end time is after the initialised start time\r\n\t\t\t\t\tif (_startTime.isBefore(moment(endtime))) {\r\n\t\t\t\t\t\t//if yes, update the starttime again\r\n\t\t\t\t\t\t_startTime = moment(endtime);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t//update order's startTime and endTime\r\n\t\t\t\torder[findIndex('startTime', order_dimensions)] = startTime;\r\n\t\t\t\torder[findIndex('endTime', order_dimensions)] = endtime;\r\n\r\n\t\t\t\tlet changeover_duration = order[findIndex('planned_changeover_time', order_dimensions)];\r\n\t\t\t\tif (changeover_duration !== '0:00:00') {\r\n\t\t\t\t\t//if the order has changeover time\r\n\t\t\t\t\tchangeover_duration = moment.duration(changeover_duration);\r\n\t\t\t\t\tconst changeover_startTime = moment(startTime).subtract(changeover_duration);\r\n\t\t\t\t\tlet changeover = utils.copyObject(order);\r\n\t\t\t\t\tchangeover[findIndex('endTime', order_dimensions)] = startTime; // changeover's end time = main order's start time\r\n\t\t\t\t\tchangeover[findIndex('startTime', order_dimensions)] = changeover_startTime.valueOf(); // changeover's start time = it's end time - it's changeover time\r\n\t\t\t\t\tchangeover[findIndex('status', order_dimensions)] = cons.STATE_CHANGEOVER; // set statuts to be changeover\r\n\t\t\t\t\torder_data.push(changeover);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t//console.log(dateGroupWithoutTime)\r\n\r\n\t\t\t//loop thro the date group containing orders that are with NO time\r\n\t\t\tfor (let o = 0; o < dateGroupWithoutTime.length; o++) {\r\n\t\t\t\tconst order = dateGroupWithoutTime[o];\r\n\t\t\t\tlet lineDefaultStartTime = utils.getLineStartTime(\r\n\t\t\t\t\torder[findIndex('production_line', order_dimensions)]\r\n\t\t\t\t);\r\n\t\t\t\t//if there is no startTime, init it with the order_date and lineDefaultStartTime\r\n\t\t\t\tif (_startTime === 0) {\r\n\t\t\t\t\t_startTime = order[findIndex('order_date', order_dimensions)] + ' ' + lineDefaultStartTime;\r\n\t\t\t\t\t_startTime = moment(_startTime, 'YYYY-MM-DD H:mm:ss');\r\n\t\t\t\t}\r\n\r\n\t\t\t\t//get startTime, then calc the order's duration based on qty and rate, then calc the endTime\r\n\t\t\t\tlet currentStartTime = _startTime.valueOf();\r\n\t\t\t\tlet duration =\r\n\t\t\t\t\torder[findIndex('order_qty', order_dimensions)] /\r\n\t\t\t\t\t(order[findIndex('planned_rate', order_dimensions)] * 60);\r\n\t\t\t\tlet _endTime = _startTime.add(duration, 'hours');\r\n\r\n\t\t\t\t//handle changeover\r\n\t\t\t\tlet changeover_duration = order[findIndex('planned_changeover_time', order_dimensions)];\r\n\t\t\t\tif (changeover_duration !== '0:00:00') {\r\n\t\t\t\t\t//if the order has changeover time\r\n\t\t\t\t\tchangeover_duration = moment.duration(changeover_duration);\r\n\t\t\t\t\tlet changeover = utils.copyObject(order);\r\n\t\t\t\t\t// console.log('change_in', changeover)\r\n\t\t\t\t\t// console.log('change_d_in', order_dimensions)\r\n\t\t\t\t\tchangeover[findIndex('startTime', order_dimensions)] = currentStartTime; // changeover's start time = current start time\r\n\t\t\t\t\tchangeover[findIndex('endTime', order_dimensions)] = moment(currentStartTime)\r\n\t\t\t\t\t\t.add(changeover_duration)\r\n\t\t\t\t\t\t.valueOf(); // changeover's end time = main order's start time\r\n\t\t\t\t\tchangeover[findIndex('status', order_dimensions)] = cons.STATE_CHANGEOVER; // set statuts to be changeover\r\n\r\n\t\t\t\t\torder_data.push(changeover);\r\n\r\n\t\t\t\t\t//update the order's startTime and endTime\r\n\t\t\t\t\torder[findIndex('startTime', order_dimensions)] = moment(currentStartTime)\r\n\t\t\t\t\t\t.add(changeover_duration)\r\n\t\t\t\t\t\t.valueOf();\r\n\t\t\t\t\torder[findIndex('endTime', order_dimensions)] = _endTime.add(changeover_duration).valueOf();\r\n\t\t\t\t} else {\r\n\t\t\t\t\t//update the order's startTime and endTime\r\n\t\t\t\t\torder[findIndex('startTime', order_dimensions)] = currentStartTime;\r\n\t\t\t\t\torder[findIndex('endTime', order_dimensions)] = _endTime.valueOf();\r\n\t\t\t\t}\r\n\r\n\t\t\t\t//update each order to the database\r\n\t\t\t\tconst line = writeLine(utils.mergeKeyVal(order, order_dimensions));\r\n\t\t\t\tpromises.push(utils.post(influxUrl, line));\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tif (promises.length > 0) {\r\n\t\t//do nothing if requests are successful, popup the error if failed.\r\n\t\tPromise.all(promises)\r\n\t\t\t.then((res) => {\r\n\t\t\t\tchartCtrl.refreshDashb();\r\n\t\t\t})\r\n\t\t\t.catch((e) => {\r\n\t\t\t\tutils.alert('error', 'Influxdb Error', 'An error occurred while updating data : ' + e);\r\n\t\t\t});\r\n\t}\r\n\r\n\t//set order data and its dimension global because it will be required later from other files\r\n\t_order_data = order_data;\r\n\t_order_dimensions = order_dimensions;\r\n\r\n\t// Echart automatically convert number String to Int, so need to add some extra non-num String to avoid this\r\n\t// Will need to String.replace('###', '') when use it\r\n\torder_data.forEach((e) => {\r\n\t\tconst product_id_api = e[findIndex('product_id', order_dimensions)] + '###';\r\n\t\te.push(product_id_api);\r\n\t});\r\n\torder_dimensions.push('product_id_api');\r\n\r\n\t//return the expect option data\r\n\treturn {\r\n\t\torder: { data: order_data, dimensions: order_dimensions },\r\n\t\tline: { data: line_data, dimensions: line_dimensions }\r\n\t};\r\n}\r\n\r\nfunction matchIndex(key, lines) {\r\n\tfor (let i = 0; i < lines.length; i++) {\r\n\t\tconst line = lines[i];\r\n\t\tif (key === line[3]) {\r\n\t\t\treturn line[2];\r\n\t\t}\r\n\t}\r\n\treturn -1;\r\n}\r\n\r\nfunction takeOfKeys(data) {\r\n\treturn data.map(Object.values);\r\n}\r\n\r\n/**\r\n * Expecting an array of arrays, categorise the inner arrays by line\r\n */\r\nfunction categoriseByLineAndDate(data, key, obj) {\r\n\tlet result = [];\r\n\r\n\tfor (let i = 0; i < data.length; i++) {\r\n\t\tconst elem = data[i];\r\n\t\tconst objdata = obj[i];\r\n\r\n\t\tlet dates = obj.filter((d) => d.production_line === objdata.production_line).map((d) => d.order_date);\r\n\t\tdates = Array.from(new Set(dates));\r\n\t\tconst dateIndex = findIndex(objdata.order_date, dates);\r\n\r\n\t\tif (result[objdata.index]) {\r\n\t\t\tif (result[objdata.index][dateIndex]) {\r\n\t\t\t\tresult[objdata.index][dateIndex].push(elem);\r\n\t\t\t} else {\r\n\t\t\t\tresult[objdata.index].push([]);\r\n\t\t\t\tresult[objdata.index][dateIndex].push(elem);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tresult.push([]);\r\n\t\t\tif (result[objdata.index][dateIndex]) {\r\n\t\t\t\tresult[objdata.index][dateIndex].push(elem);\r\n\t\t\t} else {\r\n\t\t\t\tresult[objdata.index].push([]);\r\n\t\t\t\tresult[objdata.index][dateIndex].push(elem);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn result;\r\n}\r\n\r\nexport function findIndex(key, array) {\r\n\treturn array.indexOf(key);\r\n}\r\n\r\nfunction writeLine(data) {\r\n\t//For influxdb tag keys, must add a forward slash \\ before each space\r\n\t// let product_desc = data.product_desc.split(' ').join('\\\\ ')\r\n\r\n\tlet line = `OrderPerformance,order_id=${data.order_id},product_id=${data.product_id} `;\r\n\r\n\tif (data.compl_qty !== null && data.compl_qty !== undefined) {\r\n\t\tline += 'compl_qty=' + data.compl_qty + ',';\r\n\t}\r\n\tif (data.machine_state !== null && data.machine_state !== undefined) {\r\n\t\tline += 'machine_state=\"' + getRid(data.machine_state) + '\"' + ',';\r\n\t}\r\n\r\n\tline += 'order_state=\"' + getRid(data.status) + '\"' + ',';\r\n\tline += 'product_desc=\"' + getRid(data.product_desc) + '\"' + ',';\r\n\tline += 'order_date=\"' + data.order_date + '\"' + ',';\r\n\tline += 'production_line=\"' + getRid(data.production_line) + '\"' + ',';\r\n\tline += 'planned_changeover_time=\"' + data.planned_changeover_time + '\"' + ',';\r\n\tline += 'order_qty=' + data.order_qty + ',';\r\n\tline += 'scheduled_end_datetime=' + data.endTime + ',';\r\n\tline += 'scheduled_start_datetime=' + data.startTime + ',';\r\n\tline += 'setpoint_rate=' + 0 + ',';\r\n\tline += 'planned_rate=' + data.planned_rate;\r\n\r\n\treturn line;\r\n}\r\n\r\nfunction getRid(x) {\r\n\treturn x.split('\"').join('\\\\\"');\r\n}\r\n\r\nexport function getColor(status) {\r\n\tlet color;\r\n\tswitch (status.toLowerCase()) {\r\n\t\tcase cons.STATE_CHANGEOVER:\r\n\t\t\tcolor = '#c9c52a';\r\n\t\t\tbreak;\r\n\t\tcase cons.STATE_PLAN:\r\n\t\t\tcolor = '#c9c9c9';\r\n\t\t\tbreak;\r\n\t\tcase cons.STATE_READY:\r\n\t\t\tcolor = '#CCFFAF';\r\n\t\t\tbreak;\r\n\t\tcase cons.STATE_FLAG:\r\n\t\t\tcolor = '#FFFB85';\r\n\t\t\tbreak;\r\n\t\tcase cons.STATE_PAUSE:\r\n\t\t\tcolor = '#E8B20C';\r\n\t\t\tbreak;\r\n\t\tcase cons.STATE_COMPLETE:\r\n\t\t\tcolor = '#70C6FF';\r\n\t\t\tbreak;\r\n\t\tcase cons.STATE_CLOSE:\r\n\t\t\tcolor = '#FF7773';\r\n\t\t\tbreak;\r\n\t\tcase cons.STATE_START:\r\n\t\t\tcolor = '#91F449';\r\n\t\t\tbreak;\r\n\t\tdefault:\r\n\t\t\tcolor = '#fff';\r\n\t\t\tbreak;\r\n\t}\r\n\treturn color;\r\n}\r\n\r\nexport function getData() {\r\n\treturn utils\r\n\t\t.mergeKeyArrayVal(_order_data, _order_dimensions)\r\n\t\t.filter((order) => order.status.toLowerCase() !== cons.STATE_CHANGEOVER);\r\n}\r\n"]}