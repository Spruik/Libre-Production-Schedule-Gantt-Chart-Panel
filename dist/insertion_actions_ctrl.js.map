{"version":3,"sources":["../src/insertion_actions_ctrl.js"],"names":["showActions","targetOrder","_isInsertingBefore","_targetOrder","utils","showModal","removeListeners","addListeners","$","document","off","on","e","target","id","showOrderForm","getProducts","callback","_tryCatchCounter","tryInitialisingForm","removeListenersForOrderForm","addListenersForOrderForm","setTimeout","initialiseForm","closeForm","alert","instant_search","enableInstantSearch","_products","timepicker","showMeridian","showSeconds","maxHours","minuteStep","secondStep","defaultTime","icons","up","down","prefill","time","moment","startTime","endTime","format","val","production_line","data","serializeArray","submitOrder","updateDuration","value","allData","dp","getData","changeover","qty","rate","order_duration","Number","parseFloat","toFixed","calcStartTime","add","duration","valueOf","inputValues","orderId","orderQty","productionLine","product","date","order_date","plannedRate","isValueValid","insertOrder","ordersWithSameLine","filter","order","ordersBeingAffected","changeover_dur","subtract","insertOrderChangeover","totalDuration","diff","isLineHavingSpareTimeForTheDay","promises","initState","orderActions","getOrderStates","x","is_init_state","state","line","influx","writeLineForCreate","push","post","writeUrl","i","length","writeLineForTimeUpdate","Promise","all","then","chart","refreshDashboard","catch","planned_changeover_time","dateRegExp","RegExp","prodList","reduce","arr","p","str","product_desc","indexOf","test","ordersAffected","insertingOrderDuration","targetOrderEndTime","maxEndTime","all_end_times","map","Math","max","targetDay","nextDay","nextDayStartTime","getLineStartTime","isSameOrBefore","durationHrs","momentDuration","durationText","getDurationText","month","get","days","hrs","mins","text","productsUrl","postgRestHost","res","trigger"],"mappings":"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","file":"insertion_actions_ctrl.js","sourcesContent":["import * as utils from './utils'\nimport * as influx from './influx_helper'\nimport * as dp from './data_processor'\nimport * as instant_search from './instant_search_ctrl'\nimport * as orderActions from './order_actions_ctrl'\nimport moment from 'moment'\nimport * as chart from './chart_option'\n\nlet _isInsertingBefore\nlet _targetOrder\nlet _products\nlet _tryCatchCounter = 1\n\nconst closeForm = () => $('a#product-schedule-gantt-chart-order-form-close-btn').trigger('click')\n\n/**\n * Show insert actions entry point, will be showed when the user clicked 'Insert' in the order actions form\n * Set the target order global --> show insert actions form (allowing user to choose insert left or right) -\n * --> remove/add listeners\n * @param {*} targetOrder \n */\nexport function showActions(targetOrder){\n  _isInsertingBefore = false\n  _targetOrder = targetOrder\n  utils.showModal('insert_actions.html', {})\n\n  //set listeners\n  removeListeners()\n  addListeners()\n}\n\nfunction removeListeners(){\n  $(document).off('click', 'input[type=\"radio\"][name=\"product-schedule-gantt-chart-insertion-actions-radio\"]')\n}\n\n/**\n * Add listener to check user click\n * If click left (before), set insertion status (_isInsertingBefore) to TRUE and then show order form\n * If click right (after), set insertion status (_isInsertingBefore) to FALSE and then show order form\n */\nfunction addListeners(){\n  $(document).on('click', 'input[type=\"radio\"][name=\"product-schedule-gantt-chart-insertion-actions-radio\"]', e => {\n    if (e.target.id === 'before') {\n      _isInsertingBefore = true\n      showOrderForm()\n    }else if (e.target.id === 'after') {\n      _isInsertingBefore = false\n      showOrderForm()\n    }\n  })\n}\n\n/**\n * Show form entry point, will be showed when the user clicked insert left or right\n * Get data --> Show Form --> Initialse special functions --> remove/add listeners\n */\nfunction showOrderForm(){\n  //get products data from postgres database\n  getProducts(callback)\n\n  //getting data successful\n  function callback() {\n    //show the modal form\n    utils.showModal('order_form.html', {})\n\n    //try initialize the form\n    _tryCatchCounter = 1\n    tryInitialisingForm()\n\n    //set listeners\n    removeListenersForOrderForm()\n    addListenersForOrderForm()\n  }\n\n}\n\n/**\n * Try initialise the form, if failed, wait for 200 milsec and then re-init the form again\n * If failed over 15 times, stop initialising and show error to the user\n */\nfunction tryInitialisingForm(){\n  setTimeout(() => {\n    try{\n      initialiseForm()\n    }catch(e){\n      if (_tryCatchCounter < 15) {\n        //maximunm re-init the form over 15 times\n        tryInitialisingForm()\n        _tryCatchCounter++\n      }else{\n        closeForm()\n        utils.alert('error', 'Error', 'Form initialisation failed, please try agian : ' + e)\n      }\n    }\n  }, 200);\n}\n\n/**\n * Initialise the instant search function for product field and equipment field\n * Initialise the timepicker for the changeover field\n */\nfunction initialiseForm(){\n  //init the instant search function\n  instant_search.enableInstantSearch(_products)\n\n  //init timepicker\n  $('#changeover-minutes-picker').timepicker({\n    showMeridian: false,\n    showSeconds: true,\n    maxHours: 100,\n    minuteStep: 1,\n    secondStep: 1,\n    defaultTime: '00:00:00',\n    icons: {\n        up: 'fa fa-chevron-up',\n        down: 'fa fa-chevron-down'\n    }\n  })\n\n  //prefill date field and production line\n  prefill()\n}\n\n/**\n * Prefill the datepicker because it is inserting, the date is based on the target order's startime or endtime\n * Prefill the Production Line field where it equals to the targeted order's line\n * Current order's date = target order's start time if it is inserting before\n * Current order's date = target order's end time if it is inserting after\n */\nfunction prefill(){\n  const time = moment( _isInsertingBefore ? _targetOrder.startTime : _targetOrder.endTime).format('YYYY-MM-DD')\n  $('input.prod-sche-gt-chart-datalist-input#datepicker').val(time)\n  $('input.prod-sche-gt-chart-datalist-input#datalist-input-production-line').val(_targetOrder.production_line)\n}\n\nfunction removeListenersForOrderForm(){\n  $(document).off('click', 'button#product-schedule-gantt-chart-order-form-submitBtn')\n  $(document).off('input', 'input#planned-rate, input#order-qty')\n}\n\nfunction addListenersForOrderForm(){\n  $(document).on('click', 'button#product-schedule-gantt-chart-order-form-submitBtn', e => {\n    let data = $('form#product-schedule-gantt-chart-order-form').serializeArray()\n    submitOrder(data)\n  })\n\n  $(document).on('input', 'input#planned-rate, input#order-qty', e => {\n    let data = $('form#product-schedule-gantt-chart-order-form').serializeArray()\n    updateDuration(data[1].value, data[5].value)\n  })\n}\n\nfunction submitOrder(data){  \n  //locate the line where the user is trying to insert the new order, which is for further filtering uses\n  const allData = dp.getData()\n\n  const changeover = data[7].value\n  const qty = data[1].value\n  const rate = data[5].value\n  const order_duration = Number(parseFloat(qty).toFixed(2)) / Number((parseFloat(rate) * 60).toFixed(2))\n  const startTime = moment(_isInsertingBefore ? calcStartTime(_targetOrder) : _targetOrder.endTime).add(moment.duration(changeover)).valueOf()\n  const endTime = moment(_isInsertingBefore ? calcStartTime(_targetOrder) : _targetOrder.endTime).add(moment.duration(changeover)).add(order_duration, 'hours').valueOf()\n  \n  const inputValues = {\n    orderId: data[0].value, \n    orderQty: qty, \n    productionLine: data[2].value, \n    product: data[3].value, \n    date: _targetOrder.order_date, \n    plannedRate: rate,\n    duration: data[6].value,\n    changeover: changeover,\n    startTime: startTime,\n    endTime: endTime,\n  }\n\n  if (isValueValid(inputValues)){\n    insertOrder(inputValues, allData)\n  }\n}\n\nfunction insertOrder(inputValues, allData){\n  //Firstly, find all data to look for orders in the same line to see if there is other order affected by this insertion\n  const ordersWithSameLine = allData.filter(order => order.production_line === _targetOrder.production_line)\n\n  const ordersBeingAffected = ordersWithSameLine.filter(order => {\n    let startTime = moment(inputValues.startTime)\n    let changeover_dur = moment.duration(inputValues.changeover)\n    return order.startTime >= startTime.subtract(changeover_dur).valueOf() \n          && order.order_date === inputValues.date\n  })\n\n  //calculate the total duration that the inserting order is taking, and then each affected order will be adding up with this total duarion later\n  const insertOrderChangeover = moment.duration(inputValues.changeover)\n  const totalDuration = moment.duration(moment(inputValues.endTime).diff(moment(inputValues.startTime)))\n  totalDuration.add(insertOrderChangeover)\n\n  if (!isLineHavingSpareTimeForTheDay(ordersBeingAffected, totalDuration, _targetOrder.endTime)) {\n    utils.alert('warning', 'Warning', \"There is no spare space for this order to fit in this date's schedule\")\n    return\n  }\n\n  //promises for later requests\n  let promises = []\n\n  // get initState from the database state model config table\n  const initState = orderActions.getOrderStates().filter(x => x.is_init_state)\n  if (!initState[0] || !initState[0].state) {\n    utils.alert('error', 'Error', `Initial State NOT Found from the state model config table, please specify an Initial State before creating order`)\n    return\n  }\n  \n  //update the inserting order first\n  const line = influx.writeLineForCreate(inputValues, initState[0].state)\n  promises.push(utils.post(influx.writeUrl, line))\n\n  //loop thro the ordersBeingAffected to update all orders being affected\n  for (let i = 0; i < ordersBeingAffected.length; i++) {\n    const order = ordersBeingAffected[i];\n    const line = influx.writeLineForTimeUpdate(order, totalDuration, 'add')\n    promises.push(utils.post(influx.writeUrl, line))\n  }\n\n  //handle requests\n  Promise.all(promises).then(res => {\n    //successful\n    closeForm()\n    utils.alert('success', 'Successful', 'Order has been successfully inserted')\n    chart.refreshDashboard()\n  }).catch(e => {\n    //error\n    utils.alert('error', 'Error', 'An error occurred when inserting the order : ' + e)\n  })\n}\n\n/**\n * Add up order's start time and its changeover time to see it's real start time\n * @param {*} order \n */\nfunction calcStartTime(order){\n  return moment(order.startTime).subtract(moment.duration(order.planned_changeover_time)).valueOf()\n}\n\n/**\n * Expect the user inputs\n * Check if the user inputs are valid\n * Stop and prompt error if the inputs are not valid\n * @param {*} data \n */\nfunction isValueValid(data) {\n\n  const dateRegExp = new RegExp('^[0-9]{4}-(((0[13578]|(10|12))-(0[1-9]|[1-2][0-9]|3[0-1]))|(02-(0[1-9]|[1-2][0-9]))|((0[469]|11)-(0[1-9]|[1-2][0-9]|30)))$')\n  const prodList = _products.reduce((arr, p) => {\n    const str = p.id + ' | ' + p.product_desc\n    arr.push(str)\n    return arr\n  }, [])\n\n  if (data.orderId === '') {\n    utils.alert('warning', 'Warning', 'Order Number Empty, please enter the Order Number')\n    return false\n  }\n\n  if (data.orderQty === '') {\n    utils.alert('warning', 'Warning', 'Order Quantity Empty, please enter the Order Quantity')\n    return false\n  }\n\n  if (data.product === '') {\n    utils.alert('warning', 'Warning', 'Product Empty, please enter the Product')\n    return false\n  }else {\n    if (prodList.indexOf(data.product) === -1) {\n      utils.alert('warning', 'Warning', 'Product Not Exist, please select a Product from the Product List')\n      return false\n    }\n  }\n\n  if (!dateRegExp.test(data.date)) {\n    utils.alert('warning', 'Warning', 'Scheduled Start Date Empty or Invalid Date Format, please choose a date from the date picker')\n    return false\n  }\n\n  if (data.plannedRate === '') {\n    utils.alert('warning', 'Warning', 'Planned Rate Empty, please enter the Planned Rate')\n    return false\n  }\n\n  return true\n}\n\n/**\n * Expecting the array of all orders that are affected @param {*} ordersAffected , \n * and the moment object of the totoal duration\n * @param {*} insertingOrderDuration  (including order duration time and changeover duration time)\n * \n * Return a boolean to tell if an order can be made.\n * \n * If, after adding up with the inserting order's duration, the last affected order's end time exceeds the next day's start time, return false\n */\nfunction isLineHavingSpareTimeForTheDay(ordersAffected, insertingOrderDuration, targetOrderEndTime){\n  //find the max value of affected orders' end time\n  let maxEndTime\n  if (ordersAffected.length !== 0) {\n    const all_end_times = ordersAffected.map(order => order.endTime)\n    maxEndTime = moment(Math.max(...all_end_times))\n  }else {\n    //if there is no affected orders, the target order's endtime is the maxtime\n    maxEndTime = moment(targetOrderEndTime)\n  }\n  //get the target day's order date in order to calculate the next day\n  const targetDay = moment(_targetOrder.order_date, 'YYYY-MM-DD')\n  const nextDay = targetDay.add(1, 'days').format('YYYY-MM-DD')\n\n  //max time add inserting order's total duration\n  maxEndTime.add(insertingOrderDuration)\n\n  //use next day to make up next day's start time\n  const nextDayStartTime = moment(nextDay + ' ' + utils.getLineStartTime(_targetOrder.production_line), 'YYYY-MM-DD H:mm:ss')\n\n  //if after adding the max time with the inserting order's total duration, max time is greater than next day's start time, return false\n  return maxEndTime.isSameOrBefore(nextDayStartTime)\n}\n\n/**\n * Use the qty and rate that are passed in to dynamically update the duration field\n * @param {*} qty \n * @param {*} rate \n */\nfunction updateDuration(qty, rate){\n  if (qty !== \"\" && rate !== \"\") {\n    let durationHrs = Number(parseFloat(qty).toFixed(2)) / Number((parseFloat(rate) * 60).toFixed(2))\n    let momentDuration = moment.duration(durationHrs, 'hours')\n\n    let durationText = getDurationText(momentDuration)\n    \n    $('input.prod-sche-gt-chart-datalist-input#duration').val(durationText)\n  }else {\n    $('input.prod-sche-gt-chart-datalist-input#duration').val('')\n  }\n}\n\nfunction getDurationText(momentDuration) {\n  let month = momentDuration.get('month')\n  let days = momentDuration.get('d')\n  let hrs = momentDuration.get('h')\n  let mins = momentDuration.get('minute')\n  let text = 'under 1 minute'\n\n  if (month > 0) {return 'Over a month!'}\n\n  if (days !== 0) { hrs += days * 24 }\n\n  if (hrs !== 0 && mins !== 0) {\n    text = hrs + ' hour(s) & ' + mins + ' minute(s)'\n  }else if (hrs !== 0 && mins === 0){\n    text = hrs + ' hour(s)'\n  }else if (hrs === 0 && mins !== 0){\n    text = mins + ' minute(s)'\n  }\n  \n  return text\n}\n\n/**\n * Retrieve product data and equipment data from Postgres\n * Set the retrieved data global\n * Call the callback function passed in when all is successful\n * Alert error when anyone of them has failed\n * @param {*} callback \n */\nfunction getProducts(callback) {\n  let productsUrl = utils.postgRestHost + 'product'\n  utils.get(productsUrl)\n    .then(res => {\n      _products = res\n      callback()\n    })\n    .catch(e => {\n      utils.alert('error', 'Error', 'An error occurred while fetching data from the postgresql : ' + e)\n    })\n}\n"]}