{"version":3,"sources":["../src/insertion_actions_ctrl.js"],"names":["showActions","targetOrder","_isInsertingBefore","_targetOrder","utils","showModal","removeListeners","addListeners","$","document","off","on","e","target","id","showOrderForm","getProducts","callback","_tryCatchCounter","tryInitialisingForm","removeListenersForOrderForm","addListenersForOrderForm","setTimeout","initialiseForm","closeForm","alert","instant_search","enableInstantSearch","_products","timepicker","showMeridian","showSeconds","maxHours","minuteStep","secondStep","defaultTime","icons","up","down","prefill","time","moment","startTime","endTime","format","val","production_line","data","serializeArray","submitOrder","updateDuration","value","allData","dp","getData","changeover","qty","rate","order_duration","Number","parseFloat","toFixed","calcStartTime","add","duration","valueOf","inputValues","orderId","orderQty","productionLine","product","date","order_date","plannedRate","isValueValid","insertOrder","ordersWithSameLine","filter","order","ordersBeingAffected","changeover_dur","subtract","insertOrderChangeover","totalDuration","diff","isLineHavingSpareTimeForTheDay","promises","initState","orderActions","getOrderStates","x","is_init_state","state","line","influx","writeLineForCreate","push","post","writeUrl","i","length","writeLineForTimeUpdate","Promise","all","then","res","chart","refreshDashboard","catch","planned_changeover_time","dateRegExp","RegExp","prodList","reduce","arr","p","str","product_desc","indexOf","test","ordersAffected","insertingOrderDuration","targetOrderEndTime","maxEndTime","all_end_times","map","Math","max","targetDay","nextDay","nextDayStartTime","getLineStartTime","isSameOrBefore","durationHrs","momentDuration","durationText","getDurationText","month","get","days","hrs","mins","text","productsUrl","postgRestHost","trigger"],"mappings":"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","file":"insertion_actions_ctrl.js","sourcesContent":["import * as utils from './utils';\r\nimport * as influx from './influx_helper';\r\nimport * as dp from './data_processor';\r\nimport * as instant_search from './instant_search_ctrl';\r\nimport * as orderActions from './order_actions_ctrl';\r\nimport moment from 'moment';\r\nimport * as chart from './chart_option';\r\n\r\nlet _isInsertingBefore;\r\nlet _targetOrder;\r\nlet _products;\r\nlet _tryCatchCounter = 1;\r\n\r\nconst closeForm = () => $('a#product-schedule-gantt-chart-order-form-close-btn').trigger('click');\r\n\r\n/**\r\n * Show insert actions entry point, will be showed when the user clicked 'Insert' in the order actions form\r\n * Set the target order global --> show insert actions form (allowing user to choose insert left or right) -\r\n * --> remove/add listeners\r\n * @param {*} targetOrder \r\n */\r\nexport function showActions(targetOrder) {\r\n\t_isInsertingBefore = false;\r\n\t_targetOrder = targetOrder;\r\n\tutils.showModal('insert_actions.html', {});\r\n\r\n\t//set listeners\r\n\tremoveListeners();\r\n\taddListeners();\r\n}\r\n\r\nfunction removeListeners() {\r\n\t$(document).off('click', 'input[type=\"radio\"][name=\"product-schedule-gantt-chart-insertion-actions-radio\"]');\r\n}\r\n\r\n/**\r\n * Add listener to check user click\r\n * If click left (before), set insertion status (_isInsertingBefore) to TRUE and then show order form\r\n * If click right (after), set insertion status (_isInsertingBefore) to FALSE and then show order form\r\n */\r\nfunction addListeners() {\r\n\t$(document).on('click', 'input[type=\"radio\"][name=\"product-schedule-gantt-chart-insertion-actions-radio\"]', (e) => {\r\n\t\tif (e.target.id === 'before') {\r\n\t\t\t_isInsertingBefore = true;\r\n\t\t\tshowOrderForm();\r\n\t\t} else if (e.target.id === 'after') {\r\n\t\t\t_isInsertingBefore = false;\r\n\t\t\tshowOrderForm();\r\n\t\t}\r\n\t});\r\n}\r\n\r\n/**\r\n * Show form entry point, will be showed when the user clicked insert left or right\r\n * Get data --> Show Form --> Initialse special functions --> remove/add listeners\r\n */\r\nfunction showOrderForm() {\r\n\t//get products data from postgres database\r\n\tgetProducts(callback);\r\n\r\n\t//getting data successful\r\n\tfunction callback() {\r\n\t\t//show the modal form\r\n\t\tutils.showModal('order_form.html', {});\r\n\r\n\t\t//try initialize the form\r\n\t\t_tryCatchCounter = 1;\r\n\t\ttryInitialisingForm();\r\n\r\n\t\t//set listeners\r\n\t\tremoveListenersForOrderForm();\r\n\t\taddListenersForOrderForm();\r\n\t}\r\n}\r\n\r\n/**\r\n * Try initialise the form, if failed, wait for 200 milsec and then re-init the form again\r\n * If failed over 15 times, stop initialising and show error to the user\r\n */\r\nfunction tryInitialisingForm() {\r\n\tsetTimeout(() => {\r\n\t\ttry {\r\n\t\t\tinitialiseForm();\r\n\t\t} catch (e) {\r\n\t\t\tif (_tryCatchCounter < 15) {\r\n\t\t\t\t//maximunm re-init the form over 15 times\r\n\t\t\t\ttryInitialisingForm();\r\n\t\t\t\t_tryCatchCounter++;\r\n\t\t\t} else {\r\n\t\t\t\tcloseForm();\r\n\t\t\t\tutils.alert('error', 'Error', 'Form initialisation failed, please try agian : ' + e);\r\n\t\t\t}\r\n\t\t}\r\n\t}, 200);\r\n}\r\n\r\n/**\r\n * Initialise the instant search function for product field and equipment field\r\n * Initialise the timepicker for the changeover field\r\n */\r\nfunction initialiseForm() {\r\n\t//init the instant search function\r\n\tinstant_search.enableInstantSearch(_products);\r\n\r\n\t//init timepicker\r\n\t$('#changeover-minutes-picker').timepicker({\r\n\t\tshowMeridian: false,\r\n\t\tshowSeconds: true,\r\n\t\tmaxHours: 100,\r\n\t\tminuteStep: 1,\r\n\t\tsecondStep: 1,\r\n\t\tdefaultTime: '00:00:00',\r\n\t\ticons: {\r\n\t\t\tup: 'fa fa-chevron-up',\r\n\t\t\tdown: 'fa fa-chevron-down'\r\n\t\t}\r\n\t});\r\n\r\n\t//prefill date field and production line\r\n\tprefill();\r\n}\r\n\r\n/**\r\n * Prefill the datepicker because it is inserting, the date is based on the target order's startime or endtime\r\n * Prefill the Production Line field where it equals to the targeted order's line\r\n * Current order's date = target order's start time if it is inserting before\r\n * Current order's date = target order's end time if it is inserting after\r\n */\r\nfunction prefill() {\r\n\tconst time = moment(_isInsertingBefore ? _targetOrder.startTime : _targetOrder.endTime).format('YYYY-MM-DD');\r\n\t$('input.prod-sche-gt-chart-datalist-input#datepicker').val(time);\r\n\t$('input.prod-sche-gt-chart-datalist-input#datalist-input-production-line').val(_targetOrder.production_line);\r\n}\r\n\r\nfunction removeListenersForOrderForm() {\r\n\t$(document).off('click', 'button#product-schedule-gantt-chart-order-form-submitBtn');\r\n\t$(document).off('input', 'input#planned-rate, input#order-qty');\r\n}\r\n\r\nfunction addListenersForOrderForm() {\r\n\t$(document).on('click', 'button#product-schedule-gantt-chart-order-form-submitBtn', (e) => {\r\n\t\tlet data = $('form#product-schedule-gantt-chart-order-form').serializeArray();\r\n\t\tsubmitOrder(data);\r\n\t});\r\n\r\n\t$(document).on('input', 'input#planned-rate, input#order-qty', (e) => {\r\n\t\tlet data = $('form#product-schedule-gantt-chart-order-form').serializeArray();\r\n\t\tupdateDuration(data[1].value, data[5].value);\r\n\t});\r\n}\r\n\r\nfunction submitOrder(data) {\r\n\t//locate the line where the user is trying to insert the new order, which is for further filtering uses\r\n\tconst allData = dp.getData();\r\n\r\n\tconst changeover = data[7].value;\r\n\tconst qty = data[1].value;\r\n\tconst rate = data[5].value;\r\n\tconst order_duration = Number(parseFloat(qty).toFixed(2)) / Number((parseFloat(rate) * 60).toFixed(2));\r\n\tconst startTime = moment(_isInsertingBefore ? calcStartTime(_targetOrder) : _targetOrder.endTime)\r\n\t\t.add(moment.duration(changeover))\r\n\t\t.valueOf();\r\n\tconst endTime = moment(_isInsertingBefore ? calcStartTime(_targetOrder) : _targetOrder.endTime)\r\n\t\t.add(moment.duration(changeover))\r\n\t\t.add(order_duration, 'hours')\r\n\t\t.valueOf();\r\n\r\n\tconst inputValues = {\r\n\t\torderId: data[0].value,\r\n\t\torderQty: qty,\r\n\t\tproductionLine: data[2].value,\r\n\t\tproduct: data[3].value,\r\n\t\tdate: _targetOrder.order_date,\r\n\t\tplannedRate: rate,\r\n\t\tduration: data[6].value,\r\n\t\tchangeover: changeover,\r\n\t\tstartTime: startTime,\r\n\t\tendTime: endTime\r\n\t};\r\n\r\n\tif (isValueValid(inputValues)) {\r\n\t\tinsertOrder(inputValues, allData);\r\n\t}\r\n}\r\n\r\nfunction insertOrder(inputValues, allData) {\r\n\t//Firstly, find all data to look for orders in the same line to see if there is other order affected by this insertion\r\n\tconst ordersWithSameLine = allData.filter((order) => order.production_line === _targetOrder.production_line);\r\n\r\n\tconst ordersBeingAffected = ordersWithSameLine.filter((order) => {\r\n\t\tlet startTime = moment(inputValues.startTime);\r\n\t\tlet changeover_dur = moment.duration(inputValues.changeover);\r\n\t\treturn order.startTime >= startTime.subtract(changeover_dur).valueOf() && order.order_date === inputValues.date;\r\n\t});\r\n\r\n\t//calculate the total duration that the inserting order is taking, and then each affected order will be adding up with this total duarion later\r\n\tconst insertOrderChangeover = moment.duration(inputValues.changeover);\r\n\tconst totalDuration = moment.duration(moment(inputValues.endTime).diff(moment(inputValues.startTime)));\r\n\ttotalDuration.add(insertOrderChangeover);\r\n\r\n\tif (!isLineHavingSpareTimeForTheDay(ordersBeingAffected, totalDuration, _targetOrder.endTime)) {\r\n\t\tutils.alert('warning', 'Warning', \"There is no spare space for this order to fit in this date's schedule\");\r\n\t\treturn;\r\n\t}\r\n\r\n\t//promises for later requests\r\n\tlet promises = [];\r\n\r\n\t// get initState from the database state model config table\r\n\tconst initState = orderActions.getOrderStates().filter((x) => x.is_init_state);\r\n\tif (!initState[0] || !initState[0].state) {\r\n\t\tutils.alert(\r\n\t\t\t'error',\r\n\t\t\t'Error',\r\n\t\t\t`Initial State NOT Found from the state model config table, please specify an Initial State before creating order`\r\n\t\t);\r\n\t\treturn;\r\n\t}\r\n\r\n\t//update the inserting order first\r\n\tconst line = influx.writeLineForCreate(inputValues, initState[0].state);\r\n\tpromises.push(utils.post(influx.writeUrl, line));\r\n\r\n\t//loop thro the ordersBeingAffected to update all orders being affected\r\n\tfor (let i = 0; i < ordersBeingAffected.length; i++) {\r\n\t\tconst order = ordersBeingAffected[i];\r\n\t\tconst line = influx.writeLineForTimeUpdate(order, totalDuration, 'add');\r\n\t\tpromises.push(utils.post(influx.writeUrl, line));\r\n\t}\r\n\r\n\t//handle requests\r\n\tPromise.all(promises)\r\n\t\t.then((res) => {\r\n\t\t\t//successful\r\n\t\t\tcloseForm();\r\n\t\t\tutils.alert('success', 'Successful', 'Order has been successfully inserted');\r\n\t\t\tchart.refreshDashboard();\r\n\t\t})\r\n\t\t.catch((e) => {\r\n\t\t\t//error\r\n\t\t\tutils.alert('error', 'Error', 'An error occurred when inserting the order : ' + e);\r\n\t\t});\r\n}\r\n\r\n/**\r\n * Add up order's start time and its changeover time to see it's real start time\r\n * @param {*} order \r\n */\r\nfunction calcStartTime(order) {\r\n\treturn moment(order.startTime).subtract(moment.duration(order.planned_changeover_time)).valueOf();\r\n}\r\n\r\n/**\r\n * Expect the user inputs\r\n * Check if the user inputs are valid\r\n * Stop and prompt error if the inputs are not valid\r\n * @param {*} data \r\n */\r\nfunction isValueValid(data) {\r\n\tconst dateRegExp = new RegExp(\r\n\t\t'^[0-9]{4}-(((0[13578]|(10|12))-(0[1-9]|[1-2][0-9]|3[0-1]))|(02-(0[1-9]|[1-2][0-9]))|((0[469]|11)-(0[1-9]|[1-2][0-9]|30)))$'\r\n\t);\r\n\tconst prodList = _products.reduce((arr, p) => {\r\n\t\tconst str = p.id + ' | ' + p.product_desc;\r\n\t\tarr.push(str);\r\n\t\treturn arr;\r\n\t}, []);\r\n\r\n\tif (data.orderId === '') {\r\n\t\tutils.alert('warning', 'Warning', 'Order Number Empty, please enter the Order Number');\r\n\t\treturn false;\r\n\t}\r\n\r\n\tif (data.orderQty === '') {\r\n\t\tutils.alert('warning', 'Warning', 'Order Quantity Empty, please enter the Order Quantity');\r\n\t\treturn false;\r\n\t}\r\n\r\n\tif (data.product === '') {\r\n\t\tutils.alert('warning', 'Warning', 'Product Empty, please enter the Product');\r\n\t\treturn false;\r\n\t} else {\r\n\t\tif (prodList.indexOf(data.product) === -1) {\r\n\t\t\tutils.alert('warning', 'Warning', 'Product Not Exist, please select a Product from the Product List');\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\r\n\tif (!dateRegExp.test(data.date)) {\r\n\t\tutils.alert(\r\n\t\t\t'warning',\r\n\t\t\t'Warning',\r\n\t\t\t'Scheduled Start Date Empty or Invalid Date Format, please choose a date from the date picker'\r\n\t\t);\r\n\t\treturn false;\r\n\t}\r\n\r\n\tif (data.plannedRate === '') {\r\n\t\tutils.alert('warning', 'Warning', 'Planned Rate Empty, please enter the Planned Rate');\r\n\t\treturn false;\r\n\t}\r\n\r\n\treturn true;\r\n}\r\n\r\n/**\r\n * Expecting the array of all orders that are affected @param {*} ordersAffected , \r\n * and the moment object of the totoal duration\r\n * @param {*} insertingOrderDuration  (including order duration time and changeover duration time)\r\n * \r\n * Return a boolean to tell if an order can be made.\r\n * \r\n * If, after adding up with the inserting order's duration, the last affected order's end time exceeds the next day's start time, return false\r\n */\r\nfunction isLineHavingSpareTimeForTheDay(ordersAffected, insertingOrderDuration, targetOrderEndTime) {\r\n\t//find the max value of affected orders' end time\r\n\tlet maxEndTime;\r\n\tif (ordersAffected.length !== 0) {\r\n\t\tconst all_end_times = ordersAffected.map((order) => order.endTime);\r\n\t\tmaxEndTime = moment(Math.max(...all_end_times));\r\n\t} else {\r\n\t\t//if there is no affected orders, the target order's endtime is the maxtime\r\n\t\tmaxEndTime = moment(targetOrderEndTime);\r\n\t}\r\n\t//get the target day's order date in order to calculate the next day\r\n\tconst targetDay = moment(_targetOrder.order_date, 'YYYY-MM-DD');\r\n\tconst nextDay = targetDay.add(1, 'days').format('YYYY-MM-DD');\r\n\r\n\t//max time add inserting order's total duration\r\n\tmaxEndTime.add(insertingOrderDuration);\r\n\r\n\t//use next day to make up next day's start time\r\n\tconst nextDayStartTime = moment(\r\n\t\tnextDay + ' ' + utils.getLineStartTime(_targetOrder.production_line),\r\n\t\t'YYYY-MM-DD H:mm:ss'\r\n\t);\r\n\r\n\t//if after adding the max time with the inserting order's total duration, max time is greater than next day's start time, return false\r\n\treturn maxEndTime.isSameOrBefore(nextDayStartTime);\r\n}\r\n\r\n/**\r\n * Use the qty and rate that are passed in to dynamically update the duration field\r\n * @param {*} qty \r\n * @param {*} rate \r\n */\r\nfunction updateDuration(qty, rate) {\r\n\tif (qty !== '' && rate !== '') {\r\n\t\tlet durationHrs = Number(parseFloat(qty).toFixed(2)) / Number((parseFloat(rate) * 60).toFixed(2));\r\n\t\tlet momentDuration = moment.duration(durationHrs, 'hours');\r\n\r\n\t\tlet durationText = getDurationText(momentDuration);\r\n\r\n\t\t$('input.prod-sche-gt-chart-datalist-input#duration').val(durationText);\r\n\t} else {\r\n\t\t$('input.prod-sche-gt-chart-datalist-input#duration').val('');\r\n\t}\r\n}\r\n\r\nfunction getDurationText(momentDuration) {\r\n\tlet month = momentDuration.get('month');\r\n\tlet days = momentDuration.get('d');\r\n\tlet hrs = momentDuration.get('h');\r\n\tlet mins = momentDuration.get('minute');\r\n\tlet text = 'under 1 minute';\r\n\r\n\tif (month > 0) {\r\n\t\treturn 'Over a month!';\r\n\t}\r\n\r\n\tif (days !== 0) {\r\n\t\thrs += days * 24;\r\n\t}\r\n\r\n\tif (hrs !== 0 && mins !== 0) {\r\n\t\ttext = hrs + ' hour(s) & ' + mins + ' minute(s)';\r\n\t} else if (hrs !== 0 && mins === 0) {\r\n\t\ttext = hrs + ' hour(s)';\r\n\t} else if (hrs === 0 && mins !== 0) {\r\n\t\ttext = mins + ' minute(s)';\r\n\t}\r\n\r\n\treturn text;\r\n}\r\n\r\n/**\r\n * Retrieve product data and equipment data from Postgres\r\n * Set the retrieved data global\r\n * Call the callback function passed in when all is successful\r\n * Alert error when anyone of them has failed\r\n * @param {*} callback \r\n */\r\nfunction getProducts(callback) {\r\n\tlet productsUrl = utils.postgRestHost + 'product';\r\n\tutils\r\n\t\t.get(productsUrl)\r\n\t\t.then((res) => {\r\n\t\t\t_products = res;\r\n\t\t\tcallback();\r\n\t\t})\r\n\t\t.catch((e) => {\r\n\t\t\tutils.alert('error', 'Error', 'An error occurred while fetching data from the postgresql : ' + e);\r\n\t\t});\r\n}\r\n"]}