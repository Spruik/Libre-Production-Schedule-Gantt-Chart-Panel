{"version":3,"sources":["../src/order_actions_ctrl.js"],"names":["showOrderActions","order","_order","status","cons","STATE_PLAN","STATE_READY","utils","alert","showModal","removeListeners","addListeners","$","document","off","on","e","target","id","insertOrder","editOrder","closeForm","updateOrderStatus","STATE_DELETED","url","postgRestHost","result","sure","get","ok","_orderStates","data","insert_actions","showActions","error","edit_actions","getOrderStates","line","influx","writeLineForUpdate","toLowerCase","deleteCurrentAndUpdateAffectOrders","post","writeUrl","then","chart","refreshDashboard","catch","promises","allData","dp","getData","affectedOrders","filter","startTime","endTime","production_line","order_date","deletingOrderDurationHour","moment","duration","order_qty","planned_rate","deletingOrderChangeover","planned_changeover_time","deletingOrderTotalDur","add","forEach","writeLineForTimeUpdate","push","Promise","all","trigger"],"mappings":"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","file":"order_actions_ctrl.js","sourcesContent":["import * as utils from './utils';\nimport * as influx from './influx_helper';\nimport * as insert_actions from './insertion_actions_ctrl';\nimport * as edit_actions from './editing_actions_ctrl';\nimport * as dp from './data_processor';\nimport * as cons from './constans';\nimport moment from 'moment';\nimport * as chart from './chart_option';\n\nlet _order;\nlet _orderStates;\nconst closeForm = () =>\n  $('a#product-schedule-gantt-chart-order-actions-close-btn').trigger('click');\n\nexport function showOrderActions(order) {\n  //set the order passed in global\n  _order = order;\n\n  //check if the order is available for editing, only 'planned' and 'ready' can be edited by scheduler\n  if (order.status !== cons.STATE_PLAN && order.status !== cons.STATE_READY) {\n    utils.alert(\n      'warning',\n      'Warning',\n      'The order status is ' +\n        order.status +\n        ', so it is no longer available for editing'\n    );\n    return;\n  }\n\n  //pop up the actions form\n  utils.showModal('order_actions.html', {});\n\n  //set listeners\n  removeListeners();\n  addListeners();\n}\n\nfunction removeListeners() {\n  $(document).off(\n    'click',\n    'input[type=\"radio\"][name=\"product-schedule-gantt-chart-order-actions-radio\"]'\n  );\n}\n\nfunction addListeners() {\n  $(document).on(\n    'click',\n    'input[type=\"radio\"][name=\"product-schedule-gantt-chart-order-actions-radio\"]',\n    e => {\n      if (e.target.id === 'insert') {\n        insertOrder();\n      } else if (e.target.id === 'edit') {\n        editOrder();\n      } else if (e.target.id === 'release') {\n        if (_order.status === cons.STATE_READY) {\n          utils.alert('warning', 'Warning', 'Order has already been released');\n          closeForm();\n        } else {\n          updateOrderStatus(cons.STATE_READY);\n        }\n      } else if (e.target.id === 'delete') {\n        updateOrderStatus(cons.STATE_DELETED);\n      }\n    }\n  );\n}\n\nasync function insertOrder() {\n  const url = `${utils.postgRestHost}order_state`;\n  const result = await utils.sure(utils.get(url));\n  if (result.ok) {\n    _orderStates = result.data;\n    insert_actions.showActions(_order);\n  } else {\n    utils.alert(\n      'error',\n      'Error',\n      `Error occurred when getting the Order State Configuration due to ${result.error} please try again or contact the dev team`\n    );\n  }\n}\n\nasync function editOrder() {\n  const url = `${utils.postgRestHost}order_state`;\n  const result = await utils.sure(utils.get(url));\n  if (result.ok) {\n    _orderStates = result.data;\n    edit_actions.showActions(_order);\n  } else {\n    utils.alert(\n      'error',\n      'Error',\n      `Error occurred when getting the Order State Configuration due to ${result.error} please try again or contact the dev team`\n    );\n  }\n}\n\nexport function getOrderStates() {\n  return _orderStates;\n}\n\nfunction updateOrderStatus(status) {\n  const line = influx.writeLineForUpdate(status, _order);\n  if (status.toLowerCase() === 'deleted') {\n    deleteCurrentAndUpdateAffectOrders(line);\n  } else {\n    utils\n      .post(influx.writeUrl, line)\n      .then(res => {\n        utils.alert('success', 'Success', 'Order has been marked as ' + status);\n        closeForm();\n        chart.refreshDashboard();\n      })\n      .catch(e => {\n        utils.alert(\n          'error',\n          'Database Error',\n          'An error occurred while updating the order : ' + e\n        );\n        closeForm();\n      });\n  }\n}\n\nfunction deleteCurrentAndUpdateAffectOrders(line) {\n  //create promises array and put the 'delete current order request' into it first\n  let promises = [utils.post(influx.writeUrl, line)];\n\n  //get all orders data for further filtering\n  const allData = dp.getData();\n\n  //filter affected orders using all orders data\n  //affected orders = order.startTime >= thisOrder.endtime && in the same line && with the same date.\n  const affectedOrders = allData.filter(\n    order =>\n      order.startTime >= _order.endTime &&\n      order.production_line === _order.production_line &&\n      order.order_date === _order.order_date\n  );\n\n  //work out thisOrder's total duration, which = its duration + its changeover duration\n  const deletingOrderDurationHour = moment.duration(\n    _order.order_qty / (_order.planned_rate * 60),\n    'hours'\n  );\n  const deletingOrderChangeover = moment.duration(\n    _order.planned_changeover_time,\n    'H:mm:ss'\n  );\n  const deletingOrderTotalDur = deletingOrderDurationHour.add(\n    deletingOrderChangeover\n  );\n\n  //loop affected orders, order's starttime and endtime should both subtract the total duration worked out\n  affectedOrders.forEach(order => {\n    const line = influx.writeLineForTimeUpdate(\n      order,\n      deletingOrderTotalDur,\n      'subtract'\n    );\n    promises.push(utils.post(influx.writeUrl, line));\n  });\n\n  Promise.all(promises)\n    .then(() => {\n      utils.alert('success', 'Success', 'Order has been marked as Deleted');\n      closeForm();\n      chart.refreshDashboard();\n    })\n    .catch(e => {\n      utils.alert(\n        'error',\n        'Database Error',\n        'An error occurred while deleting the order : ' + e\n      );\n      closeForm();\n    });\n}\n"]}