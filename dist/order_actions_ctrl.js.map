{"version":3,"sources":["../src/order_actions_ctrl.js"],"names":["showOrderActions","order","_order","status","cons","STATE_PLAN","STATE_READY","utils","alert","showModal","removeListeners","addListeners","$","document","off","on","e","target","id","insertOrder","editOrder","closeForm","updateOrderStatus","STATE_DELETED","url","postgRestHost","result","sure","get","ok","_orderStates","data","insert_actions","showActions","error","edit_actions","getOrderStates","line","influx","writeLineForUpdate","deleteCurrentAndUpdateAffectOrders","post","writeUrl","then","res","chart","refreshDashboard","catch","promises","allData","dp","getData","affectedOrders","filter","startTime","endTime","production_line","order_date","deletingOrderDurationHour","moment","duration","order_qty","planned_rate","deletingOrderChangeover","planned_changeover_time","deletingOrderTotalDur","add","forEach","writeLineForTimeUpdate","push","Promise","all","trigger"],"mappings":"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","file":"order_actions_ctrl.js","sourcesContent":["import * as utils from './utils';\nimport * as influx from './influx_helper';\nimport * as insert_actions from './insertion_actions_ctrl';\nimport * as edit_actions from './editing_actions_ctrl';\nimport * as dp from './data_processor';\nimport * as cons from './constans';\nimport moment from 'moment';\nimport * as chart from './chart_option';\n\nlet _order;\nlet _orderStates;\nconst closeForm = () => $('a#product-schedule-gantt-chart-order-actions-close-btn').trigger('click');\n\nexport function showOrderActions(order) {\n\t//set the order passed in global\n\t_order = order;\n\n\t//check if the order is available for editing, only 'planned' and 'ready' can be edited by scheduler\n\tif (order.status !== cons.STATE_PLAN && order.status !== cons.STATE_READY) {\n\t\tutils.alert(\n\t\t\t'warning',\n\t\t\t'Warning',\n\t\t\t'The order status is ' + order.status + ', so it is no longer available for editing'\n\t\t);\n\t\treturn;\n\t}\n\n\t//pop up the actions form\n\tutils.showModal('order_actions.html', {});\n\n\t//set listeners\n\tremoveListeners();\n\taddListeners();\n}\n\nfunction removeListeners() {\n\t$(document).off('click', 'input[type=\"radio\"][name=\"product-schedule-gantt-chart-order-actions-radio\"]');\n}\n\nfunction addListeners() {\n\t$(document).on('click', 'input[type=\"radio\"][name=\"product-schedule-gantt-chart-order-actions-radio\"]', (e) => {\n\t\tif (e.target.id === 'insert') {\n\t\t\tinsertOrder();\n\t\t} else if (e.target.id === 'edit') {\n\t\t\teditOrder();\n\t\t} else if (e.target.id === 'release') {\n\t\t\tif (_order.status === cons.STATE_READY) {\n\t\t\t\tutils.alert('warning', 'Warning', 'Order has already been released');\n\t\t\t\tcloseForm();\n\t\t\t} else {\n\t\t\t\tupdateOrderStatus(cons.STATE_READY);\n\t\t\t}\n\t\t} else if (e.target.id === 'delete') {\n\t\t\tupdateOrderStatus(cons.STATE_DELETED);\n\t\t}\n\t});\n}\n\nasync function insertOrder() {\n\tconst url = `${utils.postgRestHost}order_state`;\n\tconst result = await utils.sure(utils.get(url));\n\tif (result.ok) {\n\t\t_orderStates = result.data;\n\t\tinsert_actions.showActions(_order);\n\t} else {\n\t\tutils.alert(\n\t\t\t'error',\n\t\t\t'Error',\n\t\t\t`Error occurred when getting the Order State Configuration due to ${result.error} please try again or contact the dev team`\n\t\t);\n\t}\n}\n\nasync function editOrder() {\n\tconst url = `${utils.postgRestHost}order_state`;\n\tconst result = await utils.sure(utils.get(url));\n\tif (result.ok) {\n\t\t_orderStates = result.data;\n\t\tedit_actions.showActions(_order);\n\t} else {\n\t\tutils.alert(\n\t\t\t'error',\n\t\t\t'Error',\n\t\t\t`Error occurred when getting the Order State Configuration due to ${result.error} please try again or contact the dev team`\n\t\t);\n\t}\n}\n\nexport function getOrderStates() {\n\treturn _orderStates;\n}\n\nfunction updateOrderStatus(status) {\n\tconst line = influx.writeLineForUpdate(status, _order);\n\tif (status === 'Deleted') {\n\t\tdeleteCurrentAndUpdateAffectOrders(line);\n\t} else {\n\t\tutils\n\t\t\t.post(influx.writeUrl, line)\n\t\t\t.then((res) => {\n\t\t\t\tutils.alert('success', 'Success', 'Order has been marked as ' + status);\n\t\t\t\tcloseForm();\n\t\t\t\tchart.refreshDashboard();\n\t\t\t})\n\t\t\t.catch((e) => {\n\t\t\t\tutils.alert('error', 'Database Error', 'An error occurred while updating the order : ' + e);\n\t\t\t\tcloseForm();\n\t\t\t});\n\t}\n}\n\nfunction deleteCurrentAndUpdateAffectOrders(line) {\n\t//create promises array and put the 'delete current order request' into it first\n\tlet promises = [ utils.post(influx.writeUrl, line) ];\n\n\t//get all orders data for further filtering\n\tconst allData = dp.getData();\n\n\t//filter affected orders using all orders data\n\t//affected orders = order.startTime >= thisOrder.endtime && in the same line && with the same date.\n\tconst affectedOrders = allData.filter(\n\t\t(order) =>\n\t\t\torder.startTime >= _order.endTime &&\n\t\t\torder.production_line === _order.production_line &&\n\t\t\torder.order_date === _order.order_date\n\t);\n\n\t//work out thisOrder's total duration, which = its duration + its changeover duration\n\tconst deletingOrderDurationHour = moment.duration(_order.order_qty / (_order.planned_rate * 60), 'hours');\n\tconst deletingOrderChangeover = moment.duration(_order.planned_changeover_time, 'H:mm:ss');\n\tconst deletingOrderTotalDur = deletingOrderDurationHour.add(deletingOrderChangeover);\n\n\t//loop affected orders, order's starttime and endtime should both subtract the total duration worked out\n\taffectedOrders.forEach((order) => {\n\t\tconst line = influx.writeLineForTimeUpdate(order, deletingOrderTotalDur, 'subtract');\n\t\tpromises.push(utils.post(influx.writeUrl, line));\n\t});\n\n\tPromise.all(promises)\n\t\t.then(() => {\n\t\t\tutils.alert('success', 'Success', 'Order has been marked as Deleted');\n\t\t\tcloseForm();\n\t\t\tchart.refreshDashboard();\n\t\t})\n\t\t.catch((e) => {\n\t\t\tutils.alert('error', 'Database Error', 'An error occurred while deleting the order : ' + e);\n\t\t\tcloseForm();\n\t\t});\n}\n"]}