{"version":3,"sources":["../src/order_actions_ctrl.js"],"names":["showOrderActions","order","_order","status","cons","STATE_PLAN","STATE_READY","utils","alert","showModal","removeListeners","addListeners","$","document","off","on","e","target","id","insertOrder","editOrder","closeForm","updateOrderStatus","STATE_DELETED","url","postgRestHost","result","sure","get","ok","_orderStates","data","insert_actions","showActions","error","edit_actions","getOrderStates","line","influx","writeLineForUpdate","deleteCurrentAndUpdateAffectOrders","post","writeUrl","then","chart","refreshDashboard","catch","promises","allData","dp","getData","affectedOrders","filter","startTime","endTime","production_line","order_date","deletingOrderDurationHour","moment","duration","order_qty","planned_rate","deletingOrderChangeover","planned_changeover_time","deletingOrderTotalDur","add","forEach","writeLineForTimeUpdate","push","Promise","all","trigger"],"mappings":"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","file":"order_actions_ctrl.js","sourcesContent":["import * as utils from './utils'\nimport * as influx from './influx_helper'\nimport * as insert_actions from './insertion_actions_ctrl'\nimport * as edit_actions from './editing_actions_ctrl'\nimport * as dp from './data_processor'\nimport * as cons from './constans'\nimport moment from 'moment'\nimport * as chart from './chart_option'\n\nlet _order\nlet _orderStates\nconst closeForm = () => $('a#product-schedule-gantt-chart-order-actions-close-btn').trigger('click')\n\nexport function showOrderActions(order){\n  //set the order passed in global\n  _order = order\n\n  //check if the order is available for editing, only 'planned' and 'ready' can be edited by scheduler\n  if (order.status !== cons.STATE_PLAN && order.status !== cons.STATE_READY) {\n    utils.alert('warning', 'Warning', 'The order status is ' + order.status + ', so it is no longer available for editing')\n    return\n  }\n\n  //pop up the actions form\n  utils.showModal('order_actions.html', {})\n\n  //set listeners\n  removeListeners()\n  addListeners()\n}\n\nfunction removeListeners(){\n  $(document).off('click', 'input[type=\"radio\"][name=\"product-schedule-gantt-chart-order-actions-radio\"]')\n}\n\nfunction addListeners(){\n  $(document).on('click', 'input[type=\"radio\"][name=\"product-schedule-gantt-chart-order-actions-radio\"]', e => {\n    if (e.target.id === 'insert') {\n      insertOrder()\n    }else if (e.target.id === 'edit') {\n      editOrder()\n    }else if (e.target.id === 'release') {\n      if (_order.status === cons.STATE_READY) {\n        utils.alert('warning', 'Warning', 'Order has already been released')\n        closeForm()\n      }else{\n        updateOrderStatus(cons.STATE_READY)\n      }\n    }else if (e.target.id === 'delete') {\n      updateOrderStatus(cons.STATE_DELETED)\n    }\n  })\n}\n\nasync function insertOrder(){\n  const url = `${utils.postgRestHost}order_state`\n  const result = await utils.sure(utils.get(url))\n  if (result.ok) {\n    _orderStates = result.data\n    insert_actions.showActions(_order)\n  }else {\n    utils.alert('error', 'Error', `Error occurred when getting the Order State Configuration due to ${result.error} please try again or contact the dev team`)\n  }\n}\n\nasync function editOrder(){\n  const url = `${utils.postgRestHost}order_state`\n  const result = await utils.sure(utils.get(url))\n  if (result.ok) {\n    _orderStates = result.data\n    edit_actions.showActions(_order)\n  }else {\n    utils.alert('error', 'Error', `Error occurred when getting the Order State Configuration due to ${result.error} please try again or contact the dev team`)\n  }\n}\n\nexport function getOrderStates(){\n  return _orderStates\n}\n\nfunction updateOrderStatus(status){\n  const line = influx.writeLineForUpdate(status, _order)\n  if (status === 'Deleted') {\n    deleteCurrentAndUpdateAffectOrders(line)\n  }else {\n    utils.post(influx.writeUrl, line).then(res => {\n      utils.alert('success', 'Success', 'Order has been marked as ' + status)\n      closeForm()\n      chart.refreshDashboard()\n    }).catch(e => {\n      utils.alert('error', 'Database Error', 'An error occurred while updating the order : ' + e)\n      closeForm()\n    })\n  }\n}\n\n\nfunction deleteCurrentAndUpdateAffectOrders(line){\n  //create promises array and put the 'delete current order request' into it first\n  let promises = [utils.post(influx.writeUrl, line)]\n\n  //get all orders data for further filtering\n  const allData = dp.getData()\n\n  //filter affected orders using all orders data\n  //affected orders = order.startTime >= thisOrder.endtime && in the same line && with the same date.\n  const affectedOrders = allData.filter(order => order.startTime >= _order.endTime && order.production_line === _order.production_line && order.order_date === _order.order_date)\n  \n  //work out thisOrder's total duration, which = its duration + its changeover duration\n  const deletingOrderDurationHour = moment.duration(_order.order_qty / (_order.planned_rate * 60), 'hours') \n  const deletingOrderChangeover = moment.duration(_order.planned_changeover_time, 'H:mm:ss')\n  const deletingOrderTotalDur = deletingOrderDurationHour.add(deletingOrderChangeover)\n  \n  //loop affected orders, order's starttime and endtime should both subtract the total duration worked out\n  affectedOrders.forEach(order => {\n    const line = influx.writeLineForTimeUpdate(order, deletingOrderTotalDur, 'subtract')\n    promises.push(utils.post(influx.writeUrl, line))\n  })\n\n  Promise.all(promises).then(() => {\n    utils.alert('success', 'Success', 'Order has been marked as Deleted')\n    closeForm()\n    chart.refreshDashboard()\n  }).catch(e => {\n    utils.alert('error', 'Database Error', 'An error occurred while deleting the order : ' + e)\n    closeForm()\n  })\n}"]}