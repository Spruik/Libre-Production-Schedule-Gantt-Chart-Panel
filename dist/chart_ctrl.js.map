{"version":3,"sources":["../src/chart_ctrl.js"],"names":["refreshDashb","_ctrl","timeSrv","refreshDashboard","angular","_","$","dp","chart","utils","echarts","MetricsPanelCtrl","panelDefaults","targets","pageSize","showHeader","styles","columns","fontSize","ChartCtrl","$scope","$injector","templateSrv","annotationsSrv","$sanitize","variableSrv","pageIndex","panel","fields","defaults","events","on","onDataReceived","bind","onDataError","hasData","datasource","transform","setTimeQueryStart","getAnnotations","dashboard","range","then","data","annotations","err","dataRaw","render","dataList","length","undefined","type","console","log","queryProductionLineDetails","callback","self","restructuredData","rows","globe_data","scope","elem","attrs","ctrl","$panelContainer","find","myChart","init","renderPanel","option","getOption","setOption","setTimeout","height","resize","window","onresize","interationSetup","renderingCompleted","templateUrl"],"mappings":"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","file":"chart_ctrl.js","sourcesContent":["import angular from 'angular'\nimport _ from 'lodash'\nimport $ from 'jquery'\nimport * as dp from './data_processor'\nimport * as chart from './chart_option'\nimport * as utils from './utils'\nimport echarts from './libs/echarts.min'\nimport {MetricsPanelCtrl} from 'app/plugins/sdk'\n\nimport './css/style.css!'\nimport './css/bootstrap-slider.css!'\nimport './css/instant-search.css!'\n\nlet _ctrl\n\nconst panelDefaults = {\n  targets: [{}],\n  pageSize: null,\n  showHeader: true,\n  styles: [],\n  columns: [],\n  fontSize: '100%',\n};\n\nexport class ChartCtrl extends MetricsPanelCtrl {\n\n  constructor($scope, $injector, templateSrv, annotationsSrv, $sanitize, variableSrv) {\n    super($scope, $injector);\n\n    this.pageIndex = 0;\n\n    if (this.panel.styles === void 0) {\n      this.panel.styles = this.panel.columns;\n      this.panel.columns = this.panel.fields;\n      delete this.panel.columns;\n      delete this.panel.fields;\n    }\n\n    _.defaults(this.panel, panelDefaults);\n\n    this.events.on('data-received', this.onDataReceived.bind(this));\n    this.events.on('data-error', this.onDataError.bind(this));\n    this.events.on('data-snapshot-load', this.onDataReceived.bind(this));\n\n    this.hasData = false\n  }\n\n  issueQueries(datasource) {\n    this.pageIndex = 0;\n\n    if (this.panel.transform === 'annotations') {\n      this.setTimeQueryStart();\n      return this.annotationsSrv\n        .getAnnotations({\n          dashboard: this.dashboard,\n          panel: this.panel,\n          range: this.range,\n        })\n        .then(annotations => {\n          return { data: annotations };\n        });\n    }\n\n    return super.issueQueries(datasource);\n  }\n\n  onDataError(err) {\n    this.dataRaw = [];\n    this.render();\n  }\n\n  onDataReceived(dataList) {    \n    if (dataList.length === 0 || dataList === null || dataList === undefined) {\n        // console.log('No data reveived')\n        this.hasData = false\n        return\n    }else {\n        this.hasData = true\n    }\n\n    if (dataList[0].type !== 'table') {\n        console.log('To show the pie chart, please format data as a TABLE in the Metrics Setting')\n        return\n    }\n\n    //if everything is all good, start getting production line details (start time) from postgresdb\n    utils.queryProductionLineDetails(callback)\n\n    let self = this\n    function callback(){      \n      //dataList data is messy and with lots of unwanted data, so we need to filter out data that we want -\n      let data = dp.restructuredData(dataList[0].columns, dataList[0].rows)\n      if (data.length === 0) {\n          this.hasData = false\n          return\n      }\n      self.render(data)\n    }\n  }\n\n  rendering(){\n    this.render(this.globe_data)\n  }\n\n  link(scope, elem, attrs, ctrl) {\n    const $panelContainer = elem.find('#production-schedule-gantt-chart')[0];\n    const myChart = echarts.init($panelContainer)\n    _ctrl = ctrl\n    \n    function renderPanel(data) { \n      if (!myChart || !data) { return; }\n      const option = chart.getOption(data)\n      // myChart.clear();\n      myChart.setOption(option);\n      setTimeout(() => {\n          $('#production-schedule-gantt-chart').height(ctrl.height - 51)\n          myChart.resize();\n          window.onresize = () => {\n              myChart.resize();\n          }\n      }, 500);\n\n      chart.interationSetup(myChart, ctrl)\n    }\n\n    ctrl.events.on('panel-size-changed', () => {\n      if (myChart) { \n          const height = ctrl.height - 51\n          if (height >= 280) {\n            $('#production-schedule-gantt-chart').height(height);\n          }\n          myChart.resize(); \n      }\n    })\n\n    ctrl.events.on('render', data => {\n      renderPanel(data);\n      ctrl.renderingCompleted();\n    });\n  }\n\n}\n\nexport function refreshDashb(){\n  _ctrl.timeSrv.refreshDashboard()\n}\n\nChartCtrl.templateUrl = 'partials/module.html';\n"]}