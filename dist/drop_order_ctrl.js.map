{"version":3,"sources":["../src/drop_order_ctrl.js"],"names":["showForm","droppingOrder","targetOrder","_droppingOrder","_targetOrder","targeting_date","order_date","utils","showModal","removeListeners","addListeners","$","document","off","on","e","target","id","_isInsertingBefore","insert","closeForm","allData","dp","getData","droppingTotalDuration","getOrderDuration","isLineHavingSpareTimeForTheDay","alert","originalLineAffectedOrders","findAffectedOrdersInLineChangedCase","targetingLineAffectedOrders","isLineChanged","updateForLineChangedCase","isDateChanged","ordersAffected","findAffectedOrders","isMovingForward","length","dir","text","order_id","affectedOrdersTotalDuration","getTotalOrderDuration","update","oriOrders","targOrders","dropDur","newDroppingStartTime","getInitStartTime","add","moment","duration","planned_changeover_time","endTime","sVal","valueOf","eVal","subtract","line","influx","writeLineForUpdateDragging","production_line","post","writeUrl","then","updateOriginOrdersForLineChangedCase","catch","updateTargetOrdersForLineChangedCase","promises","forEach","writeLineForTimeUpdate","order","push","Promise","all","chart","refreshDashboard","droppingDur","affectedDur","affectedOrders","updateAffectedOrders","promise","targetOrderStartTime","targetOrderEndTime","diff","startTime","changeover","isOriginal","ordersWithSameLineAndDate","filter","or","ordersBeingAffected","targetingOrder","targetingStartTime","droppingStartTime","all_end_times","map","maxEndTime","Math","max","targetDay","nextDay","format","nextDayStartTime","getLineStartTime","isSameOrBefore","instant_search","trigger"],"mappings":";;;;;;;;;;;;;;;;;;;AAaO,WAASA,QAAT,CAAkBC,aAAlB,EAAiCC,WAAjC,EAA8C;AACnDC,qBAAiBF,aAAjB;AACAG,mBAAeF,WAAf;AACAC,mBAAeE,cAAf,GAAgCD,aAAaE,UAA7C;;AAEA;AACAC,UAAMC,SAAN,CAAgB,0BAAhB,EAA4C,EAACP,eAAeA,aAAhB,EAA+BC,aAAaA,WAA5C,EAA5C;;AAEAO;AACAC;AACD;;sBAVeV,Q;;AAYhB,WAASS,eAAT,GAA0B;AACxBE,MAAEC,QAAF,EAAYC,GAAZ,CAAgB,OAAhB,EAAyB,oFAAzB;AACD;;AAED,WAASH,YAAT,GAAuB;AACrBC,MAAEC,QAAF,EAAYE,EAAZ,CAAe,OAAf,EAAwB,oFAAxB,EAA8G,aAAK;AACjH,UAAIC,EAAEC,MAAF,CAASC,EAAT,KAAgB,QAApB,EAA8B;AAC5BC,6BAAqB,IAArB;AACAC;AACD,OAHD,MAGM,IAAIJ,EAAEC,MAAF,CAASC,EAAT,KAAgB,OAApB,EAA6B;AACjCC,6BAAqB,KAArB;AACAC;AACD,OAHK,MAGA,IAAIJ,EAAEC,MAAF,CAASC,EAAT,KAAgB,QAApB,EAA8B;AAClCG;AACD;AACF,KAVD;AAWD;;AAED,WAASD,MAAT,GAAiB;AACf,QAAME,UAAUC,GAAGC,OAAH,EAAhB;;AAEA;AACA,QAAMC,wBAAwBC,iBAAiBtB,cAAjB,CAA9B;;AAEA,QAAI,CAACuB,+BAA+BL,OAA/B,EAAwCG,qBAAxC,EAA+DpB,YAA/D,CAAL,EAAmF;AACjFG,YAAMoB,KAAN,CAAY,SAAZ,EAAuB,SAAvB,EAAkC,uEAAlC;AACA;AACD;;AAED;AACA;AACA,QAAMC,6BAA6BC,oCAAoCR,OAApC,EAA6ClB,cAA7C,EAA6D,IAA7D,CAAnC;AACA,QAAM2B,8BAA8BD,oCAAoCR,OAApC,EAA6CjB,YAA7C,EAA2D,KAA3D,CAApC;;AAEA,QAAI2B,cAAc5B,cAAd,EAA8BC,YAA9B,CAAJ,EAAiD;;AAE/C4B,+BAAyBJ,0BAAzB,EAAqDE,2BAArD,EAAkFN,qBAAlF;AAED,KAJD,MAIM;AACJ,UAAIS,cAAc9B,cAAd,EAA8BC,YAA9B,CAAJ,EAAiD;AAC/C;AACA4B,iCAAyBJ,0BAAzB,EAAqDE,2BAArD,EAAkFN,qBAAlF;AACA;AACD,OAJD,MAIK;AACL;AACA;AACA,YAAMU,iBAAiBC,mBAAmBd,OAAnB,EAA4BlB,cAA5B,EAA4CC,YAA5C,EAA0DgC,gBAAgBjC,cAAhB,EAAgCC,YAAhC,CAA1D,CAAvB;;AAEA;AACA;AACA,YAAI8B,eAAeG,MAAf,KAA0B,CAA9B,EAAiC;AAC/B,cAAIlC,eAAeG,UAAf,KAA8BF,aAAaE,UAA/C,EAA2D;AACzD,gBAAMgC,MAAMpB,qBAAqB,SAArB,GAAiC,QAA7C;AACA,gBAAMqB,OAAO,WAAWpC,eAAeqC,QAA1B,GAAqC,cAArC,GAAsDF,GAAtD,GAA4D,YAA5D,GAA2ElC,aAAaoC,QAArG;AACAjC,kBAAMoB,KAAN,CAAY,SAAZ,EAAuB,SAAvB,EAAkCY,IAAlC;AACA;AACD;AACF;;AAED;AACA,YAAME,8BAA8BC,sBAAsBR,cAAtB,CAApC;;AAEA;AACAS,eAAOP,gBAAgBjC,cAAhB,EAAgCC,YAAhC,CAAP,EAAsDoB,qBAAtD,EAA6EiB,2BAA7E,EAA0GP,cAA1G;AACC;AACF;AACF;;AAED,WAASD,aAAT,CAAuBhC,aAAvB,EAAsCC,WAAtC,EAAkD;AAChD,WAAOD,cAAcK,UAAd,KAA6BJ,YAAYI,UAAhD;AACD;;AAED,WAAS0B,wBAAT,CAAkCY,SAAlC,EAA6CC,UAA7C,EAAyDC,OAAzD,EAAiE;AAC7D;AACA;AACA;AACA,QAAIC,6BAAJ;AACA,QAAI7B,kBAAJ,EAAwB;AACtB6B,6BAAuBC,iBAAiB5C,YAAjB,CAAvB;AACA2C,2BAAqBE,GAArB,CAAyBC,OAAOC,QAAP,CAAgBhD,eAAeiD,uBAA/B,EAAwD,SAAxD,CAAzB;AACD,KAHD,MAGK;AACHL,6BAAuBG,OAAO9C,aAAaiD,OAApB,CAAvB;AACAN,2BAAqBE,GAArB,CAAyBC,OAAOC,QAAP,CAAgBhD,eAAeiD,uBAA/B,EAAwD,SAAxD,CAAzB;AACD;;AAED;AACA,QAAME,OAAOP,qBAAqBQ,OAArB,EAAb;AACA,QAAMC,OAAOT,qBAAqBE,GAArB,CAAyBC,OAAOC,QAAP,CAAgBL,QAAQS,OAAR,EAAhB,EACnCE,QADmC,CAC1BP,OAAOC,QAAP,CAAgBhD,eAAeiD,uBAA/B,EAAwD,SAAxD,CAD0B,CAAzB,EACoEG,OADpE,EAAb;;AAGA,QAAMG,OAAOC,OAAOC,0BAAP,CAAkCzD,cAAlC,EAAkDmD,IAAlD,EAAwDE,IAAxD,EAA8DpD,aAAayD,eAA3E,CAAb;;AAEAtD,UAAMuD,IAAN,CAAWH,OAAOI,QAAlB,EAA4BL,IAA5B,EAAkCM,IAAlC,CAAuC,eAAO;AAC5CC,2CAAqCrB,SAArC,EAAgDE,OAAhD,EAAyDD,UAAzD;AACD,KAFD,EAEGqB,KAFH,CAES,aAAK;AACZ9C;AACAb,YAAMoB,KAAN,CAAY,OAAZ,EAAqB,OAArB,EAA8B,gDAAgDZ,CAA9E;AACD,KALD;AAMH;;AAED,WAASkD,oCAAT,CAA8CrB,SAA9C,EAAyDE,OAAzD,EAAkED,UAAlE,EAA6E;AAC3E,QAAID,UAAUP,MAAV,KAAqB,CAAzB,EAA4B;AAC1B8B,2CAAqCtB,UAArC,EAAiDC,OAAjD;AACD;;AAED,QAAIsB,WAAW,EAAf;AACAxB,cAAUyB,OAAV,CAAkB,iBAAS;AACzB,UAAMX,OAAOC,OAAOW,sBAAP,CAA8BC,KAA9B,EAAqCzB,OAArC,EAA8C,UAA9C,CAAb;AACAsB,eAASI,IAAT,CAAcjE,MAAMuD,IAAN,CAAWH,OAAOI,QAAlB,EAA4BL,IAA5B,CAAd;AACD,KAHD;AAIAe,YAAQC,GAAR,CAAYN,QAAZ,EAAsBJ,IAAtB,CAA2B,eAAO;AAChCG,2CAAqCtB,UAArC,EAAiDC,OAAjD;AACD,KAFD,EAEGoB,KAFH,CAES,aAAK;AACZ9C;AACAb,YAAMoB,KAAN,CAAY,OAAZ,EAAqB,OAArB,EAA8B,gDAAgDZ,CAA9E;AACD,KALD;AAMD;;AAED,WAASoD,oCAAT,CAA8CtB,UAA9C,EAA0DC,OAA1D,EAAkE;AAChE,QAAID,WAAWR,MAAX,KAAsB,CAA1B,EAA6B;AAC3BjB;AACAb,YAAMoB,KAAN,CAAY,SAAZ,EAAuB,YAAvB,EAAqC,qCAArC;AACAgD,YAAMC,gBAAN;AACD;AACD;AACA,QAAIR,WAAW,EAAf;AACAvB,eAAWwB,OAAX,CAAmB,iBAAS;AAC1B,UAAMX,OAAOC,OAAOW,sBAAP,CAA8BC,KAA9B,EAAqCzB,OAArC,EAA8C,KAA9C,CAAb;AACAsB,eAASI,IAAT,CAAcjE,MAAMuD,IAAN,CAAWH,OAAOI,QAAlB,EAA4BL,IAA5B,CAAd;AACD,KAHD;AAIAe,YAAQC,GAAR,CAAYN,QAAZ,EAAsBJ,IAAtB,CAA2B,eAAO;AAChC5C;AACAb,YAAMoB,KAAN,CAAY,SAAZ,EAAuB,YAAvB,EAAqC,qCAArC;AACAgD,YAAMC,gBAAN;AACD,KAJD,EAIGV,KAJH,CAIS,aAAK;AACZ9C;AACAb,YAAMoB,KAAN,CAAY,OAAZ,EAAqB,OAArB,EAA8B,gDAAgDZ,CAA9E;AACD,KAPD;AAQD;;AAED,WAAS4B,MAAT,CAAgBP,eAAhB,EAAiCyC,WAAjC,EAA8CC,WAA9C,EAA2DC,cAA3D,EAA0E;AACxE,QAAI3C,eAAJ,EAAqB;AACnB;AACA,UAAMsB,OAAOC,OAAOW,sBAAP,CAA8BnE,cAA9B,EAA8C2E,WAA9C,EAA2D,KAA3D,CAAb;AACAvE,YAAMuD,IAAN,CAAWH,OAAOI,QAAlB,EAA4BL,IAA5B,EAAkCM,IAAlC,CAAuC,eAAO;AAC5CgB,6BAAqBD,cAArB,EAAqCF,WAArC,EAAkDzC,eAAlD;AACD,OAFD,EAEG8B,KAFH,CAES,aAAK;AACZ9C;AACAb,cAAMoB,KAAN,CAAY,OAAZ,EAAqB,OAArB,EAA8B,gDAAgDZ,CAA9E;AACD,OALD;AAMD,KATD,MASK;AACH;AACA,UAAM2C,QAAOC,OAAOW,sBAAP,CAA8BnE,cAA9B,EAA8C2E,WAA9C,EAA2D,UAA3D,CAAb;AACAvE,YAAMuD,IAAN,CAAWH,OAAOI,QAAlB,EAA4BL,KAA5B,EAAkCM,IAAlC,CAAuC,eAAO;AAC5CgB,6BAAqBD,cAArB,EAAqCF,WAArC,EAAkDzC,eAAlD;AACD,OAFD,EAEG8B,KAFH,CAES,aAAK;AACZ9C;AACAb,cAAMoB,KAAN,CAAY,OAAZ,EAAqB,OAArB,EAA8B,gDAAgDZ,CAA9E;AACD,OALD;AAMD;AACF;;AAED,WAASiE,oBAAT,CAA8BD,cAA9B,EAA8CF,WAA9C,EAA2DzC,eAA3D,EAA2E;AACzE,QAAI6C,UAAU,EAAd;;AAEA,QAAI7C,eAAJ,EAAqB;AACnB;AACA2C,qBAAeV,OAAf,CAAuB,iBAAS;AAC9B,YAAMX,OAAOC,OAAOW,sBAAP,CAA8BC,KAA9B,EAAqCM,WAArC,EAAkD,UAAlD,CAAb;AACAI,gBAAQT,IAAR,CAAajE,MAAMuD,IAAN,CAAWH,OAAOI,QAAlB,EAA4BL,IAA5B,CAAb;AACD,OAHD;AAID,KAND,MAMM;AACJ;AACAqB,qBAAeV,OAAf,CAAuB,iBAAS;AAC9B,YAAMX,OAAOC,OAAOW,sBAAP,CAA8BC,KAA9B,EAAqCM,WAArC,EAAkD,KAAlD,CAAb;AACAI,gBAAQT,IAAR,CAAajE,MAAMuD,IAAN,CAAWH,OAAOI,QAAlB,EAA4BL,IAA5B,CAAb;AACD,OAHD;AAID;;AAEDe,YAAQC,GAAR,CAAYO,OAAZ,EAAqBjB,IAArB,CAA0B,eAAO;AAC/B5C;AACAb,YAAMoB,KAAN,CAAY,SAAZ,EAAuB,YAAvB,EAAqC,qCAArC;AACAgD,YAAMC,gBAAN;AACD,KAJD,EAIGV,KAJH,CAIS,aAAK;AACZ9C;AACAb,YAAMoB,KAAN,CAAY,OAAZ,EAAqB,OAArB,EAA8B,gDAAgDZ,CAA9E;AACD,KAPD;AAQD;;AAED;;;;AAIA,WAASU,gBAAT,CAA0B8C,KAA1B,EAAgC;AAC9B,QAAMW,uBAAuBlC,iBAAiBuB,KAAjB,CAA7B;AACA,QAAMY,qBAAqBjC,OAAOqB,MAAMlB,OAAb,CAA3B;AACA,WAAOH,OAAOC,QAAP,CAAgBgC,mBAAmBC,IAAnB,CAAwBF,oBAAxB,CAAhB,CAAP;AACD;;AAED;;;;AAIA,WAASxC,qBAAT,CAA+BR,cAA/B,EAA8C;AAC5C,QAAIiB,WAAWD,OAAOC,QAAP,CAAgB,CAAhB,CAAf;AACAjB,mBAAemC,OAAf,CAAuB,iBAAS;AAC9BlB,eAASF,GAAT,CAAaxB,iBAAiB8C,KAAjB,CAAb;AACD,KAFD;AAGA,WAAOpB,QAAP;AACD;;AAED;;;;;AAKA,WAASH,gBAAT,CAA0BuB,KAA1B,EAAgC;AAC9B,QAAMc,YAAYnC,OAAOqB,MAAMc,SAAb,CAAlB;AACA,QAAMC,aAAapC,OAAOC,QAAP,CAAgBoB,MAAMnB,uBAAtB,EAA+C,SAA/C,CAAnB;AACA,WAAOiC,UAAU5B,QAAV,CAAmB6B,UAAnB,CAAP;AACD;;AAED;;;;;;;;AAQA,WAASzD,mCAAT,CAA6CR,OAA7C,EAAsDkD,KAAtD,EAA6DgB,UAA7D,EAAwE;AACtE,QAAMC,4BAA4BnE,QAAQoE,MAAR,CAAe;AAAA,aAAMC,GAAG7B,eAAH,KAAuBU,MAAMV,eAA7B,IAAgD6B,GAAGpF,UAAH,KAAkBiE,MAAMjE,UAA9E;AAAA,KAAf,CAAlC;AACA,QAAIqF,sBAAsBH,0BAA0BC,MAA1B,CAAiC;AAAA,aAAMC,GAAGL,SAAH,GAAed,MAAMc,SAA3B;AAAA,KAAjC,CAA1B;AACA,QAAInE,kBAAJ,EAAwB;AACtB,UAAI,CAACqE,UAAL,EAAiB;AACfI,4BAAoBnB,IAApB,CAAyBD,KAAzB;AACD;AACF;AACD,WAAOoB,mBAAP;AACD;;AAED;;;;;;;;AAQA,WAASxD,kBAAT,CAA4Bd,OAA5B,EAAqCpB,aAArC,EAAoD2F,cAApD,EAAoExD,eAApE,EAAqF;AACnF,QAAMoD,4BAA4BnE,QAAQoE,MAAR,CAAe;AAAA,aAASlB,MAAMV,eAAN,KAA0B+B,eAAe/B,eAAzC,IAA4DU,MAAMjE,UAAN,KAAqBsF,eAAetF,UAAzG;AAAA,KAAf,CAAlC;AACA,QAAIqF,sBAAsBH,0BAA0BC,MAA1B,CAAiC,iBAAS;AAClE,UAAII,qBAAqB3C,OAAO0C,eAAeP,SAAtB,CAAzB;AACA,UAAIS,oBAAoB5C,OAAOjD,cAAcoF,SAArB,CAAxB;AACA,UAAIjD,eAAJ,EAAqB;AACnB,eAAOmC,MAAMc,SAAN,GAAkBS,kBAAkBvC,OAAlB,EAAlB,IAAiDgB,MAAMc,SAAN,GAAkBQ,kBAA1E;AACD,OAFD,MAEK;AACH,eAAOtB,MAAMc,SAAN,GAAkBS,kBAAkBvC,OAAlB,EAAlB,IAAiDgB,MAAMc,SAAN,GAAkBQ,kBAA1E;AACD;AACF,KARyB,CAA1B;AASA,QAAI,CAAC3E,kBAAL,EAAyB;AACvB,UAAIkB,eAAJ,EAAqB;AAAEuD,4BAAoBnB,IAApB,CAAyBoB,cAAzB;AAA0C;AAClE,KAFD,MAEK;AACH,UAAI,CAACxD,eAAL,EAAsB;AAAEuD,4BAAoBnB,IAApB,CAAyBoB,cAAzB;AAA0C;AACnE;AACD,WAAOD,mBAAP;AACD;;AAED;;;;;;AAMA,WAAS5D,aAAT,CAAuB9B,aAAvB,EAAsC2F,cAAtC,EAAqD;AACnD,WAAO3F,cAAc4D,eAAd,KAAkC+B,eAAe/B,eAAxD;AACD;;AAED;;;;;AAKA,WAASzB,eAAT,CAAyBnC,aAAzB,EAAwCC,WAAxC,EAAqD;AACnD,WAAOD,cAAcoF,SAAd,GAA0BnF,YAAYmF,SAA7C;AACD;;AAED;;;;;;;AAOA,WAAS3D,8BAAT,CAAwCL,OAAxC,EAAiDG,qBAAjD,EAAwEtB,WAAxE,EAAoF;;AAElF;AACA,QAAM6E,iBAAiB1D,QAAQoE,MAAR,CAAe;AAAA,aAASlB,MAAMV,eAAN,KAA0B3D,YAAY2D,eAAtC,IAAyDU,MAAMjE,UAAN,KAAqBJ,YAAYI,UAAnG;AAAA,KAAf,CAAvB;AACA;AACA,QAAMyF,gBAAgBhB,eAAeiB,GAAf,CAAmB;AAAA,aAASzB,MAAMlB,OAAf;AAAA,KAAnB,CAAtB;AACA,QAAM4C,aAAa/C,OAAOgD,KAAKC,GAAL,gCAAYJ,aAAZ,EAAP,CAAnB;AACA;AACA,QAAMK,YAAYlD,OAAOhD,YAAYI,UAAnB,EAA+B,YAA/B,CAAlB;AACA,QAAM+F,UAAUD,UAAUnD,GAAV,CAAc,CAAd,EAAiB,MAAjB,EAAyBqD,MAAzB,CAAgC,YAAhC,CAAhB;AACA,QAAMC,mBAAmBrD,OAAOmD,UAAU,GAAV,GAAgB9F,MAAMiG,gBAAN,CAAuBtG,YAAY2D,eAAnC,CAAvB,EAA4E,oBAA5E,CAAzB;AACA;AACAoC,eAAWhD,GAAX,CAAezB,qBAAf;;AAEA,WAAOyE,WAAWQ,cAAX,CAA0BF,gBAA1B,CAAP;AACD;;;AA9UWhG,W;;AACAoD,Y;;AACArC,Q;;AACAoF,oB;;AACLxD,Y;;AACKyB,W;;;AAERzD,wB;AACAf,oB;AACAC,kB;;AAEEgB,e,GAAY,SAAZA,SAAY;AAAA,eAAMT,EAAE,8DAAF,EAAkEgG,OAAlE,CAA0E,OAA1E,CAAN;AAAA,O","file":"drop_order_ctrl.js","sourcesContent":["import * as utils from './utils'\nimport * as influx from './influx_helper'\nimport * as dp from './data_processor'\nimport * as instant_search from './instant_search_ctrl'\nimport moment from 'moment'\nimport * as chart from './chart_option'\n\nlet _isInsertingBefore\nlet _droppingOrder\nlet _targetOrder\n\nconst closeForm = () => $('a#product-schedule-gantt-chart-drop-insert-actions-close-btn').trigger('click')\n\nexport function showForm(droppingOrder, targetOrder) {\n  _droppingOrder = droppingOrder\n  _targetOrder = targetOrder\n  _droppingOrder.targeting_date = _targetOrder.order_date\n\n  //show form\n  utils.showModal('drop_insert_actions.html', {droppingOrder: droppingOrder, targetOrder: targetOrder})\n\n  removeListeners()\n  addListeners()\n}\n\nfunction removeListeners(){\n  $(document).off('click', 'input[type=\"radio\"][name=\"product-schedule-gantt-chart-drop-insert-actions-radio\"]')\n}\n\nfunction addListeners(){\n  $(document).on('click', 'input[type=\"radio\"][name=\"product-schedule-gantt-chart-drop-insert-actions-radio\"]', e => {\n    if (e.target.id === 'before') {\n      _isInsertingBefore = true\n      insert()\n    }else if (e.target.id === 'after') {\n      _isInsertingBefore = false\n      insert()\n    }else if (e.target.id === 'cancel') {\n      closeForm()\n    }\n  })\n}\n\nfunction insert(){\n  const allData = dp.getData()\n\n  //get dropping order's total duration\n  const droppingTotalDuration = getOrderDuration(_droppingOrder)\n  \n  if (!isLineHavingSpareTimeForTheDay(allData, droppingTotalDuration, _targetOrder)) {\n    utils.alert('warning', 'Warning', \"There is no spare space for this order to fit in this date's schedule\")\n    return\n  }\n\n  //find original affected orders (orders that are after the dropping order in the ori line)\n  //then find targetting affected orders (orders that are after the place that the dropping order is going to take)\n  const originalLineAffectedOrders = findAffectedOrdersInLineChangedCase(allData, _droppingOrder, true)\n  const targetingLineAffectedOrders = findAffectedOrdersInLineChangedCase(allData, _targetOrder, false)\n\n  if (isLineChanged(_droppingOrder, _targetOrder)) {\n    \n    updateForLineChangedCase(originalLineAffectedOrders, targetingLineAffectedOrders, droppingTotalDuration)\n    \n  }else {\n    if (isDateChanged(_droppingOrder, _targetOrder)) {\n      //......\n      updateForLineChangedCase(originalLineAffectedOrders, targetingLineAffectedOrders, droppingTotalDuration)\n      //......\n    }else{\n    //line didn't change\n    //need to know if the dragging order is moving forward or backward\n    const ordersAffected = findAffectedOrders(allData, _droppingOrder ,_targetOrder, isMovingForward(_droppingOrder, _targetOrder))\n\n    //if orders affected === 0, meaning that the targeting position is next the dropping position\n    //and the user insert the dropping order to the same direction where the dropping order is in\n    if (ordersAffected.length === 0) {\n      if (_droppingOrder.order_date === _targetOrder.order_date) {\n        const dir = _isInsertingBefore ? \"before \" : \"after \"\n        const text = \"Order \" + _droppingOrder.order_id + \" is already \" + dir + \"the order \" + _targetOrder.order_id      \n        utils.alert('warning', 'Warning', text)\n        return\n      }\n    }\n\n    //get duration\n    const affectedOrdersTotalDuration = getTotalOrderDuration(ordersAffected)\n\n    //start update orders to influxdb\n    update(isMovingForward(_droppingOrder, _targetOrder), droppingTotalDuration, affectedOrdersTotalDuration, ordersAffected)\n    }\n  }\n}\n\nfunction isDateChanged(droppingOrder, targetOrder){\n  return droppingOrder.order_date !== targetOrder.order_date\n}\n\nfunction updateForLineChangedCase(oriOrders, targOrders, dropDur){\n    //if left, dropping start time = target start time\n    //then target affected +++++ dropping dur\n    //then ori affected ----- dropping dur\n    let newDroppingStartTime\n    if (_isInsertingBefore) {\n      newDroppingStartTime = getInitStartTime(_targetOrder)  \n      newDroppingStartTime.add(moment.duration(_droppingOrder.planned_changeover_time, 'H:mm:ss'))    \n    }else{\n      newDroppingStartTime = moment(_targetOrder.endTime)\n      newDroppingStartTime.add(moment.duration(_droppingOrder.planned_changeover_time, 'H:mm:ss'))\n    }\n\n    //Get new dropping order's start time value and end time value\n    const sVal = newDroppingStartTime.valueOf()\n    const eVal = newDroppingStartTime.add(moment.duration(dropDur.valueOf())\n      .subtract(moment.duration(_droppingOrder.planned_changeover_time, 'H:mm:ss'))).valueOf()\n\n    const line = influx.writeLineForUpdateDragging(_droppingOrder, sVal, eVal, _targetOrder.production_line)\n    \n    utils.post(influx.writeUrl, line).then(res => {\n      updateOriginOrdersForLineChangedCase(oriOrders, dropDur, targOrders)\n    }).catch(e => {\n      closeForm()\n      utils.alert('error', 'Error', 'An error occurred when updated the order : ' + e)\n    })    \n}\n\nfunction updateOriginOrdersForLineChangedCase(oriOrders, dropDur, targOrders){\n  if (oriOrders.length === 0) {\n    updateTargetOrdersForLineChangedCase(targOrders, dropDur)\n  }\n\n  let promises = []\n  oriOrders.forEach(order => {\n    const line = influx.writeLineForTimeUpdate(order, dropDur, 'subtract')\n    promises.push(utils.post(influx.writeUrl, line))\n  })\n  Promise.all(promises).then(res => {\n    updateTargetOrdersForLineChangedCase(targOrders, dropDur)\n  }).catch(e => {\n    closeForm()\n    utils.alert('error', 'Error', 'An error occurred when updated the order : ' + e)\n  })\n}\n\nfunction updateTargetOrdersForLineChangedCase(targOrders, dropDur){\n  if (targOrders.length === 0) {\n    closeForm()\n    utils.alert('success', 'Successful', 'Order has been successfully updated')\n    chart.refreshDashboard()\n  }\n  //then target affected +++++ dropping dur\n  let promises = []\n  targOrders.forEach(order => {\n    const line = influx.writeLineForTimeUpdate(order, dropDur, 'add')\n    promises.push(utils.post(influx.writeUrl, line))\n  })\n  Promise.all(promises).then(res => {\n    closeForm()\n    utils.alert('success', 'Successful', 'Order has been successfully updated')\n    chart.refreshDashboard()\n  }).catch(e => {\n    closeForm()\n    utils.alert('error', 'Error', 'An error occurred when updated the order : ' + e)\n  })\n}\n\nfunction update(isMovingForward, droppingDur, affectedDur, affectedOrders){\n  if (isMovingForward) {\n    //if forward, dropping order +++++ all affected orders' total dur changeovers included\n    const line = influx.writeLineForTimeUpdate(_droppingOrder, affectedDur, 'add')\n    utils.post(influx.writeUrl, line).then(res => {\n      updateAffectedOrders(affectedOrders, droppingDur, isMovingForward)\n    }).catch(e => {\n      closeForm()\n      utils.alert('error', 'Error', 'An error occurred when updated the order : ' + e)\n    })\n  }else{\n    //if backward and inserting before, dropping order ----- all affected orders' total dur changeovers included\n    const line = influx.writeLineForTimeUpdate(_droppingOrder, affectedDur, 'subtract')\n    utils.post(influx.writeUrl, line).then(res => {\n      updateAffectedOrders(affectedOrders, droppingDur, isMovingForward)\n    }).catch(e => {\n      closeForm()\n      utils.alert('error', 'Error', 'An error occurred when updated the order : ' + e)\n    })\n  }\n}\n\nfunction updateAffectedOrders(affectedOrders, droppingDur, isMovingForward){\n  let promise = []\n\n  if (isMovingForward) {\n    //all affected orders ----- dropping total dur\n    affectedOrders.forEach(order => {\n      const line = influx.writeLineForTimeUpdate(order, droppingDur, 'subtract')\n      promise.push(utils.post(influx.writeUrl, line))\n    })\n  }else {\n    //all affected orders ++++++ dropping total dur\n    affectedOrders.forEach(order => {\n      const line = influx.writeLineForTimeUpdate(order, droppingDur, 'add')\n      promise.push(utils.post(influx.writeUrl, line))\n    })\n  }\n\n  Promise.all(promise).then(res => {\n    closeForm()\n    utils.alert('success', 'Successful', 'Order has been successfully updated')\n    chart.refreshDashboard()\n  }).catch(e => {\n    closeForm()\n    utils.alert('error', 'Error', 'An error occurred when updated the order : ' + e)\n  })\n}\n\n/**\n * Calculate an order's total duration, then return the duration that is moment duration obj\n * @param {Obj} order The order obj\n */\nfunction getOrderDuration(order){\n  const targetOrderStartTime = getInitStartTime(order)\n  const targetOrderEndTime = moment(order.endTime)\n  return moment.duration(targetOrderEndTime.diff(targetOrderStartTime))\n}\n\n/**\n * Calculate an array of orders' total duration, then return the duration that is moment duration obj\n * @param {Obj} ordersAffected The array of obj\n */\nfunction getTotalOrderDuration(ordersAffected){\n  let duration = moment.duration(0)\n  ordersAffected.forEach(order => {\n    duration.add(getOrderDuration(order))\n  })\n  return duration\n}\n\n/**\n * Return the order's original start time\n * Oringal start time === The order's actual start time - the order's changeover\n * @param {*} order The order needed to be calculated\n */\nfunction getInitStartTime(order){\n  const startTime = moment(order.startTime)\n  const changeover = moment.duration(order.planned_changeover_time, 'H:mm:ss')\n  return startTime.subtract(changeover)\n}\n\n/**\n * This is for the case that the dropping order is dropped to another production line\n * Find affected orders for dropping line or targeting line based on the last param passed in.\n * Return the affected orders.\n * @param {*} allData All orders\n * @param {*} order The dropping order || or the targeting order\n * @param {*} isOriginal Is finding affected orders for the original line(true)? or the targeting line(false)?\n */\nfunction findAffectedOrdersInLineChangedCase(allData, order, isOriginal){\n  const ordersWithSameLineAndDate = allData.filter(or => or.production_line === order.production_line && or.order_date === order.order_date)\n  let ordersBeingAffected = ordersWithSameLineAndDate.filter(or => or.startTime > order.startTime)\n  if (_isInsertingBefore) {\n    if (!isOriginal) {\n      ordersBeingAffected.push(order)\n    }\n  }\n  return ordersBeingAffected\n}\n\n/**\n * This is for the case that the dropping order is dropped on the same line\n * Return the affected orders\n * @param {*} allData All orders\n * @param {*} droppingOrder The dropping order\n * @param {*} targetingOrder The order the dropping order is dropped on\n * @param {*} isMovingForward Is the dropping order going forward?\n */\nfunction findAffectedOrders(allData, droppingOrder, targetingOrder, isMovingForward) {\n  const ordersWithSameLineAndDate = allData.filter(order => order.production_line === targetingOrder.production_line && order.order_date === targetingOrder.order_date)\n  let ordersBeingAffected = ordersWithSameLineAndDate.filter(order => {\n    let targetingStartTime = moment(targetingOrder.startTime)\n    let droppingStartTime = moment(droppingOrder.startTime)\n    if (isMovingForward) {\n      return order.startTime > droppingStartTime.valueOf() && order.startTime < targetingStartTime\n    }else{\n      return order.startTime < droppingStartTime.valueOf() && order.startTime > targetingStartTime\n    }\n  })\n  if (!_isInsertingBefore) {\n    if (isMovingForward) { ordersBeingAffected.push(targetingOrder) }\n  }else{\n    if (!isMovingForward) { ordersBeingAffected.push(targetingOrder) }\n  }\n  return ordersBeingAffected\n}\n\n/**\n * Check if the dropping order and the target order is in the same line\n * Return true if they are NOT in a same line\n * @param {*} droppingOrder The order the user is dropping\n * @param {*} targetingOrder The order the dropping order is dropped on\n */\nfunction isLineChanged(droppingOrder, targetingOrder){\n  return droppingOrder.production_line !== targetingOrder.production_line\n}\n\n/**\n * Return true if the dropping order has gone forward, otherwise false.\n * @param {*} droppingOrder The dropping order\n * @param {*} targetOrder The order that the dropping order is dropped on\n */\nfunction isMovingForward(droppingOrder, targetOrder) {\n  return droppingOrder.startTime < targetOrder.startTime\n}\n\n/**\n * Check if the targeting line on that date has spare space for the dropping order to fit in\n * Return true if there is space for the dropping order, otherwise false.\n * @param {*} allData The orders\n * @param {*} droppingTotalDuration The dropping order\n * @param {*} targetOrder The order that the dropping order is dropped on\n */\nfunction isLineHavingSpareTimeForTheDay(allData, droppingTotalDuration, targetOrder){\n\n  //all orders in the targeting line\n  const affectedOrders = allData.filter(order => order.production_line === targetOrder.production_line && order.order_date === targetOrder.order_date)\n  //get the max end time\n  const all_end_times = affectedOrders.map(order => order.endTime)\n  const maxEndTime = moment(Math.max(...all_end_times))  \n  //find the line's default start time and then plus next day\n  const targetDay = moment(targetOrder.order_date, 'YYYY-MM-DD')\n  const nextDay = targetDay.add(1, 'days').format('YYYY-MM-DD')\n  const nextDayStartTime = moment(nextDay + ' ' + utils.getLineStartTime(targetOrder.production_line), 'YYYY-MM-DD H:mm:ss')\n  //maxtime + dropping dura to calc the final max time\n  maxEndTime.add(droppingTotalDuration)\n\n  return maxEndTime.isSameOrBefore(nextDayStartTime)\n}"]}