{"version":3,"sources":["../src/drop_order_ctrl.js"],"names":["showForm","droppingOrder","targetOrder","_droppingOrder","_targetOrder","utils","showModal","removeListeners","addListeners","$","document","off","on","e","target","id","_isInsertingBefore","insert","closeForm","allData","dp","getData","timeAlreadyTaken","getTimeAlreadyTaken","isOver24Hours","alert","droppingTotalDuration","getOrderDuration","isLineChanged","originalLineAffectedOrders","findAffectedOrdersInLineChangedCase","targetingLineAffectedOrders","updateForLineChangedCase","ordersAffected","findAffectedOrders","isMovingForward","length","dir","text","order_id","affectedOrdersTotalDuration","getTotalOrderDuration","update","oriOrders","targOrders","dropDur","newDroppingStartTime","getInitStartTime","add","moment","duration","planned_changeover_time","endTime","sVal","valueOf","eVal","subtract","line","influx","writeLineForUpdateDragging","production_line","post","writeUrl","then","updateOriginOrdersForLineChangedCase","catch","updateTargetOrdersForLineChangedCase","promises","forEach","writeLineForTimeUpdate","order","push","Promise","all","chart","refreshPanel","droppingDur","affectedDur","affectedOrders","updateAffectedOrders","promise","targetOrderStartTime","targetOrderEndTime","diff","startTime","changeover","isOriginal","ordersWithSameLineAndDate","filter","or","order_date","ordersBeingAffected","targetingOrder","targetingStartTime","droppingStartTime","time","hours24","order_qty","planned_rate","totalDur","totalTime","ordersThatCount","sumOfTime","total","instant_search","trigger"],"mappings":"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","file":"drop_order_ctrl.js","sourcesContent":["import * as utils from './utils'\nimport * as influx from './influx_helper'\nimport * as dp from './data_processor'\nimport * as instant_search from './instant_search_ctrl'\nimport moment from 'moment'\nimport * as chart from './chart_option'\n\nlet _isInsertingBefore\nlet _droppingOrder\nlet _targetOrder\n\nconst closeForm = () => $('a#product-schedule-gantt-chart-drop-insert-actions-close-btn').trigger('click')\n\nexport function showForm(droppingOrder, targetOrder) {\n  _droppingOrder = droppingOrder\n  _targetOrder = targetOrder\n\n  //show form\n  utils.showModal('drop_insert_actions.html', {droppingOrder: droppingOrder, targetOrder: targetOrder})\n\n  removeListeners()\n  addListeners()\n}\n\nfunction removeListeners(){\n  $(document).off('click', 'input[type=\"radio\"][name=\"product-schedule-gantt-chart-drop-insert-actions-radio\"]')\n}\n\nfunction addListeners(){\n  $(document).on('click', 'input[type=\"radio\"][name=\"product-schedule-gantt-chart-drop-insert-actions-radio\"]', e => {\n    if (e.target.id === 'before') {\n      _isInsertingBefore = true\n      insert()\n    }else if (e.target.id === 'after') {\n      _isInsertingBefore = false\n      insert()\n    }else if (e.target.id === 'cancel') {\n      closeForm()\n    }\n  })\n}\n\nfunction insert(){\n  //if is over 24?\n  const allData = dp.getData()\n  const timeAlreadyTaken = getTimeAlreadyTaken(allData, _targetOrder)\n  \n  if (isOver24Hours(timeAlreadyTaken, _droppingOrder)) {\n    utils.alert('warning', 'Warning', \"There is no spare space for this order to fit in this date's schedule\")\n    return\n  }\n\n  //get dropping order's total duration\n  const droppingTotalDuration = getOrderDuration(_droppingOrder)\n\n  if (isLineChanged(_droppingOrder, _targetOrder)) {\n    //line changed\n    //find original affected orders (orders that are after the dropping order in the ori line)\n    //then find targetting affected orders (orders that are after the place that the dropping order is going to take)\n    const originalLineAffectedOrders = findAffectedOrdersInLineChangedCase(allData, _droppingOrder, true)\n    const targetingLineAffectedOrders = findAffectedOrdersInLineChangedCase(allData, _targetOrder, false)\n\n    updateForLineChangedCase(originalLineAffectedOrders, targetingLineAffectedOrders, droppingTotalDuration)\n    \n  }else {\n    //line didn't change\n    //need to know if the dragging order is moving forward or backward\n    const ordersAffected = findAffectedOrders(allData, _droppingOrder ,_targetOrder, isMovingForward(_droppingOrder, _targetOrder))\n\n    //if orders affected === 0, meaning that the targeting position is next the dropping position\n    //and the user insert the dropping order to the same direction where the dropping order is in\n    if (ordersAffected.length === 0) {\n      const dir = _isInsertingBefore ? \"before \" : \"after \"\n      const text = \"Order \" + _droppingOrder.order_id + \" is already \" + dir + \"the order \" + _targetOrder.order_id      \n      utils.alert('warning', 'Warning', text)\n      return\n    }\n\n    //get duration\n    const affectedOrdersTotalDuration = getTotalOrderDuration(ordersAffected)\n\n    //start update orders to influxdb\n    update(isMovingForward(_droppingOrder, _targetOrder), droppingTotalDuration, affectedOrdersTotalDuration, ordersAffected)\n\n  }\n}\n\nfunction updateForLineChangedCase(oriOrders, targOrders, dropDur){\n    //if left, dropping start time = target start time\n    //then target affected +++++ dropping dur\n    //then ori affected ----- dropping dur\n    let newDroppingStartTime\n    if (_isInsertingBefore) {\n      newDroppingStartTime = getInitStartTime(_targetOrder)  \n      newDroppingStartTime.add(moment.duration(_droppingOrder.planned_changeover_time, 'H:mm:ss'))    \n    }else{\n      newDroppingStartTime = moment(_targetOrder.endTime)\n      newDroppingStartTime.add(moment.duration(_droppingOrder.planned_changeover_time, 'H:mm:ss'))\n    }\n\n    //Get new dropping order's start time value and end time value\n    const sVal = newDroppingStartTime.valueOf()\n    const eVal = newDroppingStartTime.add(moment.duration(dropDur.valueOf())\n      .subtract(moment.duration(_droppingOrder.planned_changeover_time, 'H:mm:ss'))).valueOf()\n\n    const line = influx.writeLineForUpdateDragging(_droppingOrder, sVal, eVal, _targetOrder.production_line)\n    \n    utils.post(influx.writeUrl, line).then(res => {\n      updateOriginOrdersForLineChangedCase(oriOrders, dropDur, targOrders)\n    }).catch(e => {\n      closeForm()\n      utils.alert('error', 'Error', 'An error occurred when updated the order : ' + e)\n    })    \n}\n\nfunction updateOriginOrdersForLineChangedCase(oriOrders, dropDur, targOrders){\n  //then ori affected ----- dropping dur\n  if (oriOrders.length === 0) {\n    updateTargetOrdersForLineChangedCase(targOrders, dropDur)\n  }\n\n  let promises = []\n  oriOrders.forEach(order => {\n    const line = influx.writeLineForTimeUpdate(order, dropDur, 'subtract')\n    promises.push(utils.post(influx.writeUrl, line))\n  })\n  Promise.all(promises).then(res => {\n    updateTargetOrdersForLineChangedCase(targOrders, dropDur)\n  }).catch(e => {\n    closeForm()\n    utils.alert('error', 'Error', 'An error occurred when updated the order : ' + e)\n  })\n}\n\nfunction updateTargetOrdersForLineChangedCase(targOrders, dropDur){\n  if (targOrders.length === 0) {\n    closeForm()\n    utils.alert('success', 'Successful', 'Order has been successfully updated')\n    chart.refreshPanel()\n  }\n  //then target affected +++++ dropping dur\n  let promises = []\n  targOrders.forEach(order => {\n    const line = influx.writeLineForTimeUpdate(order, dropDur, 'add')\n    promises.push(utils.post(influx.writeUrl, line))\n  })\n  Promise.all(promises).then(res => {\n    closeForm()\n    utils.alert('success', 'Successful', 'Order has been successfully updated')\n    chart.refreshPanel()\n  }).catch(e => {\n    closeForm()\n    utils.alert('error', 'Error', 'An error occurred when updated the order : ' + e)\n  })\n}\n\nfunction update(isMovingForward, droppingDur, affectedDur, affectedOrders){\n  if (isMovingForward) {\n    //if forward, dropping order +++++ all affected orders' total dur changeovers included\n    const line = influx.writeLineForTimeUpdate(_droppingOrder, affectedDur, 'add')\n    utils.post(influx.writeUrl, line).then(res => {\n      updateAffectedOrders(affectedOrders, droppingDur, isMovingForward)\n    }).catch(e => {\n      closeForm()\n      utils.alert('error', 'Error', 'An error occurred when updated the order : ' + e)\n    })\n  }else{\n    //if backward and inserting before, dropping order ----- all affected orders' total dur changeovers included\n    const line = influx.writeLineForTimeUpdate(_droppingOrder, affectedDur, 'subtract')\n    utils.post(influx.writeUrl, line).then(res => {\n      updateAffectedOrders(affectedOrders, droppingDur, isMovingForward)\n    }).catch(e => {\n      closeForm()\n      utils.alert('error', 'Error', 'An error occurred when updated the order : ' + e)\n    })\n  }\n}\n\nfunction updateAffectedOrders(affectedOrders, droppingDur, isMovingForward){\n  let promise = []\n\n  if (isMovingForward) {\n    //all affected orders ----- dropping total dur\n    affectedOrders.forEach(order => {\n      const line = influx.writeLineForTimeUpdate(order, droppingDur, 'subtract')\n      promise.push(utils.post(influx.writeUrl, line))\n    })\n  }else {\n    //all affected orders ++++++ dropping total dur\n    affectedOrders.forEach(order => {\n      const line = influx.writeLineForTimeUpdate(order, droppingDur, 'add')\n      promise.push(utils.post(influx.writeUrl, line))\n    })\n  }\n\n  Promise.all(promise).then(res => {\n    closeForm()\n    utils.alert('success', 'Successful', 'Order has been successfully updated')\n    chart.refreshPanel()\n  }).catch(e => {\n    closeForm()\n    utils.alert('error', 'Error', 'An error occurred when updated the order : ' + e)\n  })\n}\n\n/**\n * Calculate an order's total duration, then return the duration that is moment duration obj\n * @param {Obj} order The order obj\n */\nfunction getOrderDuration(order){\n  const targetOrderStartTime = getInitStartTime(order)\n  const targetOrderEndTime = moment(order.endTime)\n  return moment.duration(targetOrderEndTime.diff(targetOrderStartTime))\n}\n\n/**\n * Calculate an array of orders' total duration, then return the duration that is moment duration obj\n * @param {Obj} ordersAffected The array of obj\n */\nfunction getTotalOrderDuration(ordersAffected){\n  let duration = moment.duration(0)\n  ordersAffected.forEach(order => {\n    duration.add(getOrderDuration(order))\n  })\n  return duration\n}\n\nfunction getInitStartTime(order){\n  const startTime = moment(order.startTime)\n  const changeover = moment.duration(order.planned_changeover_time, 'H:mm:ss')\n  return startTime.subtract(changeover)\n}\n\nfunction findAffectedOrdersInLineChangedCase(allData, order, isOriginal){\n  const ordersWithSameLineAndDate = allData.filter(or => or.production_line === order.production_line && or.order_date === order.order_date)\n  let ordersBeingAffected = ordersWithSameLineAndDate.filter(or => or.startTime > order.startTime)\n  if (_isInsertingBefore) {\n    if (!isOriginal) {\n      ordersBeingAffected.push(order)\n    }\n  }\n  return ordersBeingAffected\n}\n\nfunction findAffectedOrders(allData, droppingOrder, targetingOrder, isMovingForward) {\n  const ordersWithSameLineAndDate = allData.filter(order => order.production_line === targetingOrder.production_line && order.order_date === targetingOrder.order_date)\n  let ordersBeingAffected = ordersWithSameLineAndDate.filter(order => {\n    let targetingStartTime = moment(targetingOrder.startTime)\n    let droppingStartTime = moment(droppingOrder.startTime)\n    if (isMovingForward) {\n      return order.startTime > droppingStartTime.valueOf() && order.startTime < targetingStartTime\n    }else{\n      return order.startTime < droppingStartTime.valueOf() && order.startTime > targetingStartTime\n    }\n  })\n  if (!_isInsertingBefore) {\n    if (isMovingForward) { ordersBeingAffected.push(targetingOrder) }\n  }else{\n    if (!isMovingForward) { ordersBeingAffected.push(targetingOrder) }\n  }\n  return ordersBeingAffected\n}\n\nfunction isLineChanged(droppingOrder, targetingOrder){\n  return droppingOrder.production_line !== targetingOrder.production_line\n}\n\nfunction isMovingForward(droppingOrder, targetOrder) {\n  return droppingOrder.startTime < targetOrder.startTime\n}\n\n/**\n * Check if the order is over 24 hours, return true if it is.\n * @param {*} time The total time that has already been taken on that line and that date\n */\nfunction isOver24Hours(time, droppingOrder){\n  const hours24 = moment.duration(24,'hours').valueOf()\n\n  const duration = moment.duration(droppingOrder.order_qty / droppingOrder.planned_rate, 'hours')\n  const changeover = moment.duration(droppingOrder.planned_changeover_time, 'H:mm:ss')\n  const totalDur = duration.add(changeover)\n  const totalTime = time + totalDur.valueOf()  \n  \n  return totalTime > hours24\n}\n\n/**\n * The alldata and the user input the calculate the time in the line that the editing order is going to go to\n * return the total time that has been taken.\n * @param {*} allData All the orders that is being passed in and displayed in this panel\n */\nfunction getTimeAlreadyTaken(allData, targetOrder){\n  const ordersWithSameLineAndDate = allData.filter(order => order.production_line === targetOrder.production_line && order.order_date === targetOrder.order_date)\n  const ordersThatCount = ordersWithSameLineAndDate.filter(order => order.order_id !== _droppingOrder.order_id)\n\n  if (ordersThatCount.length === 0) { return 0 }\n\n  let sumOfTime = 0\n  ordersThatCount.forEach(order => {\n    const changeover = moment.duration(order.planned_changeover_time, 'H:mm:ss')\n    const duration = moment.duration((order.order_qty / order.planned_rate), 'hours')\n    const total = changeover.add(duration).valueOf()\n    sumOfTime += total\n  })\n  \n  return sumOfTime\n}"]}