{"version":3,"sources":["../src/drop_order_ctrl.js"],"names":["showForm","droppingOrder","targetOrder","_droppingOrder","_targetOrder","targeting_date","order_date","utils","showModal","removeListeners","addListeners","$","document","off","on","e","target","id","_isInsertingBefore","insert","closeForm","allData","dp","getData","droppingTotalDuration","getOrderDuration","isLineHavingSpareTimeForTheDay","alert","originalLineAffectedOrders","findAffectedOrdersInLineChangedCase","targetingLineAffectedOrders","isLineChanged","updateForLineChangedCase","isDateChanged","ordersAffected","findAffectedOrders","isMovingForward","length","dir","text","order_id","affectedOrdersTotalDuration","getTotalOrderDuration","update","oriOrders","targOrders","dropDur","newDroppingStartTime","getInitStartTime","add","moment","duration","planned_changeover_time","endTime","sVal","valueOf","eVal","subtract","line","influx","writeLineForUpdateDragging","production_line","post","writeUrl","then","res","updateOriginOrdersForLineChangedCase","catch","updateTargetOrdersForLineChangedCase","promises","forEach","order","writeLineForTimeUpdate","push","Promise","all","chart","refreshDashboard","droppingDur","affectedDur","affectedOrders","updateAffectedOrders","promise","targetOrderStartTime","targetOrderEndTime","diff","startTime","changeover","isOriginal","ordersWithSameLineAndDate","filter","or","ordersBeingAffected","targetingOrder","targetingStartTime","droppingStartTime","all_end_times","map","maxEndTime","Math","max","targetDay","nextDay","format","nextDayStartTime","getLineStartTime","isSameOrBefore","instant_search","trigger"],"mappings":"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","file":"drop_order_ctrl.js","sourcesContent":["import * as utils from './utils';\nimport * as influx from './influx_helper';\nimport * as dp from './data_processor';\nimport * as instant_search from './instant_search_ctrl';\nimport moment from 'moment';\nimport * as chart from './chart_option';\n\nlet _isInsertingBefore;\nlet _droppingOrder;\nlet _targetOrder;\n\nconst closeForm = () => $('a#product-schedule-gantt-chart-drop-insert-actions-close-btn').trigger('click');\n\nexport function showForm(droppingOrder, targetOrder) {\n\t_droppingOrder = droppingOrder;\n\t_targetOrder = targetOrder;\n\t_droppingOrder.targeting_date = _targetOrder.order_date;\n\n\t//show form\n\tutils.showModal('drop_insert_actions.html', { droppingOrder: droppingOrder, targetOrder: targetOrder });\n\n\tremoveListeners();\n\taddListeners();\n}\n\nfunction removeListeners() {\n\t$(document).off('click', 'input[type=\"radio\"][name=\"product-schedule-gantt-chart-drop-insert-actions-radio\"]');\n}\n\nfunction addListeners() {\n\t$(\n\t\tdocument\n\t).on('click', 'input[type=\"radio\"][name=\"product-schedule-gantt-chart-drop-insert-actions-radio\"]', (e) => {\n\t\tif (e.target.id === 'before') {\n\t\t\t_isInsertingBefore = true;\n\t\t\tinsert();\n\t\t} else if (e.target.id === 'after') {\n\t\t\t_isInsertingBefore = false;\n\t\t\tinsert();\n\t\t} else if (e.target.id === 'cancel') {\n\t\t\tcloseForm();\n\t\t}\n\t});\n}\n\nfunction insert() {\n\tconst allData = dp.getData();\n\n\t//get dropping order's total duration\n\tconst droppingTotalDuration = getOrderDuration(_droppingOrder);\n\n\tif (!isLineHavingSpareTimeForTheDay(allData, droppingTotalDuration, _targetOrder)) {\n\t\tutils.alert('warning', 'Warning', \"There is no spare space for this order to fit in this date's schedule\");\n\t\treturn;\n\t}\n\n\t//find original affected orders (orders that are after the dropping order in the ori line)\n\t//then find targetting affected orders (orders that are after the place that the dropping order is going to take)\n\tconst originalLineAffectedOrders = findAffectedOrdersInLineChangedCase(allData, _droppingOrder, true);\n\tconst targetingLineAffectedOrders = findAffectedOrdersInLineChangedCase(allData, _targetOrder, false);\n\n\tif (isLineChanged(_droppingOrder, _targetOrder)) {\n\t\tupdateForLineChangedCase(originalLineAffectedOrders, targetingLineAffectedOrders, droppingTotalDuration);\n\t} else {\n\t\tif (isDateChanged(_droppingOrder, _targetOrder)) {\n\t\t\t//......\n\t\t\tupdateForLineChangedCase(originalLineAffectedOrders, targetingLineAffectedOrders, droppingTotalDuration);\n\t\t\t//......\n\t\t} else {\n\t\t\t//line didn't change\n\t\t\t//need to know if the dragging order is moving forward or backward\n\t\t\tconst ordersAffected = findAffectedOrders(\n\t\t\t\tallData,\n\t\t\t\t_droppingOrder,\n\t\t\t\t_targetOrder,\n\t\t\t\tisMovingForward(_droppingOrder, _targetOrder)\n\t\t\t);\n\n\t\t\t//if orders affected === 0, meaning that the targeting position is next the dropping position\n\t\t\t//and the user insert the dropping order to the same direction where the dropping order is in\n\t\t\tif (ordersAffected.length === 0) {\n\t\t\t\tif (_droppingOrder.order_date === _targetOrder.order_date) {\n\t\t\t\t\tconst dir = _isInsertingBefore ? 'before ' : 'after ';\n\t\t\t\t\tconst text =\n\t\t\t\t\t\t'Order ' +\n\t\t\t\t\t\t_droppingOrder.order_id +\n\t\t\t\t\t\t' is already ' +\n\t\t\t\t\t\tdir +\n\t\t\t\t\t\t'the order ' +\n\t\t\t\t\t\t_targetOrder.order_id;\n\t\t\t\t\tutils.alert('warning', 'Warning', text);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t//get duration\n\t\t\tconst affectedOrdersTotalDuration = getTotalOrderDuration(ordersAffected);\n\n\t\t\t//start update orders to influxdb\n\t\t\tupdate(\n\t\t\t\tisMovingForward(_droppingOrder, _targetOrder),\n\t\t\t\tdroppingTotalDuration,\n\t\t\t\taffectedOrdersTotalDuration,\n\t\t\t\tordersAffected\n\t\t\t);\n\t\t}\n\t}\n}\n\nfunction isDateChanged(droppingOrder, targetOrder) {\n\treturn droppingOrder.order_date !== targetOrder.order_date;\n}\n\nfunction updateForLineChangedCase(oriOrders, targOrders, dropDur) {\n\t//if left, dropping start time = target start time\n\t//then target affected +++++ dropping dur\n\t//then ori affected ----- dropping dur\n\tlet newDroppingStartTime;\n\tif (_isInsertingBefore) {\n\t\tnewDroppingStartTime = getInitStartTime(_targetOrder);\n\t\tnewDroppingStartTime.add(moment.duration(_droppingOrder.planned_changeover_time, 'H:mm:ss'));\n\t} else {\n\t\tnewDroppingStartTime = moment(_targetOrder.endTime);\n\t\tnewDroppingStartTime.add(moment.duration(_droppingOrder.planned_changeover_time, 'H:mm:ss'));\n\t}\n\n\t//Get new dropping order's start time value and end time value\n\tconst sVal = newDroppingStartTime.valueOf();\n\tconst eVal = newDroppingStartTime\n\t\t.add(\n\t\t\tmoment\n\t\t\t\t.duration(dropDur.valueOf())\n\t\t\t\t.subtract(moment.duration(_droppingOrder.planned_changeover_time, 'H:mm:ss'))\n\t\t)\n\t\t.valueOf();\n\n\tconst line = influx.writeLineForUpdateDragging(_droppingOrder, sVal, eVal, _targetOrder.production_line);\n\n\tutils\n\t\t.post(influx.writeUrl, line)\n\t\t.then((res) => {\n\t\t\tupdateOriginOrdersForLineChangedCase(oriOrders, dropDur, targOrders);\n\t\t})\n\t\t.catch((e) => {\n\t\t\tcloseForm();\n\t\t\tutils.alert('error', 'Error', 'An error occurred when updated the order : ' + e);\n\t\t});\n}\n\nfunction updateOriginOrdersForLineChangedCase(oriOrders, dropDur, targOrders) {\n\tif (oriOrders.length === 0) {\n\t\tupdateTargetOrdersForLineChangedCase(targOrders, dropDur);\n\t}\n\n\tlet promises = [];\n\toriOrders.forEach((order) => {\n\t\tconst line = influx.writeLineForTimeUpdate(order, dropDur, 'subtract');\n\t\tpromises.push(utils.post(influx.writeUrl, line));\n\t});\n\tPromise.all(promises)\n\t\t.then((res) => {\n\t\t\tupdateTargetOrdersForLineChangedCase(targOrders, dropDur);\n\t\t})\n\t\t.catch((e) => {\n\t\t\tcloseForm();\n\t\t\tutils.alert('error', 'Error', 'An error occurred when updated the order : ' + e);\n\t\t});\n}\n\nfunction updateTargetOrdersForLineChangedCase(targOrders, dropDur) {\n\tif (targOrders.length === 0) {\n\t\tcloseForm();\n\t\tutils.alert('success', 'Successful', 'Order has been successfully updated');\n\t\tchart.refreshDashboard();\n\t}\n\t//then target affected +++++ dropping dur\n\tlet promises = [];\n\ttargOrders.forEach((order) => {\n\t\tconst line = influx.writeLineForTimeUpdate(order, dropDur, 'add');\n\t\tpromises.push(utils.post(influx.writeUrl, line));\n\t});\n\tPromise.all(promises)\n\t\t.then((res) => {\n\t\t\tcloseForm();\n\t\t\tutils.alert('success', 'Successful', 'Order has been successfully updated');\n\t\t\tchart.refreshDashboard();\n\t\t})\n\t\t.catch((e) => {\n\t\t\tcloseForm();\n\t\t\tutils.alert('error', 'Error', 'An error occurred when updated the order : ' + e);\n\t\t});\n}\n\nfunction update(isMovingForward, droppingDur, affectedDur, affectedOrders) {\n\tif (isMovingForward) {\n\t\t//if forward, dropping order +++++ all affected orders' total dur changeovers included\n\t\tconst line = influx.writeLineForTimeUpdate(_droppingOrder, affectedDur, 'add');\n\t\tutils\n\t\t\t.post(influx.writeUrl, line)\n\t\t\t.then((res) => {\n\t\t\t\tupdateAffectedOrders(affectedOrders, droppingDur, isMovingForward);\n\t\t\t})\n\t\t\t.catch((e) => {\n\t\t\t\tcloseForm();\n\t\t\t\tutils.alert('error', 'Error', 'An error occurred when updated the order : ' + e);\n\t\t\t});\n\t} else {\n\t\t//if backward and inserting before, dropping order ----- all affected orders' total dur changeovers included\n\t\tconst line = influx.writeLineForTimeUpdate(_droppingOrder, affectedDur, 'subtract');\n\t\tutils\n\t\t\t.post(influx.writeUrl, line)\n\t\t\t.then((res) => {\n\t\t\t\tupdateAffectedOrders(affectedOrders, droppingDur, isMovingForward);\n\t\t\t})\n\t\t\t.catch((e) => {\n\t\t\t\tcloseForm();\n\t\t\t\tutils.alert('error', 'Error', 'An error occurred when updated the order : ' + e);\n\t\t\t});\n\t}\n}\n\nfunction updateAffectedOrders(affectedOrders, droppingDur, isMovingForward) {\n\tlet promise = [];\n\n\tif (isMovingForward) {\n\t\t//all affected orders ----- dropping total dur\n\t\taffectedOrders.forEach((order) => {\n\t\t\tconst line = influx.writeLineForTimeUpdate(order, droppingDur, 'subtract');\n\t\t\tpromise.push(utils.post(influx.writeUrl, line));\n\t\t});\n\t} else {\n\t\t//all affected orders ++++++ dropping total dur\n\t\taffectedOrders.forEach((order) => {\n\t\t\tconst line = influx.writeLineForTimeUpdate(order, droppingDur, 'add');\n\t\t\tpromise.push(utils.post(influx.writeUrl, line));\n\t\t});\n\t}\n\n\tPromise.all(promise)\n\t\t.then((res) => {\n\t\t\tcloseForm();\n\t\t\tutils.alert('success', 'Successful', 'Order has been successfully updated');\n\t\t\tchart.refreshDashboard();\n\t\t})\n\t\t.catch((e) => {\n\t\t\tcloseForm();\n\t\t\tutils.alert('error', 'Error', 'An error occurred when updated the order : ' + e);\n\t\t});\n}\n\n/**\n * Calculate an order's total duration, then return the duration that is moment duration obj\n * @param {Obj} order The order obj\n */\nfunction getOrderDuration(order) {\n\tconst targetOrderStartTime = getInitStartTime(order);\n\tconst targetOrderEndTime = moment(order.endTime);\n\treturn moment.duration(targetOrderEndTime.diff(targetOrderStartTime));\n}\n\n/**\n * Calculate an array of orders' total duration, then return the duration that is moment duration obj\n * @param {Obj} ordersAffected The array of obj\n */\nfunction getTotalOrderDuration(ordersAffected) {\n\tlet duration = moment.duration(0);\n\tordersAffected.forEach((order) => {\n\t\tduration.add(getOrderDuration(order));\n\t});\n\treturn duration;\n}\n\n/**\n * Return the order's original start time\n * Oringal start time === The order's actual start time - the order's changeover\n * @param {*} order The order needed to be calculated\n */\nfunction getInitStartTime(order) {\n\tconst startTime = moment(order.startTime);\n\tconst changeover = moment.duration(order.planned_changeover_time, 'H:mm:ss');\n\treturn startTime.subtract(changeover);\n}\n\n/**\n * This is for the case that the dropping order is dropped to another production line\n * Find affected orders for dropping line or targeting line based on the last param passed in.\n * Return the affected orders.\n * @param {*} allData All orders\n * @param {*} order The dropping order || or the targeting order\n * @param {*} isOriginal Is finding affected orders for the original line(true)? or the targeting line(false)?\n */\nfunction findAffectedOrdersInLineChangedCase(allData, order, isOriginal) {\n\tconst ordersWithSameLineAndDate = allData.filter(\n\t\t(or) => or.production_line === order.production_line && or.order_date === order.order_date\n\t);\n\tlet ordersBeingAffected = ordersWithSameLineAndDate.filter((or) => or.startTime > order.startTime);\n\tif (_isInsertingBefore) {\n\t\tif (!isOriginal) {\n\t\t\tordersBeingAffected.push(order);\n\t\t}\n\t}\n\treturn ordersBeingAffected;\n}\n\n/**\n * This is for the case that the dropping order is dropped on the same line\n * Return the affected orders\n * @param {*} allData All orders\n * @param {*} droppingOrder The dropping order\n * @param {*} targetingOrder The order the dropping order is dropped on\n * @param {*} isMovingForward Is the dropping order going forward?\n */\nfunction findAffectedOrders(allData, droppingOrder, targetingOrder, isMovingForward) {\n\tconst ordersWithSameLineAndDate = allData.filter(\n\t\t(order) =>\n\t\t\torder.production_line === targetingOrder.production_line && order.order_date === targetingOrder.order_date\n\t);\n\tlet ordersBeingAffected = ordersWithSameLineAndDate.filter((order) => {\n\t\tlet targetingStartTime = moment(targetingOrder.startTime);\n\t\tlet droppingStartTime = moment(droppingOrder.startTime);\n\t\tif (isMovingForward) {\n\t\t\treturn order.startTime > droppingStartTime.valueOf() && order.startTime < targetingStartTime;\n\t\t} else {\n\t\t\treturn order.startTime < droppingStartTime.valueOf() && order.startTime > targetingStartTime;\n\t\t}\n\t});\n\tif (!_isInsertingBefore) {\n\t\tif (isMovingForward) {\n\t\t\tordersBeingAffected.push(targetingOrder);\n\t\t}\n\t} else {\n\t\tif (!isMovingForward) {\n\t\t\tordersBeingAffected.push(targetingOrder);\n\t\t}\n\t}\n\treturn ordersBeingAffected;\n}\n\n/**\n * Check if the dropping order and the target order is in the same line\n * Return true if they are NOT in a same line\n * @param {*} droppingOrder The order the user is dropping\n * @param {*} targetingOrder The order the dropping order is dropped on\n */\nfunction isLineChanged(droppingOrder, targetingOrder) {\n\treturn droppingOrder.production_line !== targetingOrder.production_line;\n}\n\n/**\n * Return true if the dropping order has gone forward, otherwise false.\n * @param {*} droppingOrder The dropping order\n * @param {*} targetOrder The order that the dropping order is dropped on\n */\nfunction isMovingForward(droppingOrder, targetOrder) {\n\treturn droppingOrder.startTime < targetOrder.startTime;\n}\n\n/**\n * Check if the targeting line on that date has spare space for the dropping order to fit in\n * Return true if there is space for the dropping order, otherwise false.\n * @param {*} allData The orders\n * @param {*} droppingTotalDuration The dropping order\n * @param {*} targetOrder The order that the dropping order is dropped on\n */\nfunction isLineHavingSpareTimeForTheDay(allData, droppingTotalDuration, targetOrder) {\n\t//all orders in the targeting line\n\tconst affectedOrders = allData.filter(\n\t\t(order) => order.production_line === targetOrder.production_line && order.order_date === targetOrder.order_date\n\t);\n\t//get the max end time\n\tconst all_end_times = affectedOrders.map((order) => order.endTime);\n\tconst maxEndTime = moment(Math.max(...all_end_times));\n\t//find the line's default start time and then plus next day\n\tconst targetDay = moment(targetOrder.order_date, 'YYYY-MM-DD');\n\tconst nextDay = targetDay.add(1, 'days').format('YYYY-MM-DD');\n\tconst nextDayStartTime = moment(\n\t\tnextDay + ' ' + utils.getLineStartTime(targetOrder.production_line),\n\t\t'YYYY-MM-DD H:mm:ss'\n\t);\n\t//maxtime + dropping dura to calc the final max time\n\tmaxEndTime.add(droppingTotalDuration);\n\n\treturn maxEndTime.isSameOrBefore(nextDayStartTime);\n}\n"]}