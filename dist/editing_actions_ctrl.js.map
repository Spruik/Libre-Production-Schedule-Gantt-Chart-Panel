{"version":3,"sources":["../src/editing_actions_ctrl.js"],"names":["showActions","targetOrder","_targetOrder","getProductsAndEquipment","callback","utils","showModal","_tryCatchCounter","tryInitialisingForm","removeListeners","addListeners","setTimeout","initialiseForm","e","closeForm","alert","$","datepicker","orientation","todayBtn","format","autoclose","timepicker","showMeridian","showSeconds","maxHours","minuteStep","secondStep","defaultTime","icons","up","down","instant_search","enableInstantSearch","_products","_equipment","prefill","val","order_id","order_qty","production_line","attr","show","product_id","product_desc","order_date","planned_rate","planned_changeover_time","updateDuration","document","off","on","data","serializeArray","value","submitOrder","inputValues","orderId","orderQty","productionLine","product","date","plannedRate","duration","changeover","startTime","endTime","isValueValid","updateOrder","allData","dp","getData","ordersBeingAffected","getOrdersBeingAffect","_ordersBeingAffected","isLineHavingSpareTimeForTheDay","updateOldAndNewOrders","ordersInOriginalLineAndDate","filter","order","moment","valueOf","isLineChanged","affectedOrders","targetDayStartTime","getLineStartTime","targetDayStartTimeText","nextDayStartTime","add","totalDur","length","isSameOrBefore","all_end_times","map","maxEndTime","Math","max","updateWithRemoving","line","influx","writeLineForUpdateWithRemovingTime","status","post","writeUrl","then","difference","getDiff","updateAffectedOrders","chart","refreshDashboard","catch","updateWithChanging","originalStartTime","changeoverDiff","subtract","oldTotal","newTotal","console","log","writeLineForUpdateWithChangingTime","promises","forEach","writeLineForTimeUpdate","prom","push","Promise","all","diff","writeLineForUpdate","cons","STATE_REPLACED","isDateChanged","isTagsChanged","split","dateRegExp","RegExp","prodList","reduce","arr","p","str","id","productionLineList","equ","site","area","findDistinct","indexOf","test","qty","rate","durationHrs","Number","parseFloat","toFixed","momentDuration","durationText","getDurationText","month","get","days","hrs","mins","text","productsUrl","postgRestHost","equipmentsUrl","res","trigger"],"mappings":"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","file":"editing_actions_ctrl.js","sourcesContent":["import * as utils from './utils';\nimport * as influx from './influx_helper';\nimport * as dp from './data_processor';\nimport * as instant_search from './instant_search_ctrl';\nimport * as cons from './constans';\nimport moment from 'moment';\nimport * as chart from './chart_option';\n\nlet _targetOrder;\nlet _ordersBeingAffected;\nlet _tryCatchCounter = 1;\nlet _products;\nlet _equipment;\n\nconst closeForm = () =>\n  $('a#product-schedule-gantt-chart-order-form-close-btn').trigger('click');\n\n/**\n * Show edition order form\n * @param {*} targetOrder The order that the user want to make edition on\n */\nexport function showActions(targetOrder) {\n  _targetOrder = targetOrder;\n\n  //get products data and equipment from postgres database\n  getProductsAndEquipment(callback);\n\n  function callback() {\n    utils.showModal('order_form.html', {});\n\n    //try initialize the form\n    _tryCatchCounter = 1;\n    tryInitialisingForm();\n\n    //set listeners\n    removeListeners();\n    addListeners();\n  }\n}\n\nfunction tryInitialisingForm() {\n  setTimeout(() => {\n    try {\n      initialiseForm();\n    } catch (e) {\n      if (_tryCatchCounter < 15) {\n        //maximunm re-init the form over 15 times\n        tryInitialisingForm();\n        _tryCatchCounter++;\n      } else {\n        closeForm();\n        utils.alert(\n          'error',\n          'Error',\n          'Form initialisation failed, please try agian : ' + e\n        );\n      }\n    }\n  }, 200);\n}\n\nfunction initialiseForm() {\n  //init datepicker\n  $('#datepicker').datepicker({\n    orientation: 'top',\n    todayBtn: 'linked',\n    format: 'yyyy-mm-dd',\n    autoclose: true\n  });\n\n  //init timepicker\n  $('#changeover-minutes-picker').timepicker({\n    showMeridian: false,\n    showSeconds: true,\n    maxHours: 100,\n    minuteStep: 1,\n    secondStep: 1,\n    defaultTime: '00:00:00',\n    icons: {\n      up: 'fa fa-chevron-up',\n      down: 'fa fa-chevron-down'\n    }\n  });\n\n  //init the instant search function\n  instant_search.enableInstantSearch(_products, _equipment);\n\n  //prefill date field and production line\n  prefill();\n}\n\nfunction prefill() {\n  $('input.prod-sche-gt-chart-datalist-input#order-id').val(\n    _targetOrder.order_id\n  );\n  $('input.prod-sche-gt-chart-datalist-input#order-qty').val(\n    _targetOrder.order_qty\n  );\n  $(\n    'input.prod-sche-gt-chart-datalist-input#datalist-input-production-line'\n  ).val(_targetOrder.production_line);\n  $(\n    'input.prod-sche-gt-chart-datalist-input#datalist-input-production-line'\n  ).attr('readonly', false);\n  $('i.prod-sche-gt-chart-dl-i#datalist-icon').show();\n  $('input.prod-sche-gt-chart-datalist-input#datalist-input-products').val(\n    _targetOrder.product_id + ' | ' + _targetOrder.product_desc\n  );\n  $('input.prod-sche-gt-chart-datalist-input#datepicker').val(\n    _targetOrder.order_date\n  );\n  $('input.prod-sche-gt-chart-datalist-input#datepicker').attr(\n    'readonly',\n    false\n  );\n  $('input.prod-sche-gt-chart-datalist-input#planned-rate').val(\n    _targetOrder.planned_rate\n  );\n  $('input.prod-sche-gt-chart-datalist-input#changeover-minutes-picker').val(\n    _targetOrder.planned_changeover_time\n  );\n  updateDuration(_targetOrder.order_qty, _targetOrder.planned_rate);\n}\n\nfunction removeListeners() {\n  $(document).off('input', 'input#planned-rate, input#order-qty');\n  $(document).off(\n    'click',\n    'button#product-schedule-gantt-chart-order-form-submitBtn'\n  );\n}\n\nfunction addListeners() {\n  $(document).on('input', 'input#planned-rate, input#order-qty', () => {\n    let data = $(\n      'form#product-schedule-gantt-chart-order-form'\n    ).serializeArray();\n    updateDuration(data[1].value, data[5].value);\n  });\n\n  $(document).on(\n    'click',\n    'button#product-schedule-gantt-chart-order-form-submitBtn',\n    e => {\n      let data = $(\n        'form#product-schedule-gantt-chart-order-form'\n      ).serializeArray();\n      submitOrder(data);\n    }\n  );\n}\n\nfunction submitOrder(data) {\n  const inputValues = {\n    orderId: data[0].value,\n    orderQty: data[1].value,\n    productionLine: data[2].value,\n    product: data[3].value,\n    date: data[4].value,\n    plannedRate: data[5].value,\n    duration: data[6].value,\n    changeover: data[7].value,\n    startTime: _targetOrder.startTime,\n    endTime: _targetOrder.endTime\n  };\n\n  if (isValueValid(inputValues)) {\n    updateOrder(inputValues);\n  }\n}\n\nfunction updateOrder(inputValues) {\n  const allData = dp.getData();\n\n  //the orders that are in the original line that this order was in and that are being affected because this order changes line\n  const ordersBeingAffected = getOrdersBeingAffect(allData, inputValues);\n  _ordersBeingAffected = ordersBeingAffected;\n\n  if (!isLineHavingSpareTimeForTheDay(allData, inputValues, _targetOrder)) {\n    utils.alert(\n      'warning',\n      'Warning',\n      \"There is no spare space for this order to fit in this date's schedule\"\n    );\n    return;\n  }\n\n  // if (isTagsChanged(inputValues)) {\n\n  updateOldAndNewOrders(inputValues);\n\n  // }else {\n  //   //in here, check if the line has changed, if yes, meaning that the order is going to another line\n  //   //so also update all affectingOrders(orders that are in the original line and that are after this order)\n  //   if (isLineChanged(inputValues)) {\n  //     //save the order directly with removing its starttime and endtime to let the initialiser to init it again\n  //     //coz it is changing line, so just simply remove the start time and end time\n  //     updateWithRemoving(inputValues)\n  //   }else{\n  //     if (isDateChanged(inputValues)) {\n  //       updateWithRemoving(inputValues)\n  //     }else{\n  //       //save the order directly with changing its starttime and endtime\n  //       updateWithChanging(inputValues)\n  //     }\n  //   }\n  // }\n}\n\n/**\n * get alldata and the user input to filter all affected orders.\n * These orders will be the ones that are in the original line with the same date.\n * @param {*} allData All the orders that is being passed in and displayed in this panel\n * @param {*} inputValues Inputs that the user entered in this order edition form\n */\nfunction getOrdersBeingAffect(allData, inputValues) {\n  const ordersInOriginalLineAndDate = allData.filter(\n    order =>\n      order.production_line === _targetOrder.production_line &&\n      order.order_date === _targetOrder.order_date\n  );\n  return ordersInOriginalLineAndDate.filter(order => {\n    let endTime = moment(inputValues.endTime);\n    return (\n      order.startTime >= endTime.valueOf() &&\n      order.order_date === _targetOrder.order_date\n    );\n  });\n}\n\n/**\n * Compares the user input and the original order to see if the line has been changed.\n * return true if it is.\n * @param {*} inputValues The user input\n */\nfunction isLineChanged(inputValues) {\n  return inputValues.productionLine !== _targetOrder.production_line;\n}\n\nfunction isLineHavingSpareTimeForTheDay(allData, inputValues, targetOrder) {\n  //all orders in the targeting line (except the editing order itself (if line not changed))\n  let affectedOrders = allData.filter(\n    order =>\n      order.production_line === inputValues.productionLine &&\n      order.order_date === inputValues.date\n  );\n  affectedOrders = affectedOrders.filter(\n    order => order.order_id !== targetOrder.order_id\n  );\n\n  //find the line's default start time and then plus next day\n  const targetDayStartTime = moment(\n    moment(inputValues.date, 'YYYY-MM-DD').format('YYYY-MM-DD') +\n      ' ' +\n      utils.getLineStartTime(targetOrder.production_line),\n    'YYYY-MM-DD H:mm:ss'\n  );\n  const targetDayStartTimeText = targetDayStartTime.format(\n    'YYYY-MM-DD H:mm:ss'\n  );\n  const nextDayStartTime = moment(\n    targetDayStartTimeText,\n    'YYYY-MM-DD H:mm:ss'\n  ).add(1, 'days');\n\n  //calc edited order's duration\n  const duration = moment.duration(\n    inputValues.orderQty / (inputValues.plannedRate * 60),\n    'hours'\n  );\n  const changeover = moment.duration(inputValues.changeover, 'H:mm:ss');\n  const totalDur = duration.add(changeover);\n\n  //if no affected orders, see if target dat start time + totaldur <= nextdatstarttime\n  if (affectedOrders.length === 0) {\n    return targetDayStartTime.add(totalDur).isSameOrBefore(nextDayStartTime);\n  }\n\n  //get the max end time\n  const all_end_times = affectedOrders.map(order => order.endTime);\n  const maxEndTime = moment(Math.max(...all_end_times));\n  maxEndTime.add(totalDur);\n\n  return maxEndTime.isSameOrBefore(nextDayStartTime);\n}\n\n/**\n * Take the user input, send request to change the current order to be what the user has entered in the edition form\n * It will remove the order's start time and end time because it is changing line so that no order will be affected in the changing line\n * and so that the start time and end time can be removed, and then let the initialiser to init the time again.\n * @param {*} inputValues The user input\n */\nfunction updateWithRemoving(inputValues) {\n  const line = influx.writeLineForUpdateWithRemovingTime(\n    inputValues,\n    _targetOrder.status\n  );\n  utils\n    .post(influx.writeUrl, line)\n    .then(res => {\n      if (_ordersBeingAffected.length > 0) {\n        const difference = getDiff(inputValues);\n        updateAffectedOrders(inputValues, difference);\n      } else {\n        closeForm();\n        utils.alert(\n          'success',\n          'Successful',\n          'Order has been successfully updated'\n        );\n        chart.refreshDashboard();\n      }\n    })\n    .catch(e => {\n      closeForm();\n      utils.alert(\n        'error',\n        'Error',\n        'An error occurred when updated the order : ' + e\n      );\n    });\n}\n\n/**\n * Take the user input, send request to change the current order to be what the user has entered in the edition form\n * It normally changes the current order's starttime and endtime because the order is being changed\n * @param {*} inputValues User input\n */\nfunction updateWithChanging(inputValues) {\n  const originalStartTime = _targetOrder.startTime;\n  //The difference between the original changeover and the edited changeover\n  const changeoverDiff = moment\n    .duration(inputValues.changeover)\n    .subtract(moment.duration(_targetOrder.planned_changeover_time));\n  const startTime = moment(originalStartTime).add(changeoverDiff);\n  const duration = moment.duration(\n    inputValues.orderQty / (inputValues.plannedRate * 60),\n    'hours'\n  );\n  const endTime = moment(originalStartTime)\n    .add(changeoverDiff)\n    .add(duration);\n\n  //calc the difference between the edited order's total duration and the original order's total duration\n  //so that all the affected orders know how many to add/subtract\n  const oldTotal = moment\n    .duration(\n      _targetOrder.order_qty / (_targetOrder.planned_rate * 60),\n      'hours'\n    )\n    .add(moment.duration(_targetOrder.planned_changeover_time));\n  const newTotal = duration.add(moment.duration(inputValues.changeover));\n  const difference = oldTotal.subtract(newTotal);\n  console.log('dif in gantt-', difference);\n\n  const line = influx.writeLineForUpdateWithChangingTime(\n    inputValues,\n    _targetOrder.status,\n    startTime.valueOf(),\n    endTime.valueOf()\n  );\n  utils\n    .post(influx.writeUrl, line)\n    .then(res => {\n      updateAffectedOrders(inputValues, difference);\n    })\n    .catch(e => {\n      closeForm();\n      utils.alert(\n        'error',\n        'Error',\n        'An error occurred when updated the order : ' + e\n      );\n    });\n}\n\n/**\n * Take the time difference, send request to add/subtract the time diff for all the affected orders due to -\n * the edited order being changed or removed from the current line and date\n * @param {*} inputValues The user input\n * @param {*} difference The time difference that all affected orders will need to add/subtract\n */\nfunction updateAffectedOrders(inputValues, difference) {\n  let promises = [];\n\n  _ordersBeingAffected.forEach(order => {\n    const line = influx.writeLineForTimeUpdate(order, difference, 'subtract');\n    const prom = utils.post(influx.writeUrl, line);\n    promises.push(prom);\n  });\n  Promise.all(promises)\n    .then(res => {\n      closeForm();\n      utils.alert(\n        'success',\n        'Successful',\n        'Order has been successfully updated'\n      );\n      chart.refreshDashboard();\n    })\n    .catch(e => {\n      closeForm();\n      utils.alert(\n        'error',\n        'Error',\n        'An error occurred when updated the order : ' + e\n      );\n    });\n}\n\n/**\n * Take inputValues and find the qty and rate to calc the duration\n * then return duration + changeover duration\n * @param {*} inputValues User input for the form\n */\nfunction getDiff(inputValues) {\n  let diff;\n  const duration = moment.duration(\n    inputValues.orderQty / (inputValues.plannedRate * 60),\n    'hours'\n  );\n  const changeover = moment.duration(inputValues.changeover, 'H:mm:ss');\n  diff = duration.add(changeover);\n  return diff;\n}\n\nfunction updateOldAndNewOrders(inputValues) {\n  const line = influx.writeLineForUpdate(cons.STATE_REPLACED, _targetOrder);\n  utils\n    .post(influx.writeUrl, line)\n    .then(res => {\n      //save the new order directly with removing its starttime and endtime to let the initialiser to init it again\n      //becuase this is the first\n      if (isLineChanged(inputValues)) {\n        updateWithRemoving(inputValues);\n      } else {\n        if (isDateChanged(inputValues)) {\n          updateWithRemoving(inputValues);\n        } else {\n          updateWithChanging(inputValues);\n        }\n      }\n    })\n    .catch(e => {\n      closeForm();\n      utils.alert(\n        'error',\n        'Error',\n        'An error occurred when updated the order : ' + e\n      );\n    });\n}\n\n/**\n * Return treu if the user has changed the order date\n * @param {*} inputValues The users input for this form editing\n */\nfunction isDateChanged(inputValues) {\n  return inputValues.date !== _targetOrder.order_date;\n}\n\n/**\n * Return true if the user has changed tag values (order_id, product_id, product_desc)\n * @param {*} inputValues The users input for this form editing\n */\nfunction isTagsChanged(inputValues) {\n  const product_id = inputValues.product.split(' | ')[0];\n  const product_desc = inputValues.product.split(' | ')[1];\n\n  return (\n    _targetOrder.order_id !== inputValues.orderId ||\n    _targetOrder.product_id !== product_id ||\n    _targetOrder.product_desc !== product_desc\n  );\n}\n\n/**\n * Expect the user inputs\n * Check if the user inputs are valid\n * Stop and prompt error if the inputs are not valid\n * @param {*} data\n */\nfunction isValueValid(data) {\n  const dateRegExp = new RegExp(\n    '^[0-9]{4}-(((0[13578]|(10|12))-(0[1-9]|[1-2][0-9]|3[0-1]))|(02-(0[1-9]|[1-2][0-9]))|((0[469]|11)-(0[1-9]|[1-2][0-9]|30)))$'\n  );\n  const prodList = _products.reduce((arr, p) => {\n    const str = p.id + ' | ' + p.product_desc;\n    arr.push(str);\n    return arr;\n  }, []);\n\n  let productionLineList = _equipment.reduce((arr, equ) => {\n    arr.push(equ.site + ' | ' + equ.area + ' | ' + equ.production_line);\n    return arr;\n  }, []);\n  productionLineList = utils.findDistinct(productionLineList);\n\n  if (data.orderId === '') {\n    utils.alert(\n      'warning',\n      'Warning',\n      'Order Number Empty, please enter the Order Number'\n    );\n    return false;\n  }\n\n  if (data.orderQty === '') {\n    utils.alert(\n      'warning',\n      'Warning',\n      'Order Quantity Empty, please enter the Order Quantity'\n    );\n    return false;\n  }\n\n  if (data.productionLine === '') {\n    utils.alert(\n      'warning',\n      'Warning',\n      'Production Line Empty, please enter the Production Line'\n    );\n    return false;\n  } else {\n    if (productionLineList.indexOf(data.productionLine) === -1) {\n      utils.alert(\n        'warning',\n        'Warning',\n        'Production Line Not Exist, please select a Production Line from the Production Line List'\n      );\n      return false;\n    }\n  }\n\n  if (data.product === '') {\n    utils.alert(\n      'warning',\n      'Warning',\n      'Product Empty, please enter the Product'\n    );\n    return false;\n  } else {\n    if (prodList.indexOf(data.product) === -1) {\n      utils.alert(\n        'warning',\n        'Warning',\n        'Product Not Exist, please select a Product from the Product List'\n      );\n      return false;\n    }\n  }\n\n  if (!dateRegExp.test(data.date)) {\n    utils.alert(\n      'warning',\n      'Warning',\n      'Scheduled Start Date Empty or Invalid Date Format, please choose a date from the date picker'\n    );\n    return false;\n  }\n\n  if (data.plannedRate === '') {\n    utils.alert(\n      'warning',\n      'Warning',\n      'Planned Rate Empty, please enter the Planned Rate'\n    );\n    return false;\n  }\n\n  return true;\n}\n\nfunction updateDuration(qty, rate) {\n  if (qty !== '' && rate !== '') {\n    let durationHrs =\n      Number(parseFloat(qty).toFixed(2)) /\n      Number((parseFloat(rate) * 60).toFixed(2));\n    let momentDuration = moment.duration(durationHrs, 'hours');\n    let durationText = getDurationText(momentDuration);\n    $('input.prod-sche-gt-chart-datalist-input#duration').val(durationText);\n  } else {\n    $('input.prod-sche-gt-chart-datalist-input#duration').val('');\n  }\n}\n\nfunction getDurationText(momentDuration) {\n  let month = momentDuration.get('month');\n  let days = momentDuration.get('d');\n  let hrs = momentDuration.get('h');\n  let mins = momentDuration.get('minute');\n  let text = 'under 1 minute';\n\n  if (month > 0) {\n    return 'Over a month!';\n  }\n\n  if (days !== 0) {\n    hrs += days * 24;\n  }\n\n  if (hrs !== 0 && mins !== 0) {\n    text = hrs + ' hour(s) & ' + mins + ' minute(s)';\n  } else if (hrs !== 0 && mins === 0) {\n    text = hrs + ' hour(s)';\n  } else if (hrs === 0 && mins !== 0) {\n    text = mins + ' minute(s)';\n  }\n\n  return text;\n}\n\n/**\n * Get the product list and production line list from postgresql\n * Call the callback fn passed in once it is finished\n * Stop and prompt error when it fails\n * @param {fn} callback\n */\nfunction getProductsAndEquipment(callback) {\n  let productsUrl = utils.postgRestHost + 'product';\n  let equipmentsUrl =\n    utils.postgRestHost + 'equipment?production_line=not.is.null';\n\n  utils\n    .get(productsUrl)\n    .then(res => {\n      _products = res;\n      utils\n        .get(equipmentsUrl)\n        .then(res => {\n          _equipment = res;\n          callback();\n        })\n        .catch(e => {\n          utils.alert(\n            'error',\n            'Error',\n            'An error occurred while fetching data from the postgresql : ' + e\n          );\n        });\n    })\n    .catch(e => {\n      utils.alert(\n        'error',\n        'Error',\n        'An error occurred while fetching data from the postgresql : ' + e\n      );\n    });\n}\n"]}