{"version":3,"sources":["../src/editing_actions_ctrl.js"],"names":["showActions","targetOrder","_targetOrder","getProductsAndEquipment","callback","utils","showModal","_tryCatchCounter","tryInitialisingForm","removeListeners","addListeners","setTimeout","initialiseForm","e","closeForm","alert","$","datepicker","orientation","todayBtn","format","autoclose","timepicker","showMeridian","showSeconds","maxHours","minuteStep","secondStep","defaultTime","icons","up","down","instant_search","enableInstantSearch","_products","_equipment","prefill","val","order_id","order_qty","production_line","attr","show","product_id","product_desc","order_date","planned_rate","planned_changeover_time","updateDuration","document","off","on","data","serializeArray","value","submitOrder","inputValues","orderId","orderQty","productionLine","product","date","plannedRate","duration","changeover","startTime","endTime","isValueValid","updateOrder","allData","dp","getData","ordersBeingAffected","getOrdersBeingAffect","_ordersBeingAffected","isLineHavingSpareTimeForTheDay","updateOldAndNewOrders","ordersInOriginalLineAndDate","filter","order","moment","valueOf","isLineChanged","affectedOrders","targetDayStartTime","getLineStartTime","targetDayStartTimeText","nextDayStartTime","add","totalDur","length","isSameOrBefore","all_end_times","map","maxEndTime","Math","max","updateWithRemoving","line","influx","writeLineForUpdateWithRemovingTime","status","post","writeUrl","then","res","difference","getDiff","updateAffectedOrders","chart","refreshDashboard","catch","updateWithChanging","originalStartTime","changeoverDiff","subtract","oldTotal","newTotal","writeLineForUpdateWithChangingTime","promises","forEach","writeLineForTimeUpdate","prom","push","Promise","all","diff","writeLineForUpdate","cons","STATE_REPLACED","isDateChanged","isTagsChanged","split","dateRegExp","RegExp","prodList","reduce","arr","p","str","id","productionLineList","equ","site","area","findDistinct","indexOf","test","qty","rate","durationHrs","Number","parseFloat","toFixed","momentDuration","durationText","getDurationText","month","get","days","hrs","mins","text","productsUrl","postgRestHost","equipmentsUrl","trigger"],"mappings":"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","file":"editing_actions_ctrl.js","sourcesContent":["import * as utils from './utils';\nimport * as influx from './influx_helper';\nimport * as dp from './data_processor';\nimport * as instant_search from './instant_search_ctrl';\nimport * as cons from './constans';\nimport moment from 'moment';\nimport * as chart from './chart_option';\n\nlet _targetOrder;\nlet _ordersBeingAffected;\nlet _tryCatchCounter = 1;\nlet _products;\nlet _equipment;\n\nconst closeForm = () => $('a#product-schedule-gantt-chart-order-form-close-btn').trigger('click');\n\n/**\n * Show edition order form\n * @param {*} targetOrder The order that the user want to make edition on\n */\nexport function showActions(targetOrder) {\n\t_targetOrder = targetOrder;\n\n\t//get products data and equipment from postgres database\n\tgetProductsAndEquipment(callback);\n\n\tfunction callback() {\n\t\tutils.showModal('order_form.html', {});\n\n\t\t//try initialize the form\n\t\t_tryCatchCounter = 1;\n\t\ttryInitialisingForm();\n\n\t\t//set listeners\n\t\tremoveListeners();\n\t\taddListeners();\n\t}\n}\n\nfunction tryInitialisingForm() {\n\tsetTimeout(() => {\n\t\ttry {\n\t\t\tinitialiseForm();\n\t\t} catch (e) {\n\t\t\tif (_tryCatchCounter < 15) {\n\t\t\t\t//maximunm re-init the form over 15 times\n\t\t\t\ttryInitialisingForm();\n\t\t\t\t_tryCatchCounter++;\n\t\t\t} else {\n\t\t\t\tcloseForm();\n\t\t\t\tutils.alert('error', 'Error', 'Form initialisation failed, please try agian : ' + e);\n\t\t\t}\n\t\t}\n\t}, 200);\n}\n\nfunction initialiseForm() {\n\t//init datepicker\n\t$('#datepicker').datepicker({\n\t\torientation: 'top',\n\t\ttodayBtn: 'linked',\n\t\tformat: 'yyyy-mm-dd',\n\t\tautoclose: true\n\t});\n\n\t//init timepicker\n\t$('#changeover-minutes-picker').timepicker({\n\t\tshowMeridian: false,\n\t\tshowSeconds: true,\n\t\tmaxHours: 100,\n\t\tminuteStep: 1,\n\t\tsecondStep: 1,\n\t\tdefaultTime: '00:00:00',\n\t\ticons: {\n\t\t\tup: 'fa fa-chevron-up',\n\t\t\tdown: 'fa fa-chevron-down'\n\t\t}\n\t});\n\n\t//init the instant search function\n\tinstant_search.enableInstantSearch(_products, _equipment);\n\n\t//prefill date field and production line\n\tprefill();\n}\n\nfunction prefill() {\n\t$('input.prod-sche-gt-chart-datalist-input#order-id').val(_targetOrder.order_id);\n\t$('input.prod-sche-gt-chart-datalist-input#order-qty').val(_targetOrder.order_qty);\n\t$('input.prod-sche-gt-chart-datalist-input#datalist-input-production-line').val(_targetOrder.production_line);\n\t$('input.prod-sche-gt-chart-datalist-input#datalist-input-production-line').attr('readonly', false);\n\t$('i.prod-sche-gt-chart-dl-i#datalist-icon').show();\n\t$('input.prod-sche-gt-chart-datalist-input#datalist-input-products').val(\n\t\t_targetOrder.product_id + ' | ' + _targetOrder.product_desc\n\t);\n\t$('input.prod-sche-gt-chart-datalist-input#datepicker').val(_targetOrder.order_date);\n\t$('input.prod-sche-gt-chart-datalist-input#datepicker').attr('readonly', false);\n\t$('input.prod-sche-gt-chart-datalist-input#planned-rate').val(_targetOrder.planned_rate);\n\t$('input.prod-sche-gt-chart-datalist-input#changeover-minutes-picker').val(_targetOrder.planned_changeover_time);\n\tupdateDuration(_targetOrder.order_qty, _targetOrder.planned_rate);\n}\n\nfunction removeListeners() {\n\t$(document).off('input', 'input#planned-rate, input#order-qty');\n\t$(document).off('click', 'button#product-schedule-gantt-chart-order-form-submitBtn');\n}\n\nfunction addListeners() {\n\t$(document).on('input', 'input#planned-rate, input#order-qty', () => {\n\t\tlet data = $('form#product-schedule-gantt-chart-order-form').serializeArray();\n\t\tupdateDuration(data[1].value, data[5].value);\n\t});\n\n\t$(document).on('click', 'button#product-schedule-gantt-chart-order-form-submitBtn', (e) => {\n\t\tlet data = $('form#product-schedule-gantt-chart-order-form').serializeArray();\n\t\tsubmitOrder(data);\n\t});\n}\n\nfunction submitOrder(data) {\n\tconst inputValues = {\n\t\torderId: data[0].value,\n\t\torderQty: data[1].value,\n\t\tproductionLine: data[2].value,\n\t\tproduct: data[3].value,\n\t\tdate: data[4].value,\n\t\tplannedRate: data[5].value,\n\t\tduration: data[6].value,\n\t\tchangeover: data[7].value,\n\t\tstartTime: _targetOrder.startTime,\n\t\tendTime: _targetOrder.endTime\n\t};\n\n\tif (isValueValid(inputValues)) {\n\t\tupdateOrder(inputValues);\n\t}\n}\n\nfunction updateOrder(inputValues) {\n\tconst allData = dp.getData();\n\n\t//the orders that are in the original line that this order was in and that are being affected because this order changes line\n\tconst ordersBeingAffected = getOrdersBeingAffect(allData, inputValues);\n\t_ordersBeingAffected = ordersBeingAffected;\n\n\tif (!isLineHavingSpareTimeForTheDay(allData, inputValues, _targetOrder)) {\n\t\tutils.alert('warning', 'Warning', \"There is no spare space for this order to fit in this date's schedule\");\n\t\treturn;\n\t}\n\n\t// if (isTagsChanged(inputValues)) {\n\n\tupdateOldAndNewOrders(inputValues);\n\n\t// }else {\n\t//   //in here, check if the line has changed, if yes, meaning that the order is going to another line\n\t//   //so also update all affectingOrders(orders that are in the original line and that are after this order)\n\t//   if (isLineChanged(inputValues)) {\n\t//     //save the order directly with removing its starttime and endtime to let the initialiser to init it again\n\t//     //coz it is changing line, so just simply remove the start time and end time\n\t//     updateWithRemoving(inputValues)\n\t//   }else{\n\t//     if (isDateChanged(inputValues)) {\n\t//       updateWithRemoving(inputValues)\n\t//     }else{\n\t//       //save the order directly with changing its starttime and endtime\n\t//       updateWithChanging(inputValues)\n\t//     }\n\t//   }\n\t// }\n}\n\n/**\n * get alldata and the user input to filter all affected orders.\n * These orders will be the ones that are in the original line with the same date.\n * @param {*} allData All the orders that is being passed in and displayed in this panel\n * @param {*} inputValues Inputs that the user entered in this order edition form\n */\nfunction getOrdersBeingAffect(allData, inputValues) {\n\tconst ordersInOriginalLineAndDate = allData.filter(\n\t\t(order) =>\n\t\t\torder.production_line === _targetOrder.production_line && order.order_date === _targetOrder.order_date\n\t);\n\treturn ordersInOriginalLineAndDate.filter((order) => {\n\t\tlet endTime = moment(inputValues.endTime);\n\t\treturn order.startTime >= endTime.valueOf() && order.order_date === _targetOrder.order_date;\n\t});\n}\n\n/**\n * Compares the user input and the original order to see if the line has been changed.\n * return true if it is.\n * @param {*} inputValues The user input\n */\nfunction isLineChanged(inputValues) {\n\treturn inputValues.productionLine !== _targetOrder.production_line;\n}\n\nfunction isLineHavingSpareTimeForTheDay(allData, inputValues, targetOrder) {\n\t//all orders in the targeting line (except the editing order itself (if line not changed))\n\tlet affectedOrders = allData.filter(\n\t\t(order) => order.production_line === inputValues.productionLine && order.order_date === inputValues.date\n\t);\n\taffectedOrders = affectedOrders.filter((order) => order.order_id !== targetOrder.order_id);\n\n\t//find the line's default start time and then plus next day\n\tconst targetDayStartTime = moment(\n\t\tmoment(inputValues.date, 'YYYY-MM-DD').format('YYYY-MM-DD') +\n\t\t\t' ' +\n\t\t\tutils.getLineStartTime(targetOrder.production_line),\n\t\t'YYYY-MM-DD H:mm:ss'\n\t);\n\tconst targetDayStartTimeText = targetDayStartTime.format('YYYY-MM-DD H:mm:ss');\n\tconst nextDayStartTime = moment(targetDayStartTimeText, 'YYYY-MM-DD H:mm:ss').add(1, 'days');\n\n\t//calc edited order's duration\n\tconst duration = moment.duration(inputValues.orderQty / (inputValues.plannedRate * 60), 'hours');\n\tconst changeover = moment.duration(inputValues.changeover, 'H:mm:ss');\n\tconst totalDur = duration.add(changeover);\n\n\t//if no affected orders, see if target dat start time + totaldur <= nextdatstarttime\n\tif (affectedOrders.length === 0) {\n\t\treturn targetDayStartTime.add(totalDur).isSameOrBefore(nextDayStartTime);\n\t}\n\n\t//get the max end time\n\tconst all_end_times = affectedOrders.map((order) => order.endTime);\n\tconst maxEndTime = moment(Math.max(...all_end_times));\n\tmaxEndTime.add(totalDur);\n\n\treturn maxEndTime.isSameOrBefore(nextDayStartTime);\n}\n\n/**\n * Take the user input, send request to change the current order to be what the user has entered in the edition form\n * It will remove the order's start time and end time because it is changing line so that no order will be affected in the changing line\n * and so that the start time and end time can be removed, and then let the initialiser to init the time again.\n * @param {*} inputValues The user input\n */\nfunction updateWithRemoving(inputValues) {\n\tconst line = influx.writeLineForUpdateWithRemovingTime(inputValues, _targetOrder.status);\n\tutils\n\t\t.post(influx.writeUrl, line)\n\t\t.then((res) => {\n\t\t\tif (_ordersBeingAffected.length > 0) {\n\t\t\t\tconst difference = getDiff(inputValues);\n\t\t\t\tupdateAffectedOrders(inputValues, difference);\n\t\t\t} else {\n\t\t\t\tcloseForm();\n\t\t\t\tutils.alert('success', 'Successful', 'Order has been successfully updated');\n\t\t\t\tchart.refreshDashboard();\n\t\t\t}\n\t\t})\n\t\t.catch((e) => {\n\t\t\tcloseForm();\n\t\t\tutils.alert('error', 'Error', 'An error occurred when updated the order : ' + e);\n\t\t});\n}\n\n/**\n * Take the user input, send request to change the current order to be what the user has entered in the edition form\n * It normally changes the current order's starttime and endtime because the order is being changed\n * @param {*} inputValues User input\n */\nfunction updateWithChanging(inputValues) {\n\tconst originalStartTime = _targetOrder.startTime;\n\t//The difference between the original changeover and the edited changeover\n\tconst changeoverDiff = moment\n\t\t.duration(inputValues.changeover)\n\t\t.subtract(moment.duration(_targetOrder.planned_changeover_time));\n\tconst startTime = moment(originalStartTime).add(changeoverDiff);\n\tconst duration = moment.duration(inputValues.orderQty / (inputValues.plannedRate * 60), 'hours');\n\tconst endTime = moment(originalStartTime).add(changeoverDiff).add(duration);\n\n\t//calc the difference between the edited order's total duration and the original order's total duration\n\t//so that all the affected orders know how many to add/subtract\n\tconst oldTotal = moment\n\t\t.duration(_targetOrder.order_qty / (_targetOrder.planned_rate * 60), 'hours')\n\t\t.add(moment.duration(_targetOrder.planned_changeover_time));\n\tconst newTotal = duration.add(moment.duration(inputValues.changeover));\n\tconst difference = oldTotal.subtract(newTotal);\n\n\tconst line = influx.writeLineForUpdateWithChangingTime(\n\t\tinputValues,\n\t\t_targetOrder.status,\n\t\tstartTime.valueOf(),\n\t\tendTime.valueOf()\n\t);\n\tutils\n\t\t.post(influx.writeUrl, line)\n\t\t.then((res) => {\n\t\t\tupdateAffectedOrders(inputValues, difference);\n\t\t})\n\t\t.catch((e) => {\n\t\t\tcloseForm();\n\t\t\tutils.alert('error', 'Error', 'An error occurred when updated the order : ' + e);\n\t\t});\n}\n\n/**\n * Take the time difference, send request to add/subtract the time diff for all the affected orders due to -\n * the edited order being changed or removed from the current line and date\n * @param {*} inputValues The user input\n * @param {*} difference The time difference that all affected orders will need to add/subtract\n */\nfunction updateAffectedOrders(inputValues, difference) {\n\tlet promises = [];\n\n\t_ordersBeingAffected.forEach((order) => {\n\t\tconst line = influx.writeLineForTimeUpdate(order, difference, 'subtract');\n\t\tconst prom = utils.post(influx.writeUrl, line);\n\t\tpromises.push(prom);\n\t});\n\tPromise.all(promises)\n\t\t.then((res) => {\n\t\t\tcloseForm();\n\t\t\tutils.alert('success', 'Successful', 'Order has been successfully updated');\n\t\t\tchart.refreshDashboard();\n\t\t})\n\t\t.catch((e) => {\n\t\t\tcloseForm();\n\t\t\tutils.alert('error', 'Error', 'An error occurred when updated the order : ' + e);\n\t\t});\n}\n\n/**\n * Take inputValues and find the qty and rate to calc the duration\n * then return duration + changeover duration\n * @param {*} inputValues User input for the form\n */\nfunction getDiff(inputValues) {\n\tlet diff;\n\tconst duration = moment.duration(inputValues.orderQty / (inputValues.plannedRate * 60), 'hours');\n\tconst changeover = moment.duration(inputValues.changeover, 'H:mm:ss');\n\tdiff = duration.add(changeover);\n\treturn diff;\n}\n\nfunction updateOldAndNewOrders(inputValues) {\n\tconst line = influx.writeLineForUpdate(cons.STATE_REPLACED, _targetOrder);\n\tutils\n\t\t.post(influx.writeUrl, line)\n\t\t.then((res) => {\n\t\t\t//save the new order directly with removing its starttime and endtime to let the initialiser to init it again\n\t\t\t//becuase this is the first\n\t\t\tif (isLineChanged(inputValues)) {\n\t\t\t\tupdateWithRemoving(inputValues);\n\t\t\t} else {\n\t\t\t\tif (isDateChanged(inputValues)) {\n\t\t\t\t\tupdateWithRemoving(inputValues);\n\t\t\t\t} else {\n\t\t\t\t\tupdateWithChanging(inputValues);\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\t\t.catch((e) => {\n\t\t\tcloseForm();\n\t\t\tutils.alert('error', 'Error', 'An error occurred when updated the order : ' + e);\n\t\t});\n}\n\n/**\n * Return treu if the user has changed the order date\n * @param {*} inputValues The users input for this form editing\n */\nfunction isDateChanged(inputValues) {\n\treturn inputValues.date !== _targetOrder.order_date;\n}\n\n/**\n * Return true if the user has changed tag values (order_id, product_id, product_desc)\n * @param {*} inputValues The users input for this form editing\n */\nfunction isTagsChanged(inputValues) {\n\tconst product_id = inputValues.product.split(' | ')[0];\n\tconst product_desc = inputValues.product.split(' | ')[1];\n\n\treturn (\n\t\t_targetOrder.order_id !== inputValues.orderId ||\n\t\t_targetOrder.product_id !== product_id ||\n\t\t_targetOrder.product_desc !== product_desc\n\t);\n}\n\n/**\n * Expect the user inputs\n * Check if the user inputs are valid\n * Stop and prompt error if the inputs are not valid\n * @param {*} data \n */\nfunction isValueValid(data) {\n\tconst dateRegExp = new RegExp(\n\t\t'^[0-9]{4}-(((0[13578]|(10|12))-(0[1-9]|[1-2][0-9]|3[0-1]))|(02-(0[1-9]|[1-2][0-9]))|((0[469]|11)-(0[1-9]|[1-2][0-9]|30)))$'\n\t);\n\tconst prodList = _products.reduce((arr, p) => {\n\t\tconst str = p.id + ' | ' + p.product_desc;\n\t\tarr.push(str);\n\t\treturn arr;\n\t}, []);\n\n\tlet productionLineList = _equipment.reduce((arr, equ) => {\n\t\tarr.push(equ.site + ' | ' + equ.area + ' | ' + equ.production_line);\n\t\treturn arr;\n\t}, []);\n\tproductionLineList = utils.findDistinct(productionLineList);\n\n\tif (data.orderId === '') {\n\t\tutils.alert('warning', 'Warning', 'Order Number Empty, please enter the Order Number');\n\t\treturn false;\n\t}\n\n\tif (data.orderQty === '') {\n\t\tutils.alert('warning', 'Warning', 'Order Quantity Empty, please enter the Order Quantity');\n\t\treturn false;\n\t}\n\n\tif (data.productionLine === '') {\n\t\tutils.alert('warning', 'Warning', 'Production Line Empty, please enter the Production Line');\n\t\treturn false;\n\t} else {\n\t\tif (productionLineList.indexOf(data.productionLine) === -1) {\n\t\t\tutils.alert(\n\t\t\t\t'warning',\n\t\t\t\t'Warning',\n\t\t\t\t'Production Line Not Exist, please select a Production Line from the Production Line List'\n\t\t\t);\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tif (data.product === '') {\n\t\tutils.alert('warning', 'Warning', 'Product Empty, please enter the Product');\n\t\treturn false;\n\t} else {\n\t\tif (prodList.indexOf(data.product) === -1) {\n\t\t\tutils.alert('warning', 'Warning', 'Product Not Exist, please select a Product from the Product List');\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tif (!dateRegExp.test(data.date)) {\n\t\tutils.alert(\n\t\t\t'warning',\n\t\t\t'Warning',\n\t\t\t'Scheduled Start Date Empty or Invalid Date Format, please choose a date from the date picker'\n\t\t);\n\t\treturn false;\n\t}\n\n\tif (data.plannedRate === '') {\n\t\tutils.alert('warning', 'Warning', 'Planned Rate Empty, please enter the Planned Rate');\n\t\treturn false;\n\t}\n\n\treturn true;\n}\n\nfunction updateDuration(qty, rate) {\n\tif (qty !== '' && rate !== '') {\n\t\tlet durationHrs = Number(parseFloat(qty).toFixed(2)) / Number((parseFloat(rate) * 60).toFixed(2));\n\t\tlet momentDuration = moment.duration(durationHrs, 'hours');\n\t\tlet durationText = getDurationText(momentDuration);\n\t\t$('input.prod-sche-gt-chart-datalist-input#duration').val(durationText);\n\t} else {\n\t\t$('input.prod-sche-gt-chart-datalist-input#duration').val('');\n\t}\n}\n\nfunction getDurationText(momentDuration) {\n\tlet month = momentDuration.get('month');\n\tlet days = momentDuration.get('d');\n\tlet hrs = momentDuration.get('h');\n\tlet mins = momentDuration.get('minute');\n\tlet text = 'under 1 minute';\n\n\tif (month > 0) {\n\t\treturn 'Over a month!';\n\t}\n\n\tif (days !== 0) {\n\t\thrs += days * 24;\n\t}\n\n\tif (hrs !== 0 && mins !== 0) {\n\t\ttext = hrs + ' hour(s) & ' + mins + ' minute(s)';\n\t} else if (hrs !== 0 && mins === 0) {\n\t\ttext = hrs + ' hour(s)';\n\t} else if (hrs === 0 && mins !== 0) {\n\t\ttext = mins + ' minute(s)';\n\t}\n\n\treturn text;\n}\n\n/**\n * Get the product list and production line list from postgresql\n * Call the callback fn passed in once it is finished\n * Stop and prompt error when it fails\n * @param {fn} callback \n */\nfunction getProductsAndEquipment(callback) {\n\tlet productsUrl = utils.postgRestHost + 'product';\n\tlet equipmentsUrl = utils.postgRestHost + 'equipment?production_line=not.is.null';\n\n\tutils\n\t\t.get(productsUrl)\n\t\t.then((res) => {\n\t\t\t_products = res;\n\t\t\tutils\n\t\t\t\t.get(equipmentsUrl)\n\t\t\t\t.then((res) => {\n\t\t\t\t\t_equipment = res;\n\t\t\t\t\tcallback();\n\t\t\t\t})\n\t\t\t\t.catch((e) => {\n\t\t\t\t\tutils.alert('error', 'Error', 'An error occurred while fetching data from the postgresql : ' + e);\n\t\t\t\t});\n\t\t})\n\t\t.catch((e) => {\n\t\t\tutils.alert('error', 'Error', 'An error occurred while fetching data from the postgresql : ' + e);\n\t\t});\n}\n"]}