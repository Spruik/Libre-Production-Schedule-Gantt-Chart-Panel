{"version":3,"sources":["../src/editing_actions_ctrl.js"],"names":["showActions","targetOrder","_targetOrder","getProductsAndEquipment","callback","utils","showModal","_tryCatchCounter","tryInitialisingForm","removeListeners","addListeners","setTimeout","initialiseForm","e","closeForm","alert","instant_search","enableInstantSearch","_products","_equipment","$","datepicker","orientation","todayBtn","format","autoclose","timepicker","showMeridian","showSeconds","maxHours","minuteStep","secondStep","defaultTime","icons","up","down","prefill","val","order_id","order_qty","production_line","attr","show","product_id","product_desc","order_date","planned_rate","planned_changeover_time","updateDuration","document","off","on","data","serializeArray","value","submitOrder","inputValues","orderId","orderQty","productionLine","product","date","plannedRate","duration","changeover","startTime","endTime","isValueValid","updateOrder","allData","dp","getData","ordersBeingAffected","getOrdersBeingAffect","_ordersBeingAffected","isLineHavingSpareTimeForTheDay","isTagsChanged","updateOldAndNewOrders","isLineChanged","updateWithRemoving","updateWithChanging","ordersInOriginalLineAndDate","filter","order","moment","valueOf","affectedOrders","targetDayStartTime","getLineStartTime","targetDayStartTimeText","nextDayStartTime","add","totalDur","length","isSameOrBefore","all_end_times","map","maxEndTime","Math","max","line","influx","writeLineForUpdateWithRemovingTime","status","post","writeUrl","then","difference","getDiff","updateAffectedOrders","chart","refreshPanel","catch","originalStartTime","changeoverDiff","subtract","oldTotal","newTotal","writeLineForUpdateWithChangingTime","promises","forEach","writeLineForTimeUpdate","prom","push","Promise","all","diff","writeLineForUpdate","isDateChanged","split","dateRegExp","RegExp","prodList","reduce","arr","p","str","productionLineList","equ","site","area","findDistinct","indexOf","test","qty","rate","durationHrs","parseInt","momentDuration","durationText","getDurationText","month","get","days","hrs","mins","text","productsUrl","postgRestHost","equipmentsUrl","res","trigger"],"mappings":"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","file":"editing_actions_ctrl.js","sourcesContent":["import * as utils from './utils'\nimport * as influx from './influx_helper'\nimport * as dp from './data_processor'\nimport * as instant_search from './instant_search_ctrl'\nimport moment from 'moment'\nimport * as chart from './chart_option'\n\nlet _targetOrder\nlet _ordersBeingAffected\nlet _tryCatchCounter = 1\nlet _products\nlet _equipment\n\nconst closeForm = () => $('a#product-schedule-gantt-chart-order-form-close-btn').trigger('click')\n\n/**\n * Show edition order form\n * @param {*} targetOrder The order that the user want to make edition on\n */\nexport function showActions(targetOrder){\n  \n  _targetOrder = targetOrder\n\n  //get products data and equipment from postgres database\n  getProductsAndEquipment(callback)\n\n  function callback(){\n\n    utils.showModal('order_form.html', {})\n\n    //try initialize the form\n    _tryCatchCounter = 1\n    tryInitialisingForm()\n\n    //set listeners\n    removeListeners()\n    addListeners()\n  }\n\n}\n\nfunction tryInitialisingForm(){\n  setTimeout(() => {\n    try{\n      initialiseForm()\n    }catch(e){\n      if (_tryCatchCounter < 15) {\n        //maximunm re-init the form over 15 times\n        initialiseForm()\n        _tryCatchCounter++\n      }else{\n        closeForm()\n        utils.alert('error', 'Error', 'Form initialisation failed, please try agian : ' + e)\n      }\n    }\n  }, 200);\n}\n\nfunction initialiseForm(){\n  //init the instant search function\n  instant_search.enableInstantSearch(_products, _equipment)\n\n  //init datepicker\n  $('#datepicker').datepicker({\n    orientation: 'top',\n    todayBtn: 'linked',\n    format: 'yyyy-mm-dd',\n    autoclose: true,\n  })\n\n  //init timepicker\n  $('#changeover-minutes-picker').timepicker({\n    showMeridian: false,\n    showSeconds: true,\n    maxHours: 100,\n    minuteStep: 1,\n    secondStep: 1,\n    defaultTime: '00:00:00',\n    icons: {\n        up: 'fa fa-chevron-up',\n        down: 'fa fa-chevron-down'\n    }\n  })\n\n  //prefill date field and production line\n  prefill()\n}\n\nfunction prefill(){\n  $('input.prod-sche-gt-chart-datalist-input#order-id').val(_targetOrder.order_id)\n  $('input.prod-sche-gt-chart-datalist-input#order-qty').val(_targetOrder.order_qty)\n  $('input.prod-sche-gt-chart-datalist-input#datalist-input-production-line').val(_targetOrder.production_line)\n  $('input.prod-sche-gt-chart-datalist-input#datalist-input-production-line').attr('readonly', false)\n  $('i.prod-sche-gt-chart-dl-i#datalist-icon').show()\n  $('input.prod-sche-gt-chart-datalist-input#datalist-input-products').val(_targetOrder.product_id + ' | ' + _targetOrder.product_desc)\n  $('input.prod-sche-gt-chart-datalist-input#datepicker').val(_targetOrder.order_date)\n  $('input.prod-sche-gt-chart-datalist-input#datepicker').attr('readonly', false)\n  $('input.prod-sche-gt-chart-datalist-input#planned-rate').val(_targetOrder.planned_rate)\n  $('input.prod-sche-gt-chart-datalist-input#changeover-minutes-picker').val(_targetOrder.planned_changeover_time)\n  updateDuration(_targetOrder.order_qty, _targetOrder.planned_rate)\n}\n\nfunction removeListeners(){\n  $(document).off('input', 'input#planned-rate, input#order-qty')\n  $(document).off('click', 'button#product-schedule-gantt-chart-order-form-submitBtn')\n}\n\nfunction addListeners(){\n  $(document).on('input', 'input#planned-rate, input#order-qty', () => {\n    let data = $('form#product-schedule-gantt-chart-order-form').serializeArray()\n    updateDuration(data[1].value, data[5].value)\n  })\n\n  $(document).on('click', 'button#product-schedule-gantt-chart-order-form-submitBtn', e => {\n    let data = $('form#product-schedule-gantt-chart-order-form').serializeArray()\n    submitOrder(data)\n  })\n}\n\nfunction submitOrder(data) {\n\n  const inputValues = {\n    orderId: data[0].value, \n    orderQty: data[1].value, \n    productionLine: data[2].value, \n    product: data[3].value, \n    date: data[4].value, \n    plannedRate: data[5].value,\n    duration: data[6].value,\n    changeover: data[7].value,\n    startTime: _targetOrder.startTime,\n    endTime: _targetOrder.endTime,\n  }\n\n  if (isValueValid(inputValues)) {\n    updateOrder(inputValues)\n  }\n}\n\nfunction updateOrder(inputValues){\n\n  const allData = dp.getData()\n\n  //the orders that are in the original line that this order was in and that are being affected because this order changes line\n  const ordersBeingAffected = getOrdersBeingAffect(allData, inputValues)  \n  _ordersBeingAffected = ordersBeingAffected\n\n  if (!isLineHavingSpareTimeForTheDay(allData, inputValues, _targetOrder)) {\n    utils.alert('warning', 'Warning', \"There is no spare space for this order to fit in this date's schedule\")\n    return\n  }\n  \n  //there is no order yet on the line on that date, check for tags changes then update\n  if (isTagsChanged(inputValues)) {\n\n    updateOldAndNewOrders(inputValues)\n    \n  }else {\n    //in here, check if the line has changed, if yes, meaning that the order is going to another line\n    //so also update all affectingOrders(orders that are in the original line and that are after this order)\n    if (isLineChanged(inputValues)) {\n      //save the order directly with removing its starttime and endtime to let the initialiser to init it again\n      //coz it is changing line, so just simply remove the start time and end time\n      updateWithRemoving(inputValues)\n    }else{\n      //save the order directly with changing its starttime and endtime\n      updateWithChanging(inputValues)\n    }\n  }\n}\n\n/**\n * get alldata and the user input to filter all affected orders.\n * These orders will be the ones that are in the original line with the same date.\n * @param {*} allData All the orders that is being passed in and displayed in this panel\n * @param {*} inputValues Inputs that the user entered in this order edition form\n */\nfunction getOrdersBeingAffect(allData, inputValues){\n  const ordersInOriginalLineAndDate = allData.filter(order => order.production_line === _targetOrder.production_line && order.order_date === _targetOrder.order_date)\n  return ordersInOriginalLineAndDate.filter(order => {\n    let endTime = moment(inputValues.endTime)\n    return order.startTime >= endTime.valueOf()\n          && order.order_date === inputValues.date\n  })\n}\n\n/**\n * Compares the user input and the original order to see if the line has been changed.\n * return true if it is.\n * @param {*} inputValues The user input\n */\nfunction isLineChanged(inputValues){\n  return inputValues.productionLine !== _targetOrder.production_line\n}\n\nfunction isLineHavingSpareTimeForTheDay(allData, inputValues, targetOrder){\n    \n  //all orders in the targeting line (except the editing order itself (if line not changed))\n  let affectedOrders = allData.filter(order => order.production_line === inputValues.productionLine && order.order_date === inputValues.date)\n  affectedOrders = affectedOrders.filter(order => order.order_id !== targetOrder.order_id)\n\n  //find the line's default start time and then plus next day\n  const targetDayStartTime = moment(moment(inputValues.date, 'YYYY-MM-DD').format('YYYY-MM-DD') + ' ' + utils.getLineStartTime(targetOrder.production_line), 'YYYY-MM-DD H:mm:ss')\n  const targetDayStartTimeText = targetDayStartTime.format('YYYY-MM-DD H:mm:ss')\n  const nextDayStartTime = moment(targetDayStartTimeText, 'YYYY-MM-DD H:mm:ss').add(1, 'days')\n\n  //calc edited order's duration\n  const duration = moment.duration(inputValues.orderQty / inputValues.plannedRate, 'hours')\n  const changeover = moment.duration(inputValues.changeover, 'H:mm:ss')\n  const totalDur = duration.add(changeover)\n\n  //if no affected orders, see if target dat start time + totaldur <= nextdatstarttime\n  if (affectedOrders.length === 0) {\n    return targetDayStartTime.add(totalDur).isSameOrBefore(nextDayStartTime) \n  }\n\n  //get the max end time\n  const all_end_times = affectedOrders.map(order => order.endTime)\n  const maxEndTime = moment(Math.max(...all_end_times)) \n  maxEndTime.add(totalDur)\n\n  return maxEndTime.isSameOrBefore(nextDayStartTime)\n}\n\n/**\n * Take the user input, send request to change the current order to be what the user has entered in the edition form\n * It will remove the order's start time and end time because it is changing line so that no order will be affected in the changing line\n * and so that the start time and end time can be removed, and then let the initialiser to init the time again.\n * @param {*} inputValues The user input\n */\nfunction updateWithRemoving(inputValues){\n  const line = influx.writeLineForUpdateWithRemovingTime(inputValues, _targetOrder.status)\n  utils.post(influx.writeUrl, line).then(res => {\n    if (_ordersBeingAffected.length > 0) {\n      const difference = getDiff(inputValues)\n      updateAffectedOrders(inputValues, difference)\n    }else {\n      closeForm()\n      utils.alert('success', 'Successful', 'Order has been successfully updated')\n      chart.refreshPanel()\n    }\n  }).catch(e => {\n    closeForm()\n    utils.alert('error', 'Error', 'An error occurred when updated the order : ' + e)\n  })\n}\n\n/**\n * Take the user input, send request to change the current order to be what the user has entered in the edition form\n * It normally changes the current order's starttime and endtime because the order is being changed\n * @param {*} inputValues User input\n */\nfunction updateWithChanging(inputValues) {\n  const originalStartTime = _targetOrder.startTime\n  //The difference between the original changeover and the edited changeover\n  const changeoverDiff = moment.duration(inputValues.changeover).subtract(moment.duration(_targetOrder.planned_changeover_time))\n  const startTime = moment(originalStartTime).add(changeoverDiff)\n  const duration = moment.duration(inputValues.orderQty / inputValues.plannedRate, 'hours')\n  const endTime = moment(originalStartTime).add(changeoverDiff).add(duration)\n\n  //calc the difference between the edited order's total duration and the original order's total duration\n  //so that all the affected orders know how many to add/subtract\n  const oldTotal = moment.duration(_targetOrder.order_qty / _targetOrder.planned_rate, 'hours').add(moment.duration(_targetOrder.planned_changeover_time))\n  const newTotal = duration.add(moment.duration(inputValues.changeover))\n  const difference = oldTotal.subtract(newTotal)\n  \n  const line = influx.writeLineForUpdateWithChangingTime(inputValues, _targetOrder.status, startTime.valueOf(), endTime.valueOf())\n  utils.post(influx.writeUrl, line).then(res => {\n    updateAffectedOrders(inputValues, difference)\n  }).catch(e => {\n    closeForm()\n    utils.alert('error', 'Error', 'An error occurred when updated the order : ' + e)\n  })\n}\n\n/**\n * Take the time difference, send request to add/subtract the time diff for all the affected orders due to -\n * the edited order being changed or removed from the current line and date\n * @param {*} inputValues The user input\n * @param {*} difference The time difference that all affected orders will need to add/subtract\n */\nfunction updateAffectedOrders(inputValues, difference) {\n  let promises = []\n  _ordersBeingAffected.forEach(order => {\n    const line = influx.writeLineForTimeUpdate(order, difference, 'subtract')\n    const prom = utils.post(influx.writeUrl, line)\n    promises.push(prom)\n  })\n  Promise.all(promises).then(res => {\n    closeForm()\n    utils.alert('success', 'Successful', 'Order has been successfully updated')\n    chart.refreshPanel()\n  }).catch(e => {\n    closeForm()\n    utils.alert('error', 'Error', 'An error occurred when updated the order : ' + e)\n  })\n}\n\n/**\n * Take inputValues and find the qty and rate to calc the duration\n * then return duration + changeover duration\n * @param {*} inputValues User input for the form\n */\nfunction getDiff(inputValues){\n  let diff\n  const duration = moment.duration(inputValues.orderQty / inputValues.plannedRate, 'hours')\n  const changeover = moment.duration(inputValues.changeover, 'H:mm:ss')\n  diff = duration.add(changeover)\n  return diff\n}\n\nfunction updateOldAndNewOrders(inputValues){\n  const line = influx.writeLineForUpdate('Replaced', _targetOrder)\n  utils.post(influx.writeUrl, line).then(res => {\n    //save the new order directly with removing its starttime and endtime to let the initialiser to init it again\n    //becuase this is the first\n    if (isLineChanged(inputValues)) {\n      updateWithRemoving(inputValues)\n    }else {\n      updateWithChanging(inputValues)\n    }\n  }).catch(e => {\n    closeForm()\n    utils.alert('error', 'Error', 'An error occurred when updated the order : ' + e)\n  })\n}\n\n/**\n * Return treu if the user has changed the order date\n * @param {*} inputValues The users input for this form editing\n */\nfunction isDateChanged(inputValues){\n  return inputValues.date !== _targetOrder.order_date \n}\n\n/**\n * Return true if the user has changed tag values (order_id, product_id, product_desc)\n * @param {*} inputValues The users input for this form editing\n */\nfunction isTagsChanged(inputValues){\n  const product_id = inputValues.product.split(' | ')[0]\n  const product_desc = inputValues.product.split(' | ')[1]\n  \n  return (\n    _targetOrder.order_id !== inputValues.orderId\n    || _targetOrder.product_id !== product_id\n    || _targetOrder.product_desc !== product_desc\n  )\n}\n\n/**\n * Expect the user inputs\n * Check if the user inputs are valid\n * Stop and prompt error if the inputs are not valid\n * @param {*} data \n */\nfunction isValueValid(data) {\n\n  const dateRegExp = new RegExp('^[0-9]{4}-(((0[13578]|(10|12))-(0[1-9]|[1-2][0-9]|3[0-1]))|(02-(0[1-9]|[1-2][0-9]))|((0[469]|11)-(0[1-9]|[1-2][0-9]|30)))$')\n  const prodList = _products.reduce((arr, p) => {\n    const str = p.product_id + ' | ' + p.product_desc\n    arr.push(str)\n    return arr\n  }, [])\n\n  let productionLineList = _equipment.reduce((arr, equ) => {\n    arr.push(equ.site + ' | ' + equ.area + ' | ' + equ.production_line)\n    return arr\n  }, [])  \n  productionLineList = utils.findDistinct(productionLineList)\n\n  if (data.orderId === '') {\n    utils.alert('warning', 'Warning', 'Order Number Empty, please enter the Order Number')\n    return false\n  }\n\n  if (data.orderQty === '') {\n    utils.alert('warning', 'Warning', 'Order Quantity Empty, please enter the Order Quantity')\n    return false\n  }\n\n  if (data.productionLine === '') {\n    utils.alert('warning', 'Warning', 'Production Line Empty, please enter the Production Line')\n    return false\n  }else {\n    if (productionLineList.indexOf(data.productionLine) === -1) {\n      utils.alert('warning', 'Warning', 'Production Line Not Exist, please select a Production Line from the Production Line List')\n      return false\n    }\n  }\n\n  if (data.product === '') {\n    utils.alert('warning', 'Warning', 'Product Empty, please enter the Product')\n    return false\n  }else {\n    if (prodList.indexOf(data.product) === -1) {\n      utils.alert('warning', 'Warning', 'Product Not Exist, please select a Product from the Product List')\n      return false\n    }\n  }\n\n  if (!dateRegExp.test(data.date)) {\n    utils.alert('warning', 'Warning', 'Scheduled Start Date Empty or Invalid Date Format, please choose a date from the date picker')\n    return false\n  }\n\n  if (data.plannedRate === '') {\n    utils.alert('warning', 'Warning', 'Planned Rate Empty, please enter the Planned Rate')\n    return false\n  }\n\n  return true\n}\n\nfunction updateDuration(qty, rate){\n\n  if (qty !== \"\" && rate !== \"\") {\n    let durationHrs = parseInt(qty) / parseInt(rate)\n    let momentDuration = moment.duration(durationHrs, 'hours')\n    let durationText = getDurationText(momentDuration)\n    $('input.prod-sche-gt-chart-datalist-input#duration').val(durationText)\n  }else {\n    $('input.prod-sche-gt-chart-datalist-input#duration').val('')\n  }\n\n}\n\nfunction getDurationText(momentDuration) {\n  let month = momentDuration.get('month')\n  let days = momentDuration.get('d')\n  let hrs = momentDuration.get('h')\n  let mins = momentDuration.get('minute')\n  let text = 'under 1 minute'\n\n  if (month > 0) {return 'Over a month!'}\n\n  if (days !== 0) { hrs += days * 24 }\n\n  if (hrs !== 0 && mins !== 0) {\n    text = hrs + ' hour(s) & ' + mins + ' minute(s)'\n  }else if (hrs !== 0 && mins === 0){\n    text = hrs + ' hour(s)'\n  }else if (hrs === 0 && mins !== 0){\n    text = mins + ' minute(s)'\n  }\n  \n  return text\n}\n\n/**\n * Get the product list and production line list from postgresql\n * Call the callback fn passed in once it is finished\n * Stop and prompt error when it fails\n * @param {fn} callback \n */\nfunction getProductsAndEquipment(callback) {\n  let productsUrl = utils.postgRestHost + 'products'\n  let equipmentsUrl = utils.postgRestHost + 'equipment?production_line=not.is.null'\n\n  utils.get(productsUrl)\n    .then(res => {\n      _products = res\n      utils.get(equipmentsUrl)\n        .then(res => {\n          _equipment = res\n          callback()\n        })\n        .catch(e => {\n          utils.alert('error', 'Error', 'An error occurred while fetching data from the postgresql : ' + e)        \n        })\n    })\n    .catch(e => {\n      utils.alert('error', 'Error', 'An error occurred while fetching data from the postgresql : ' + e)    \n    })\n}"]}